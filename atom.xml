<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>崎岖的路,走出自己的脚步</title>
  <subtitle>崎岖的路,走出自己的脚步</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dingran.tk/"/>
  <updated>2017-08-22T06:56:36.000Z</updated>
  <id>http://dingran.tk/</id>
  
  <author>
    <name>D.R</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring循环依赖的三种方式</title>
    <link href="http://dingran.tk/2017/08/22/Spring%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://dingran.tk/2017/08/22/Spring循环依赖的三种方式/</id>
    <published>2017-08-22T06:43:03.000Z</published>
    <updated>2017-08-22T06:56:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>转自：<a href="http://blog.csdn.net/u010644448/article/details/59108799" target="_blank" rel="external">http://blog.csdn.net/u010644448/article/details/59108799</a></p>
<h1 id="第一种：构造器参数循环依赖"><a href="#第一种：构造器参数循环依赖" class="headerlink" title="第一种：构造器参数循环依赖"></a>第一种：构造器参数循环依赖</h1><p>Spring容器会将每一个正在创建的Bean 标识符放在一个“当前创建Bean池”中，Bean标识符在创建过程中将一直保持<br>在这个池中，因此如果在创建Bean过程中发现自己已经在“当前创建Bean池”里时将抛出<br>BeanCurrentlyInCreationException异常表示循环依赖；而对于创建完毕的Bean将从“当前创建Bean池”中清除掉。</p>
<p>首先我们先初始化三个Bean。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentA</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> StudentB studentB ;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentB</span><span class="params">(StudentB studentB)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.studentB = studentB;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentA</span><span class="params">()</span> </span>&#123;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentA</span><span class="params">(StudentB studentB)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.studentB = studentB;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentB</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> StudentC studentC ;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentC</span><span class="params">(StudentC studentC)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.studentC = studentC;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentB</span><span class="params">()</span> </span>&#123;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentB</span><span class="params">(StudentC studentC)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.studentC = studentC;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentC</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> StudentA studentA ;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentA</span><span class="params">(StudentA studentA)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.studentA = studentA;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentC</span><span class="params">()</span> </span>&#123;  </div><div class="line">    &#125;  </div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentC</span><span class="params">(StudentA studentA)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.studentA = studentA;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>OK，上面是很基本的3个类，，StudentA有参构造是StudentB。StudentB的有参构造是StudentC，StudentC的有参构造是StudentA ，这样就产生了一个循环依赖的情况，<br>我们都把这三个Bean交给Spring管理，并用有参构造实例化</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"a"</span> <span class="attr">class</span>=<span class="string">"com.zfx.student.StudentA"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"b"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"b"</span> <span class="attr">class</span>=<span class="string">"com.zfx.student.StudentB"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"c"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"c"</span> <span class="attr">class</span>=<span class="string">"com.zfx.student.StudentC"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"a"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>下面是测试类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/zfx/student/applicationContext.xml"</span>);  </div><div class="line">        <span class="comment">//System.out.println(context.getBean("a", StudentA.class));  </span></div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果报错信息为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Caused by: org.springframework.beans.factory.BeanCurrentlyInCreationException:   </div><div class="line">    Error creating bean with name &apos;a&apos;: Requested bean is currently in creation: Is there an unresolvable circular reference?</div></pre></td></tr></table></figure>
<p>如果大家理解开头那句话的话，这个报错应该不惊讶，Spring容器先创建单例StudentA，StudentA依赖StudentB，然后将A放在“当前创建Bean池”中，此时创建StudentB,StudentB依赖StudentC ,然后将B放在“当前创建Bean池”中,此时创建StudentC，StudentC又依赖StudentA， 但是，此时Student已经在池中，所以会报错，，因为在池中的Bean都是未初始化完的，所以会依赖错误 ，（初始化完的Bean会从池中移除）</p>
<h1 id="第二种：setter方式单例，默认方式"><a href="#第二种：setter方式单例，默认方式" class="headerlink" title="第二种：setter方式单例，默认方式"></a>第二种：setter方式单例，默认方式</h1><p>如果要说setter方式注入的话，我们最好先看一张Spring中Bean实例化的图</p>
<p><img src="http://img.blog.csdn.net/20170301154450018?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDY0NDQ0OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>如图中前两步骤得知：<strong>Spring是先将Bean对象实例化之后再设置对象属性的</strong></p>
<p>修改配置文件为set方式注入</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">&lt;!--scope="singleton"(默认就是单例方式)  --&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"a"</span> <span class="attr">class</span>=<span class="string">"com.zfx.student.StudentA"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"studentB"</span> <span class="attr">ref</span>=<span class="string">"b"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"b"</span> <span class="attr">class</span>=<span class="string">"com.zfx.student.StudentB"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"studentC"</span> <span class="attr">ref</span>=<span class="string">"c"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"c"</span> <span class="attr">class</span>=<span class="string">"com.zfx.student.StudentC"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"studentA"</span> <span class="attr">ref</span>=<span class="string">"a"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>下面是测试类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/zfx/student/applicationContext.xml"</span>);  </div><div class="line">        System.out.println(context.getBean(<span class="string">"a"</span>, StudentA.class));  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打印结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">com.zfx.student.StudentA@1fbfd6</div></pre></td></tr></table></figure>
<p>为什么用set方式就不报错了呢 ？<br>    我们结合上面那张图看，Spring先是用构造实例化Bean对象 ，此时Spring会将这个实例化结束的对象放到一个Map中，并且Spring提供了获取这个未设置属性的实例化对象引用的方法。   结合我们的实例来看，，当Spring实例化了StudentA、StudentB、StudentC后，紧接着会去设置对象的属性，此时StudentA依赖StudentB，就会去Map中取出存在里面的单例StudentB对象，以此类推，不会出来循环的问题喽、</p>
<p>下面是Spring源码中的实现方法，。以下的源码在Spring的Bean包中的DefaultSingletonBeanRegistry.Java类中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/** Cache of singleton objects: bean name --&gt; bean instance（缓存单例实例化对象的Map集合） */</span>  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> ConcurrentHashMap&lt;String, Object&gt;(<span class="number">64</span>);  </div><div class="line">      </div><div class="line">    <span class="comment">/** Cache of singleton factories: bean name --&gt; ObjectFactory（单例的工厂Bean缓存集合） */</span>  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, ObjectFactory&gt; singletonFactories = <span class="keyword">new</span> HashMap&lt;String, ObjectFactory&gt;(<span class="number">16</span>);  </div><div class="line">      </div><div class="line">    <span class="comment">/** Cache of early singleton objects: bean name --&gt; bean instance（早期的单身对象缓存集合） */</span>  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; earlySingletonObjects = <span class="keyword">new</span> HashMap&lt;String, Object&gt;(<span class="number">16</span>);  </div><div class="line">      </div><div class="line">    <span class="comment">/** Set of registered singletons, containing the bean names in registration order（单例的实例化对象名称集合） */</span>  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; registeredSingletons = <span class="keyword">new</span> LinkedHashSet&lt;String&gt;(<span class="number">64</span>);  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 添加单例实例 </div><div class="line">     * 解决循环引用的问题 </div><div class="line">     * Add the given singleton factory for building the specified singleton </div><div class="line">     * if necessary. </div><div class="line">     * &lt;p&gt;To be called for eager registration of singletons, e.g. to be able to </div><div class="line">     * resolve circular references. </div><div class="line">     * <span class="doctag">@param</span> beanName the name of the bean </div><div class="line">     * <span class="doctag">@param</span> singletonFactory the factory for the singleton object </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addSingletonFactory</span><span class="params">(String beanName, ObjectFactory singletonFactory)</span> </span>&#123;  </div><div class="line">        Assert.notNull(singletonFactory, <span class="string">"Singleton factory must not be null"</span>);  </div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.singletonObjects) &#123;  </div><div class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.singletonObjects.containsKey(beanName)) &#123;  </div><div class="line">                <span class="keyword">this</span>.singletonFactories.put(beanName, singletonFactory);  </div><div class="line">                <span class="keyword">this</span>.earlySingletonObjects.remove(beanName);  </div><div class="line">                <span class="keyword">this</span>.registeredSingletons.add(beanName);  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h1 id="第三种：setter方式原型，prototype"><a href="#第三种：setter方式原型，prototype" class="headerlink" title="第三种：setter方式原型，prototype"></a>第三种：setter方式原型，prototype</h1><p>修改配置文件为：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"a"</span> <span class="attr">class</span>=<span class="string">"com.zfx.student.StudentA"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"studentB"</span> <span class="attr">ref</span>=<span class="string">"b"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"b"</span> <span class="attr">class</span>=<span class="string">"com.zfx.student.StudentB"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"studentC"</span> <span class="attr">ref</span>=<span class="string">"c"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"c"</span> <span class="attr">class</span>=<span class="string">"com.zfx.student.StudentC"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"studentA"</span> <span class="attr">ref</span>=<span class="string">"a"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>scope=”prototype” 意思是 每次请求都会创建一个实例对象。两者的区别是：有状态的bean都使用Prototype作用域，无状态的一般都使用singleton单例作用域。<br>测试用例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/zfx/student/applicationContext.xml"</span>);  </div><div class="line">        &lt;strong&gt;<span class="comment">//此时必须要获取Spring管理的实例，因为现在scope="prototype" 只有请求获取的时候才会实例化对象&lt;/strong&gt;  </span></div><div class="line">        System.out.println(context.getBean(<span class="string">"a"</span>, StudentA.class));  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Caused by: org.springframework.beans.factory.BeanCurrentlyInCreationException:   </div><div class="line">    Error creating bean with name &apos;a&apos;: Requested bean is currently in creation: Is there an unresolvable circular reference?</div></pre></td></tr></table></figure>
<p>为什么原型模式就报错了呢 ？<br>对于“prototype”作用域Bean，Spring容器无法完成依赖注入，因为“prototype”作用域的Bean，Spring容<br>器不进行缓存，因此无法提前暴露一个创建中的Bean。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转自：&lt;a href=&quot;http://blog.csdn.net/u010644448/article/details/59108799&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/u010644448/arti
    
    </summary>
    
      <category term="spring" scheme="http://dingran.tk/categories/spring/"/>
    
    
      <category term="spring" scheme="http://dingran.tk/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>牛抢票关于HASH散列分析总结</title>
    <link href="http://dingran.tk/2017/08/11/%E7%89%9B%E6%8A%A2%E7%A5%A8%E5%85%B3%E4%BA%8EHASH%E6%95%A3%E5%88%97%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/"/>
    <id>http://dingran.tk/2017/08/11/牛抢票关于HASH散列分析总结/</id>
    <published>2017-08-11T08:11:01.000Z</published>
    <updated>2017-08-11T08:33:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近抢票的订单明显增加了好多，每个抢票都要在规定时间进行查询DTC再去12306查询判断余票，然后根据余位的数量进行分单。</p>
<p>随着订单的不断增加，比如当前有1W单，需要在一分钟全部重新查一遍，那么怎么保证所有的订单都能查到呢？之前做的是将订单根据时间戳与60作取余的操作，然后根据余数进行散列到某一个时间进行查询，但是从DTC的角度看OCS查询的分布，发现非常不平均，比如在1~10秒之间几乎没有请求，在30~40秒之间每秒的请求几乎成百上千，这么不平衡的查询造成一个非常严重的问题—DTC有限流，超过限流的部分都将被降级，那么对于OCS来说，这些被降级的数据都是不准确，拿这个数据进行出票站位的话就显得非常无奈。所以ocs的散列均衡就显得非常重要，因为DTC的限流就是根据OCS的散列平均值来设置的。</p>
<p>那怎么整改呢？这时候我想到之前看1.8的concurrentHashmap的一个想法就是数组链表，就是在向map里面放数据的时候进行hash然后散列，但是总是不可避免发生碰撞，map在put的时候，如果发现hash的位置已经有值了，就变成链表，如果链表的长度超过8，就变成红黑树…我们这个不用这么复杂，我们使用hash的散列的时候，发现该位置有值的时候，就在这个位置放置List，比如总量10000，散列到30秒，我们就准备30个捅，平均每秒散列333个左右，每个桶的容量也就是333，那么当散列到这个位置的时候发现桶的容量已经到达333的时候，就放到下一个桶，判断下一个桶的数量是否到达333，如果下一个桶也到333就在放到下一个。。。以此类推。总会放到平均的位置。这里没有使用rehash的操作，因为我测试起来效果不是很明显，并且我这边散列的时间都是很短的，没必要进行rehash操作。</p>
<p>经过写个例子进行压测，发现每次散列的请求数差距不会超过10个，对于10个请求差距已经是很好的，已经满足我的需要，如果想让差距更短，就需要在调节一下各个值得比例就可以了。</p>
<p>非常好，再接再厉。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近抢票的订单明显增加了好多，每个抢票都要在规定时间进行查询DTC再去12306查询判断余票，然后根据余位的数量进行分单。&lt;/p&gt;
&lt;p&gt;随着订单的不断增加，比如当前有1W单，需要在一分钟全部重新查一遍，那么怎么保证所有的订单都能查到呢？之前做的是将订单根据时间戳与60作取
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.tk/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.tk/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>7月总结</title>
    <link href="http://dingran.tk/2017/08/01/7%E6%9C%88%E6%80%BB%E7%BB%93/"/>
    <id>http://dingran.tk/2017/08/01/7月总结/</id>
    <published>2017-08-01T02:25:11.000Z</published>
    <updated>2017-08-01T03:03:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>8.1号，迎来了8月份，浑浑噩噩的度过了七月份，这个月做了很多事，有失落也有收获。</p>
<p>七月伊始，妈妈来上海了，我在上海工作都4个年头了，妈妈还是头一次来看我，这要是在我第一年的时候，那都不敢想呀，隔断，连个落脚的地方都没有，蓦然回首都是泪呀，这的不想回忆了。</p>
<p>京东接入途牛火车票已经有一段时间了，天天吵吵着数据这不准，那也不准。没错，确实有些数据不准，这从我的理解都是系统的漏洞导致的，极大部分是开发人员在使用场景没有考虑周全导致的，比如：一个站站对不存在，如何判断不存在？只有12306返回没有，才算车次不存在，如果我们查询12306，查询失败了，就应该返回数据刷新中。看是很简单的道理，但是真的放到编码当中，就会发现控制起来很麻烦，首先以缓存问媒介，前面设置闭锁，后面查询抓取，释放闭锁，然后前面在查询缓存判断缓存是否更新，这里就要判断缓存是真的没有还是访问代理失败了还是被12306屏蔽了呢？纵有千万场景，解决方案是有的，这个问题在之前，根本不是问题，因为数据准确性和速度是首要的。这两项被我改的已有很大的改观后，那么这种数据刷新中和车次不存在自然而然就上台了。</p>
<p>JD对数据的准确性要求很高，我们只能从自身上去解决，尽量提高他们的要求，毕竟他们是金主，但是和我无关，我的职责就是保证我负责的系统的高效、准确的提供数据。</p>
<p>这段时间的技术支持还有丢车次、余位数据不刷新等问题，我查看了一下，大概都是遇到系统瓶颈，DTC的系统瓶颈就是对查询量太大导致线程池很长时间释放，堆积到queue里面。这段时间我对线程池的理解又深刻了一点。线程池，很好的工具，不会导致过量线程出现，但是如何高效利用是否想过？如何配置coreSize？经常遇到一个线程池忙的要死，剩下90%的线程池闲的要死，最多启动1个线程或者active count的线程都是0，是不是有点浪费了。你可能会想到我直接开个500的线程，大家一起用不是更好么？如果开启这么多，系统一下就要启动这么多，如果系统只是一瞬间用到500，多数都是100多有，那么就有400浪费。每个线程池负责自己的业务模块，所以使用场景不同，对CPU的控制也是不同的，所以要做的是在你闲置的情况下，帮我干点事，你忙了，我就不用你了。</p>
<p>这次还做了一件事就是对价格和经停站使用MQ队列进行分布式抓取。价格和经停站抓取的量很多，而且远远超过余位的查询量，自从我把代理ip的统计做出来之后就会发现，80%的代理ip都在抓取价格和经停站，而且代理ip被封的概率很高。另外一个原因是量太大直接导致线程池溢出，因为这已经超出了合理范围，并且价格抓取不全，一个车次10个价格，有时候会抓取6个下来，剩下4个就丢了，也没有重试操作。根据这个特点，使用免费代理ip去抓取价格经停站，使用mq去分发要抓取的数据，平衡到所有的实例上，压力瞬间被缩小化，再充分利用线程池的coresize，现在价格几乎实现秒抓，抓取失败再通过mq重新抓取，保证价格平稳落地，方便后面进行查询。</p>
<p>经过上面多方面的改动，现在系统已经平稳的运行，通过统计数据，可以看出数据刷新中的比例已经由2%降到了0.2%，这是一个很客观的数字，也是很合理的水平，DTC现在已经平稳的运行一段时间，线程总数保持在1200~1300左右，堆内存保持2g-3g之间，一切都在掌控之中。</p>
<p>在压测测试环境的时候，我以6000W的标准进行压测，每秒30个请求访问接口，观看DTC的各项指标，除了线程升高和内存升高点，线程池等像没发生什么事情一样，这主要是尽量不让线程处理耗时太长，否则，就会导致瓶颈的出现。</p>
<p>8月，我来了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;8.1号，迎来了8月份，浑浑噩噩的度过了七月份，这个月做了很多事，有失落也有收获。&lt;/p&gt;
&lt;p&gt;七月伊始，妈妈来上海了，我在上海工作都4个年头了，妈妈还是头一次来看我，这要是在我第一年的时候，那都不敢想呀，隔断，连个落脚的地方都没有，蓦然回首都是泪呀，这的不想回忆了。&lt;/
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.tk/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.tk/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>取舍难题？</title>
    <link href="http://dingran.tk/2017/07/31/%E5%8F%96%E8%88%8D%E9%9A%BE%E9%A2%98%EF%BC%9F/"/>
    <id>http://dingran.tk/2017/07/31/取舍难题？/</id>
    <published>2017-07-31T08:20:29.000Z</published>
    <updated>2017-07-31T08:37:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近前端接口的火车票查询列表被刷了，每天到13点左右的流量会提升2~3倍，这给DTC的查询带来了极大的压力，虽然DTC有限流降级的策略，但是这么大的流量直接导致所有的查询几乎无效化。</p>
<p>现在架构是PC、M站、APP等通过RIS查询DTC获取火车票车次列表，分销商直接接入DTC查询火车车次列表，现在我的想法是：在RIS端限流，将查询波峰给削掉，进入DTC的是平缓的稳定的，现有情况是RIS的高峰直接拉起DTC的查询高峰，导致服务器压力骤然升高。这不光影响前段的查询，也导致分销商的查询不准。根据我得想法，可以保证DTC的查询准确性，分销商不受影响，由于RIS被限流，那么将会影响前端等查询的准确性，这个是现在没办法解决的，因为没有办法区分正常的ip还是恶意的ip。</p>
<p>还有一种就是保持现状，对ip进行限制，但是现在ip根本限制不住，人家攻击你也不会使用单一Ip等着让你封，所以现在每天还是会有一段时间被人家刷的接口直接爆红。</p>
<p>有一个例子：马上就要发洪水了，你最喜爱的两只狗在河里面洗澡，你知道洪水来了后发现你只能救一只（别和说你一只手拎一只或者一声口哨两只狗全颠颠跑到你身边），那么你是救一只还是看着他们全部被冲走呢？</p>
<p>你会有更好的解决办法么？</p>
<p>人生有舍有得，舍得舍得，没有舍哪来得？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近前端接口的火车票查询列表被刷了，每天到13点左右的流量会提升2~3倍，这给DTC的查询带来了极大的压力，虽然DTC有限流降级的策略，但是这么大的流量直接导致所有的查询几乎无效化。&lt;/p&gt;
&lt;p&gt;现在架构是PC、M站、APP等通过RIS查询DTC获取火车票车次列表，分销商
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.tk/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.tk/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>DTC线程池整合利用</title>
    <link href="http://dingran.tk/2017/07/29/DTC%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%95%B4%E5%90%88%E5%88%A9%E7%94%A8/"/>
    <id>http://dingran.tk/2017/07/29/DTC线程池整合利用/</id>
    <published>2017-07-29T05:54:42.000Z</published>
    <updated>2017-07-29T06:03:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直再做DTC系统的整合工作，我将价格与经停站由原来的单个JVM去抓取改为使用MQ去操作。这样做的原因是有的查询车次比较多，造成查询的价格比较多，经停站比较多，单个JVM不一定能够及时处理掉，经常会被线程池扔掉了，造成有些资源的数据抓取不全。</p>
<p>经过压测查看各个线程池的状况得出一个结论：忙的忙死，闲的闲死。有什么办法能让所有的线程池全部调度起来呢？特别是价格抓取的时候由于采用免费代理ip去check，造成需要多次查询才能得出最终结果，而这段期间是不会释放掉线程造成线程堵塞。还有一个就是免费代理ipcheck的时候也是这样的，queue的size经常堆到最大值。</p>
<p>于是我整合所有的线程池，集中到一个方法中，判断当前线程池是否闲置，如果闲置那么就替我做些事情，安排好使用策略，而不影响这个线程池的正常的业务。</p>
<p>改好后，经过测试压测，已经堆积的线程池，现在情况得到了很大的改善，而且不影响正常的使用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直再做DTC系统的整合工作，我将价格与经停站由原来的单个JVM去抓取改为使用MQ去操作。这样做的原因是有的查询车次比较多，造成查询的价格比较多，经停站比较多，单个JVM不一定能够及时处理掉，经常会被线程池扔掉了，造成有些资源的数据抓取不全。&lt;/p&gt;
&lt;p&gt;经过压测查看
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.tk/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.tk/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>7.22~7.23双休工作总结</title>
    <link href="http://dingran.tk/2017/07/23/7-22-7-23%E5%8F%8C%E4%BC%91%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    <id>http://dingran.tk/2017/07/23/7-22-7-23双休工作总结/</id>
    <published>2017-07-23T07:37:35.000Z</published>
    <updated>2017-07-23T08:11:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>这一阵主要的工作重点是忙在DTC的系统改造，上周主要是在DTC的余位查询抓取12306结果，分析构造结果、merge价格数据等单独重写了几个类。原来的人写的代码实在是不能进行扩展，我知道这不符合开闭原则，但是现在系统问题太多，不改实在不行了。</p>
<p>我将余位查询改为自己封装的httpUtil，这个类很简单，之前搞了很多回调方法，再添加动态USER-AGENT的时候就特别麻烦。自己写了一个，其实网上有很多例子，拿下来修改修改，就可以为自己所用了。然后是12306余位分析，这个之前改完了，后面有个价格merge的过程，这个我改为生产者消费者模式，因为抓取价格和经停站全部用免费代理ip去抓，速度上很慢，所以我创建blockingqueue，不停往里面放数据，后面有两个消费者去消费，如果放入的数据超过queue的最大值（有界限），停止放入数据，这样可以保护系统不内存溢出。</p>
<p>上面的都是我抽出类，在diamond的动态配置里面可以随便切过来切过去。上周一，我上线了一般，切到新逻辑，表现还不错，周三我改了一版，再次上线，这次就有问题了，每次都是这样上线一段时间后，系统的数据就不再更新了。我知道是哪个地方又出现了瓶颈了，及时让性能小组去压测，也压不出来问题到底在哪，我大概分析了一下应该是哪个线程池发生了堆积，造成请求堆积进而不发生数据更新。</p>
<p>于是我写了个线下接口，将所有线程池的数据全部打印出来，这个及时是用jvisualvm也是看不出来的，我发布到测试环境，写了个小程序用10个线程并发去压测，果然，过了一段时间，请求数据不再更新。我调用线程池接口发现在开始出发抓取12306的线程池的queue里面已经堆积了上百的数据，也就是说，新过来的请求已经不能够及时出发抓取，这就尴尬了，排查一遍代码，修改了一下，再次发布，这个瓶颈已经解决了，按照去年的一天3000W访问量，我将今年的单日最大设置为6000W的访问，平均到每秒大概为27个请求左右，也就是说一台实例每秒接收27个左右的请求，那我就拿这个频率去压测系统，没过多久，分析12306数据和merge数据的线程池也到达瓶颈，采用责任链模式，做完一道工序交给下个工序这样去处理，平滑度过这个高峰期，防止在一个节点上发生堆积，然后再次发布测试，在进行压测，过了20分钟再次查看线程池状况，一切都在coresize的范围内运行，很顺畅，但是最后merge缓存和发送mq的时候发生堆积了，还是如上，我将两个分开，由于这两步操作数据量非常大，还是采用生产者消费者模式进行写缓存和发送mq，这期间我发现发送mq比写缓存的速度还要慢很多，我将发送ma单独创建线程池去操作，这样用了7.22~23号两天，我将系统做了不小的改动，23号我主要进行的是系统的压测。以25个每秒左右的访问量进行压测，系统表现的很稳定，但是价格的问题还是卡了很多，还有发送的mq卡的问题其他的线程池表现的正常。价格问题后面我准备用分布式+MQ去处理，因为一个实例处理起来实在是太慢了，将线上所有的服务器全部用起来提升抓取效率，而不是让一台累死，其他的都闲着蛋疼。</p>
<p>本次改造还有就是对抢票接口和余位接口的缓存进行相互更新。抢票接口就是没有价格的接口，余位是包含价格的，但是抢票接口的刷取频繁度是要高于余位接口的，这两个接口的缓存不是同一套，但是现实余位的数据却是一样的，这里面有我的问题，当初是自己没有将这两个接口搞清楚，其实完全可以用一个接口就搞定了，搞出两个其实也并不是没什么用，也算是自己搞了一套自己的代码出来，但是爬取效率还是很高的。这样两个接口相互更新缓存就可以节省一批代理ip消耗，留给有需要的站站对使用。</p>
<p>问题还在，坑还很多，还有更多的路要走。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一阵主要的工作重点是忙在DTC的系统改造，上周主要是在DTC的余位查询抓取12306结果，分析构造结果、merge价格数据等单独重写了几个类。原来的人写的代码实在是不能进行扩展，我知道这不符合开闭原则，但是现在系统问题太多，不改实在不行了。&lt;/p&gt;
&lt;p&gt;我将余位查询改为
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.tk/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.tk/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>总结最近一段时间工作</title>
    <link href="http://dingran.tk/2017/07/19/%E6%80%BB%E7%BB%93%E6%9C%80%E8%BF%91%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%B7%A5%E4%BD%9C/"/>
    <id>http://dingran.tk/2017/07/19/总结最近一段时间工作/</id>
    <published>2017-07-19T08:17:42.000Z</published>
    <updated>2017-07-19T08:32:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>好几天没有写点东西了，是这一段时间忙的太累了。</p>
<p>前一段时间连续上了4次线都失败了，结果发现是在一个if后面没有做有效的判断造成死循环了，影响请求的返回，犯了这么低级的错误，也确实难以饶恕，以后编写代码一定要仔细认真确认。</p>
<p>妈妈来了三周，这周1回去了，心里面有点不舒服，没办法。</p>
<p>工作上自从京东接入途牛火车票查询以来，事情一天比一天多，而且没事就抄送CEO,COO，这让我有点难以理解，如果你们有事我们也抄送刘强东，是不是也让你菊花一紧。</p>
<p>有事说事，没事总往上捅是干嘛呢？最近DTC系统整改很大，我把余位接口和价格接口都重新开辟了新的接口，新的类，现在在线上跑没有什么问题，至于改的原因是原来的代码真的是不改不行了，按照软件的开闭原则，这确实是不是好的主意，但是如果维护成本太大，不改简直是浪费脑细胞。还差经停站，经停站我得重新设计一下。</p>
<p>最近加了几天班，都是集中搞一些数据，之前显示数据刷新中，现在使用线上代理ip+免费代理ip+app反刷集中获取余位，现在效果好了很多了</p>
<p>后面事情还有很多，比如分布式处理价格、经停站等</p>
<p>再接再厉！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好几天没有写点东西了，是这一段时间忙的太累了。&lt;/p&gt;
&lt;p&gt;前一段时间连续上了4次线都失败了，结果发现是在一个if后面没有做有效的判断造成死循环了，影响请求的返回，犯了这么低级的错误，也确实难以饶恕，以后编写代码一定要仔细认真确认。&lt;/p&gt;
&lt;p&gt;妈妈来了三周，这周1回去
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.tk/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.tk/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>防刷限制ip设计</title>
    <link href="http://dingran.tk/2017/07/05/%E9%98%B2%E5%88%B7%E9%99%90%E5%88%B6ip%E8%AE%BE%E8%AE%A1/"/>
    <id>http://dingran.tk/2017/07/05/防刷限制ip设计/</id>
    <published>2017-07-05T07:24:02.000Z</published>
    <updated>2017-07-05T07:28:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一段时间，发现DTC的余位查询接口在每天的12~13点左右，流量飙升3倍左右，然后又回落，如果经过系统关键字查询发现查询是来自APP端的访问，那么这就有可能是我们的接口被人家给刷了，作为底层系统，我需要保证接口的高效性，如果接口被人刷了就会导致真正需要接口数据的准确性。</p>
<p>由于是底层系统，所以我没有办法获得客户端的ip，于是先让PHP把客户端ip透传过来，我对ip的查询速度进行限制。网上这种限制的资料太多了，等我设计好了再补充。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一段时间，发现DTC的余位查询接口在每天的12~13点左右，流量飙升3倍左右，然后又回落，如果经过系统关键字查询发现查询是来自APP端的访问，那么这就有可能是我们的接口被人家给刷了，作为底层系统，我需要保证接口的高效性，如果接口被人刷了就会导致真正需要接口数据的准确性。
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.tk/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.tk/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>Linux下配置squid+账号密码认证+高匿</title>
    <link href="http://dingran.tk/2017/06/30/Linux%E4%B8%8B%E9%85%8D%E7%BD%AEsquid-%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E8%AE%A4%E8%AF%81-%E9%AB%98%E5%8C%BF/"/>
    <id>http://dingran.tk/2017/06/30/Linux下配置squid-账号密码认证-高匿/</id>
    <published>2017-06-30T06:22:56.000Z</published>
    <updated>2017-06-30T06:54:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="squid-搭建过程"><a href="#squid-搭建过程" class="headerlink" title="squid 搭建过程"></a>squid 搭建过程</h1><p>由于我们之前使用的阿里云的代理ip配置的代理服务器，由于领导要我们使用亚马逊云配置代理服务器，所以交给我任务去配置代理服务器，还得兼容以前的形式，也就说账号+密码的形式登录代理，访问网站。</p>
<p>我觉得很简单，网上有很多配置的信息，结果搜下来有很多都是大家相互复制的垃圾文章，要不就是虎头蛇尾，要不就是没头没尾，弄得我脑袋都大了，经过昨天晚上的资料筛选，今天我开启了AWS的配置，创建了个实例就不说了直接跳入配置过程：</p>
<h2 id="首先先判断是否安装squid："><a href="#首先先判断是否安装squid：" class="headerlink" title="首先先判断是否安装squid："></a>首先先判断是否安装squid：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -q squid</div></pre></td></tr></table></figure>
<h2 id="如果安装了不行就卸载了吧"><a href="#如果安装了不行就卸载了吧" class="headerlink" title="如果安装了不行就卸载了吧"></a>如果安装了不行就卸载了吧</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">rpm -e squid</div></pre></td></tr></table></figure>
<h2 id="再进行下载squid"><a href="#再进行下载squid" class="headerlink" title="再进行下载squid"></a>再进行下载squid</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">yum install squid</div></pre></td></tr></table></figure>
<h2 id="下载httpd-为后面进行认证做准备"><a href="#下载httpd-为后面进行认证做准备" class="headerlink" title="下载httpd 为后面进行认证做准备"></a>下载httpd 为后面进行认证做准备</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install httpd</div></pre></td></tr></table></figure>
<h2 id="下载好了后，配置-etc-squid-squid-conf-这个比较重要"><a href="#下载好了后，配置-etc-squid-squid-conf-这个比较重要" class="headerlink" title="下载好了后，配置/etc/squid/squid.conf 这个比较重要"></a>下载好了后，配置/etc/squid/squid.conf 这个比较重要</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#</div><div class="line"># INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS</div><div class="line"># =======================</div><div class="line"></div><div class="line"># 禁止缓存任何内容，纯代理</div><div class="line">cache deny all</div><div class="line"></div><div class="line"># 禁用access_log</div><div class="line">access_log none</div><div class="line"></div><div class="line"># 禁用cache_store log</div><div class="line">cache_store_log none</div><div class="line"></div><div class="line"># 禁用cache log</div><div class="line">cache_log /dev/null </div><div class="line"></div><div class="line"># 使用basic_nsca_auth认证</div><div class="line">auth_param basic program /usr/lib64/squid/basic_ncsa_auth /etc/squid/passwd</div><div class="line">auth_param basic children 5</div><div class="line">auth_param basic credentialsttl 2 hours</div><div class="line">auth_param basic realm Do you have rights to access?</div><div class="line">auth_param basic casesensitive off</div><div class="line">acl ncsa_users proxy_auth REQUIRED</div><div class="line">http_access allow localnet</div><div class="line">http_access allow localhost</div><div class="line">http_access allow ncsa_users</div><div class="line">http_port 8888</div><div class="line"></div><div class="line">#以上配置部分要在http_access deny all语句之前。</div><div class="line"></div><div class="line"># 这部分可以放在配置文件末尾，避免被网站检测到你在使用proxy</div><div class="line"># =======================</div><div class="line">via off</div><div class="line">forwarded_for off</div><div class="line">request_header_access Allow allow all </div><div class="line">request_header_access Authorization allow all </div><div class="line">request_header_access WWW-Authenticate allow all </div><div class="line">request_header_access Proxy-Authorization allow all </div><div class="line">request_header_access Proxy-Authenticate allow all </div><div class="line">request_header_access Cache-Control allow all </div><div class="line">request_header_access Content-Encoding allow all </div><div class="line">request_header_access Content-Length allow all </div><div class="line">request_header_access Content-Type allow all </div><div class="line">request_header_access Date allow all </div><div class="line">request_header_access Expires allow all </div><div class="line">request_header_access Host allow all </div><div class="line">request_header_access If-Modified-Since allow all </div><div class="line">request_header_access Last-Modified allow all </div><div class="line">request_header_access Location allow all </div><div class="line">request_header_access Pragma allow all </div><div class="line">request_header_access Accept allow all </div><div class="line">request_header_access Accept-Charset allow all </div><div class="line">request_header_access Accept-Encoding allow all </div><div class="line">request_header_access Accept-Language allow all </div><div class="line">request_header_access Content-Language allow all </div><div class="line">request_header_access Mime-Version allow all </div><div class="line">request_header_access Retry-After allow all </div><div class="line">request_header_access Title allow all </div><div class="line">request_header_access Connection allow all </div><div class="line">request_header_access Proxy-Connection allow all </div><div class="line">request_header_access User-Agent allow all </div><div class="line">request_header_access Cookie allow all </div><div class="line">request_header_access All deny all</div><div class="line"># =======================</div></pre></td></tr></table></figure>
<p>squid.conf配置里面还有很多其他的配置，网上有很多详细的配置说明，这里不多介绍。在squid.conf开头我配置auth进行账号密码认证后才能访问。</p>
<h2 id="账号密码配置过程"><a href="#账号密码配置过程" class="headerlink" title="账号密码配置过程"></a>账号密码配置过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">htpasswd -c /etc/squid/passwd gavin</div><div class="line">#这里会让你设置密码</div><div class="line">##在确认一下密码</div><div class="line">###设置完成</div></pre></td></tr></table></figure>
<h2 id="校验配置文件配置"><a href="#校验配置文件配置" class="headerlink" title="校验配置文件配置"></a>校验配置文件配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">squid -z</div><div class="line">#如果squid 没有配置环境变量，到/usr/sbin下面执行squid</div></pre></td></tr></table></figure>
<p>执行完后会有一些信息，如果配置文件信息错误会有相关提示，更改就好</p>
<h2 id="最后启动squid"><a href="#最后启动squid" class="headerlink" title="最后启动squid"></a>最后启动squid</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">squid start</div></pre></td></tr></table></figure>
<h2 id="查看端口状况"><a href="#查看端口状况" class="headerlink" title="查看端口状况"></a>查看端口状况</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">netstat -anp|grep 8888</div></pre></td></tr></table></figure>
<p>最后退出云服务器，在本地浏览器配置代理使用服务器公网ip+端口号，打开百度后会有显示让你输入账号密码就成功了，输入账号密码就可以登录浏览网页了</p>
<p>完。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;squid-搭建过程&quot;&gt;&lt;a href=&quot;#squid-搭建过程&quot; class=&quot;headerlink&quot; title=&quot;squid 搭建过程&quot;&gt;&lt;/a&gt;squid 搭建过程&lt;/h1&gt;&lt;p&gt;由于我们之前使用的阿里云的代理ip配置的代理服务器，由于领导要我们使用亚马逊
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.tk/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.tk/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>免费代理集成dtc使用明细</title>
    <link href="http://dingran.tk/2017/06/28/%E5%85%8D%E8%B4%B9%E4%BB%A3%E7%90%86%E9%9B%86%E6%88%90dtc%E4%BD%BF%E7%94%A8%E6%98%8E%E7%BB%86/"/>
    <id>http://dingran.tk/2017/06/28/免费代理集成dtc使用明细/</id>
    <published>2017-06-28T03:14:06.000Z</published>
    <updated>2017-06-28T10:10:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>经历种种问题，终于将免费代理ip集成到DTC系统当中，之前由于各种问题，被我暂停，6.26号上线后，正式被我打开，打开后，在6.27号跑了一天后，我可以统计代理ip和免费代理ip的使用信息，其中代理ip使用了近150W次，而成功爬取数据成功的只有一半，再看免费代理ip，代替花钱买的代理ip抓取数据并且成功的数量在130w左右，说明了什么？免费代理ip几乎帮助dtc系统顶了将近一半的查询12306的数据。</p>
<p>免费代理ip质量参差不齐，所以用它们去抓取价格、抓取经停站简直是绝配了，这两天我将代理ip和免费代理ip的使用明细全部统计出来，余位接口、抢票接口、价格接口、经停站接口等使用了多少，失败了多少，各个角度去统计ip使用率，为后面更好统计我们使用代理ip的数量提供了更好的数据支持（可恶的黄甲天天催）。</p>
<p>这是上线第一天的数据量，但是从我今天的统计来看，免费代理ip的有效率占ip使用总数比例几乎是1：1的，有所增加，这也是情理之中的，因为随着时间的增长，花钱买的代理ip的有效率肯定会下降的，但是免费代理ip就会有新鲜的ip加进来，维持高效爬取数据，所以最终我初步断定免费代理ip能够贡献的爬取树量占花钱买的代理ip的贡献量50%左右,这是一个挺不错的数字,但是今天我却发现免费代理ip使用数量和我们线上买的代理ip使用的总数量一致，但是但是但是说三遍，线上有47%的失败率。什么意思?就是说免费代理ip的贡献率是我们花钱买到的代理ip的三倍左右，如果我们之前使用1000个代理ip现在我们就可以少买666个代理ip，一个代理ip80块，就是5w+，也就说至少可以节省一半的ip的预算。</p>
<p>这个小爬虫是我自己的想法，当初不被任何人看好，现在却带来了巨大的红利，我会继续再接再厉，提高抓取爬虫的有效率，继续做点有意义的事情出来。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经历种种问题，终于将免费代理ip集成到DTC系统当中，之前由于各种问题，被我暂停，6.26号上线后，正式被我打开，打开后，在6.27号跑了一天后，我可以统计代理ip和免费代理ip的使用信息，其中代理ip使用了近150W次，而成功爬取数据成功的只有一半，再看免费代理ip，代替
    
    </summary>
    
      <category term="日记月累" scheme="http://dingran.tk/categories/%E6%97%A5%E8%AE%B0%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.tk/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>集成爬虫到DTC系统以及相关问题总结</title>
    <link href="http://dingran.tk/2017/06/23/%E9%9B%86%E6%88%90%E7%88%AC%E8%99%AB%E5%88%B0DTC%E7%B3%BB%E7%BB%9F%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://dingran.tk/2017/06/23/集成爬虫到DTC系统以及相关问题总结/</id>
    <published>2017-06-23T07:16:58.000Z</published>
    <updated>2017-06-23T07:29:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>6.21号，我把带有爬取免费代理ip的爬虫放到线上，结果部署完成后发现redis不停的报一个错–unexpected stream。上网搜了一下，大概都是缓存空间不够或者多个线程一起调用的问题，但是我觉得用起来根不是这些问题。在测试环境都没有发现这种问题。后来请教运维相关人员瞬间我知道自己出现的问题在哪了。</p>
<p>在代码里面，我使用brpop命令来进行监听某个redis队列是否有数据，类似java的blockingqueue，我之前满心欢喜，这个功能真的好用，但是到了线上就完犊子了，原因是我们线上的redis使用的twemproxy这个twitter的redis代理来进行redis的管理。这个twemproxy可以自动剔除坏掉的节点，比较好用，但是它也有它的缺点就是它不支持一些redis的命令，brpop是其中一个，还有订阅发布等都不支持。有点沮丧，没办法，只能自己去实现这功能了。</p>
<p>昨天6.22号又紧急上线了，我是搭车上线主要是修复一些小问题，顺便把redis这个brpop这个修改了。然后再次发布，到线上后一切正常，然后到了今天早上，我来的时候突然发现dtc系统不提供服务了，经过visualvm链接线上的jvm查看，看见线程活跃说已经达到2800+了，我知道是自己在代码里面创建了一个线程池频繁销毁启动造成的，还好自己做了开关，我将开关关闭，将每台服务器都启动了一遍，多有实例都可以提供服务，没有问题。再看代码再将销毁线程池的地方再次修改，等待下次上线日。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;6.21号，我把带有爬取免费代理ip的爬虫放到线上，结果部署完成后发现redis不停的报一个错–unexpected stream。上网搜了一下，大概都是缓存空间不够或者多个线程一起调用的问题，但是我觉得用起来根不是这些问题。在测试环境都没有发现这种问题。后来请教运维相关人
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.tk/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.tk/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>DTC集成智能小爬虫抓取免费ip</title>
    <link href="http://dingran.tk/2017/06/18/DTC%E9%9B%86%E6%88%90%E6%99%BA%E8%83%BD%E5%B0%8F%E7%88%AC%E8%99%AB%E6%8A%93%E5%8F%96%E5%85%8D%E8%B4%B9ip/"/>
    <id>http://dingran.tk/2017/06/18/DTC集成智能小爬虫抓取免费ip/</id>
    <published>2017-06-17T16:40:05.000Z</published>
    <updated>2017-06-17T17:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>6.18，年中了，自己马上就要在途牛干了将近1年了，回头望来感慨万千。哎，华奥司机是不是走的有点早啊，再呆上3个月，可能比你之前呆的那一年经历的坑还多呢。</p>
<p>已经是深夜，今天还是父亲节，今天早上起来得给父亲打个电话，谁让我是个大孝子呢，哎没办法。没事写写博客回忆今天做的事情也是蛮快乐的事情呀。</p>
<p>这两天是京东618的日子，每个组都需要有个人值班，虽说我不是这个值班的人，但是我还是本着“工（赚）作（加）至（班）上（费）”的原则还是不请自来了，既然来了也要必须做点事情呀，谁让我的价值观这么高呢。扯远了开始正题：</p>
<p>我先在自己的机器上搭建了一个小java工程，这个工程主要是用来爬取网上的免费代理ip，这一段时间以来12306几乎把我们所有的代理ip全部封掉了，即使买一些新的上去，最多几分钟就挂了，所以我需要一些炮灰来帮我刷新一些数据。由于代理ip不够用了，幸亏之前上了APP反刷（不是火车票列表反刷），之前不看好的功能现在居然成了主力，如果这个功能不上的话，也许数据中心真就直接倒闭了。但是由于查询量太大，app反刷也有些扛不住了，不得已走缓存了，所以数据准确性还真的有待提升。但是这只是个临时的策略，代理ip还是必须得上，否则数据的准确度绝对达不到的。</p>
<p>我把代理的逻辑仔细排查了一下（都看了860遍了，谁写破B玩应），发现了代理ip耗时最多的地方就是价格抓取和经停站的抓取，一次简单的查询，到了后面异步抓取了N多数据，所以代理ip消耗很大，所以有了我之前写的小智能爬虫。</p>
<p>这个爬虫很简单，就是不停的分析页面，抓取有效的信息，不能抓取的过快，否则也有会被封的危险。我在本机上跑的时候很短时间轻松抓取3~5w的代理ip，量很大，但是都需要check，check是最费时的，这么多抓来的ip靠线程池check真是太慢了，我在本机上起了2000+线程直接报错不能在创建线程了，虽然check的慢，但是还是有很多可以用的，中午有一阵居然可以获取2000+的有效代理ip，平时的话也就500左右。</p>
<p>我当初想在本地跑程序，将check后的代理ip放给线上，后来发现本地check太慢，而且不够灵活，我需要随时能够抓取发往线上，线上消耗这个代理ip的速度太惊人了，几乎放上去瞬间就被用光了，所以我还是决定将这个spider集成到dtg里面，作为一个独立的模块，添加定时任务，跑的时候，将没有check的ip用redis队列push进去，由于线上有很多实例，所以我在每个实例上进行监听这个队列，有数据在pop出来，pop500到本地，然后不够500在pop，本地就check数据，这样通过集群的话，check代理ip效率会更高，否则抓取的这么多的代理ip check不完就浪费了。check的时候用线程池，这个都会想到，但是check这个代理ip可能会花费很长时间，什么意思呢？就是线程池会满，如果到了下次触发抓取的时候，继续check这么下去，线程池不崩溃才怪呢。所以我尝试了好多方法，终于找到了一种每次触发都重新创建线程池，之前没处理的线程池直接shutdown掉，给后来的让位置，加上使用单例模式跑起来几乎没有什么问题。我在本地测试，启动在190个线程左右，开始check的时候线程飙到400左右，shutdown后落回200左右，然后定时再触发，再次回到400，这样往复，没错虽然可能会消耗很多资源，但是总起评价来还是值得的。</p>
<p>今天算是把代理集成起来，争取下周上线，后面再把统计抓取免费代理ip数量，check后的数量，真正使用的数量每隔半个小时统计出来，发到我的邮箱。这样可以给黄甲看看当初他看不起的免费代理ip到底支起了多大的天空。</p>
<p>困了，不早了，就到这里。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;6.18，年中了，自己马上就要在途牛干了将近1年了，回头望来感慨万千。哎，华奥司机是不是走的有点早啊，再呆上3个月，可能比你之前呆的那一年经历的坑还多呢。&lt;/p&gt;
&lt;p&gt;已经是深夜，今天还是父亲节，今天早上起来得给父亲打个电话，谁让我是个大孝子呢，哎没办法。没事写写博客回忆
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.tk/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.tk/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>12306app抓包</title>
    <link href="http://dingran.tk/2017/06/11/12306app%E6%8A%93%E5%8C%85/"/>
    <id>http://dingran.tk/2017/06/11/12306app抓包/</id>
    <published>2017-06-11T05:24:33.000Z</published>
    <updated>2017-06-11T05:32:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直有个想法就是想抓取app上面的访问方式，昨天在网上搜索后发现app可以通过fiddler来抓包，可惜的是fiddler在mac上面不是很友好，今天来到公司，用自己的工作电脑搭建了一个fiddler，网上教程一大把，随便找了一个，按照教程配置好后，将自己的手机连上局域网，打开手机app 就可以抓包了，很简单。</p>
<p>我主要是抓取12306app的余位查询，经过抓包后，我发现参数基本没有什么变化，但是多了几个，比如checkcode等，返回的信息是加密后的乱码，我的心这个凉呀，没办法了，因为我解密不了，还是要请教其他人了，看看能否解密。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直有个想法就是想抓取app上面的访问方式，昨天在网上搜索后发现app可以通过fiddler来抓包，可惜的是fiddler在mac上面不是很友好，今天来到公司，用自己的工作电脑搭建了一个fiddler，网上教程一大把，随便找了一个，按照教程配置好后，将自己的手机连上局域网，
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.tk/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.tk/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>Rx_java</title>
    <link href="http://dingran.tk/2017/06/03/Rx-java/"/>
    <id>http://dingran.tk/2017/06/03/Rx-java/</id>
    <published>2017-06-03T02:29:22.000Z</published>
    <updated>2017-06-03T08:05:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rxJava是什么"><a href="#rxJava是什么" class="headerlink" title="rxJava是什么"></a>rxJava是什么</h1><blockquote>
<p>a library for composing asynchronous and event-based programs using observable sequences for the Java VM</p>
</blockquote>
<p>一个对于构成使用的Java虚拟机观察序列异步和基于事件的程序库</p>
<p>github：<a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">https://github.com/ReactiveX/RxJava</a></p>
<p>详细信息可以参考：</p>
<p><a href="http://www.oschina.net/p/rxjava" target="_blank" rel="external">http://www.oschina.net/p/rxjava</a></p>
<p><a href="http://www.jianshu.com/p/845549ac4623" target="_blank" rel="external">http://www.jianshu.com/p/845549ac4623</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;rxJava是什么&quot;&gt;&lt;a href=&quot;#rxJava是什么&quot; class=&quot;headerlink&quot; title=&quot;rxJava是什么&quot;&gt;&lt;/a&gt;rxJava是什么&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;a library for composing async
    
    </summary>
    
      <category term="java" scheme="http://dingran.tk/categories/java/"/>
    
    
      <category term="java" scheme="http://dingran.tk/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>APP反刷余位信息上线</title>
    <link href="http://dingran.tk/2017/06/02/APP%E5%8F%8D%E5%88%B7%E7%81%AB%E8%BD%A6%E7%A5%A8%E4%BD%99%E4%BD%8D%E4%BF%A1%E6%81%AF%E4%B8%8A%E7%BA%BF/"/>
    <id>http://dingran.tk/2017/06/02/APP反刷火车票余位信息上线/</id>
    <published>2017-06-02T07:33:58.000Z</published>
    <updated>2017-06-02T08:31:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>说起app反刷的功能，在火车票数据中心有两个：</p>
<p>第一个是在查询的火车票列表的时候进行反刷12306的余位信息给我们，由于我们的代理ip是有限的，不是每个请求都能分配到代理ip，故而这种情况再返回缓存的时候如果缓存过期就让app去12306获取余位信息，将最新余位信息刷给我们，我们组装信息再返回给前端。最终效果不是很好，会出现卡顿的效果暂时关闭状态。</p>
<p>还有一个app反刷，也是用来处理余位更新的。也是为了节省代理ip，原理就是在手机端开启个线程，每隔一段时间去数据中心访问是否有数据需要抓取。而数据中心这边在代理ip不足的情况下，便需要将抓取的url放进队列里面，手机端的请求每次都从队列里面取数据，这样如果手机端取到数据就直接去访问12306，然后再将获取的结果发送给数据中心，整个流程下来需要在5秒以内完成。</p>
<p>整个反刷功能已经开发好一段时间了，由于现在请求量也不是很大，所以这个功能一直没有开启。最近6.1号开始卖学生票了，由于成人票和学生票是两个接口，代理ip在抓取学生票的时候出现大量被封的现象，被封率达到99%；由于成人票和学生票的代理ip使用逻辑是一套的，这样不仅影响学生票售卖，还影响成人票的售卖。由于学生票接口开始被封，最近又开始卖学生票，没办法只能先将学生票的接口走成人票接口。</p>
<p>走成人票接口只是权宜之计，首先我想先买一批代理ip，从中测试学生票接口能够用的拿出来，其他的给成人票使用，但是询问后得知代理不能够先测试使用，如果买了50个代理ip能够使用的只有40个话，那就亏大了。我爬取ip的小爬虫也写好了但是抓取了3W+的ip能够使用的也就400~500个，关键是不够稳定，放到测试环境还是可以的，放到线上根本不行，于是我想起了app反刷。</p>
<p>稍微修改一下代码，将学生票全部切到app反刷，上线后，我测试了一下，效果不是很好，经常出现查询为空的现象而且再次加载还是为空。经过排查，是我在放入队列的时候做了限制，一个站战对团期只能放入一次，是我想的太多了，因为不是每个放入的数据都能返回来的，去掉这个限制，再次在sit环境测试，效果还不是很好，和前端一起排查，经过推敲分析，发现放入队列的数据，前端查询12306的时候也会出现返回为空的现象。后来前端提醒我可以多放入队列两次，我瞬间豁然开朗，怎么没想到呢？因为线上不是每个人的手机都网速畅通的，有可能像花生地铁这种比较low的，我多放入两次就可以有几率被网速相对好一点的取走，快速返回结果，就会更快返回火车票列表数据。</p>
<p>再次修改代码，将放入队列次数配置在diamond，先配置3次，重新打包。在前端和测试的共同验证下，放进3个，取走3个，查询成功的只有1一个返回，我这边的列表也显示正常，这就看出来不是每次请求都成功，失败率还是挺高的。今天有紧急上线，于是我搭上这趟快车，将代码上线。上线完成后我将配置改为4次，加大查询效率。在app端查询学生票，显示效果还不错，也会出现查询不出来的情况，但是再刷一次就出来了，还可以接受。</p>
<p>app反刷这个功能能够实现，前提是必须有大量的请求才能实现，我监控了一段时间发现这段时间请求量大平稳可以使用，也可算是个小小的里程碑。学生票使用这个功能算是告一段落，后面还要接入成人票。</p>
<p>回头再看这个学生票的解决，内心坎坷呀，由于产品催的紧还和产品小吵了一下，说到底还是自己太浮躁，脾气咋这么大腻？也是自己要好好反思的地方。还好产品心胸开阔，不和我见识，还请我喝奶茶（应该是我请人家啦），实在让我无地自容。这次也算是给自己积累了一些经验，能够在后面乃至将来的工作中应对各种问题更加自如。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说起app反刷的功能，在火车票数据中心有两个：&lt;/p&gt;
&lt;p&gt;第一个是在查询的火车票列表的时候进行反刷12306的余位信息给我们，由于我们的代理ip是有限的，不是每个请求都能分配到代理ip，故而这种情况再返回缓存的时候如果缓存过期就让app去12306获取余位信息，将最新余
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.tk/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.tk/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>工作总结</title>
    <link href="http://dingran.tk/2017/05/24/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    <id>http://dingran.tk/2017/05/24/工作总结/</id>
    <published>2017-05-24T03:27:30.000Z</published>
    <updated>2017-05-24T04:59:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>从过年到现在过去了三个月，这段时间可能是我入职途牛以来干的事情最有成果，也是自己最有收获的几个月。这几月熟悉的老司机一个一个离开，自己的身上的单子也越来越重，12306也不省心，三天两头的变动接口，最近还更换了接口的返回数据结构。</p>
<p>这段时间里面，主要是负责数据中心的DTC系统的改造，原来负责的牛抢票业务跟着迭代走就可以了，抢票也几乎没什么需求，但是dtc的问题太多了，急需整改，经过了三个月的整改，主要以下的成果：</p>
<ul>
<li><p>DTC的接口响应时间由原来的3秒左右提高到1.5秒以内，大部分车辆几百毫秒，向上海到南京有260+的车辆，响应时间也在1秒左右。</p>
</li>
<li><p>DTC价格问题抓取不准确，经过整改，价格每天抓取一次，价格带有新鲜度，超过新鲜度会再次出发抓取，每天的价格必须要有。</p>
</li>
<li><p>缓存插入失败问题，这个是我意外查到的每天大概有上千次插入缓存失败，经过排查是获取不到连接池，并且jar包太古老。升级完jar包后，适量增大redis连接池，现在已经没有插入缓存失败的问题。</p>
</li>
<li><p>JVM堆区不正常的偏大GC频繁。我经常用jvisualvm监控线上jvm情况，发现jvm堆有点大，快要溢出了，打了dump后，用eclipse的分析工具发现，在某个代码里面有个全局queue，不断往里面放数据，消费者却很慢，造成数据成倍增加。改造完成后，queue里面的数据几乎很快被消费掉，再次监控jvm堆得数据也恢复了正常水平。</p>
</li>
<li><p>DTC增加抢票专用接口 其实这个接口就是只查询余位信息，不查价格的接口。余位监控只关注是否有余位。这样可以节省很多代理ip的消耗问题。这个接口并发量比较大，一天的查询量平时大概几百万，春运期间大概有上千万的查询量。</p>
</li>
<li><p>线程池的使用问题。平时对配置线程池的参数没有什么概念，但是现在发现配置线程池参数很重要。经过合理配置，系统的线程由原来启动1000+降到现在500左右，没有出现问题。</p>
</li>
</ul>
<p>这段时间有的时候很是折磨，但是看到现在系统平稳运行，心理还是十分高兴地。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从过年到现在过去了三个月，这段时间可能是我入职途牛以来干的事情最有成果，也是自己最有收获的几个月。这几月熟悉的老司机一个一个离开，自己的身上的单子也越来越重，12306也不省心，三天两头的变动接口，最近还更换了接口的返回数据结构。&lt;/p&gt;
&lt;p&gt;这段时间里面，主要是负责数据
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.tk/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.tk/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>搭建代理ip仓库想法</title>
    <link href="http://dingran.tk/2017/05/20/%E6%90%AD%E5%BB%BA%E4%BB%A3%E7%90%86ip%E4%BB%93%E5%BA%93%E6%83%B3%E6%B3%95/"/>
    <id>http://dingran.tk/2017/05/20/搭建代理ip仓库想法/</id>
    <published>2017-05-20T02:42:01.000Z</published>
    <updated>2017-05-20T03:31:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>5.20号周六，今天来到公司来加班，公司的环境比较好，既可以学习，又可以做剩下的工作，还可以拿加班费^_^</p>
<p>刚才打了那么多字，可恶的ultraEdit退出了，还没保存！！</p>
<p>途牛火车票的盈利点很简单，至少我是这么认为的，就是在乘客购买火车票的时候能够购买保险，但是总起计算下来客户购买保险所占的比例还是不高的。但是火车票部门每个月的花费还是多的，这里面有一项就是代理ip的费用。</p>
<p>由于12306会不定时对过于频繁访问的用户进行限制，但是超过一定的限制，这种访问的限制有可能是长期的，所以我们在抓取12306信息的时候都会使用代理ip，模拟多客户端多用户访问12306，让12306不能够轻易的屏蔽我们，我们这边控制好代理ip的使用频率，平时应该没有什么问题，但是常在河边走，哪能不湿鞋，碰到流量大的时候，也会有几个代理ip被屏蔽的现象。</p>
<p>代理ip的费用还是蛮贵的，有阿里云、京东等供应商，价格也都在几十块一个月不等。途牛火车票在平时购买车票不多的情况下，也需要几百个代理ip，遇到春运的时候购买上千个也不在话下。所以代理ip的费用占途牛火车票每个月的预算的大部分了。如果代理ip十分好用也就不说了，但是不是每个代理ip都是十分高效抓取数据，这让我十分头疼，比如昨天的学生票接口使用代理ip就死活访问不了，几乎全军覆没，而成人票接口就没有问题。可能说和代理ip没有关系，但是在本地就是可以的，或者我换用其他新鲜的代理ip就是可以的。</p>
<p>由于以上的原因，我萌生了一个想法，搭建代理ip的仓库。网上有很多的免费的代理ip，没错有很多代理ip是不能用的，但是数量多呀，有一万个，1%能用也是不错的，我准备分为两步走：</p>
<p>第一步：先固定抓取一部分页面，获取代理ip，先测试成功率能够有多少</p>
<p>第二步：直接使用搜索引擎（百度和谷歌）然后利用搜索引擎返回的url再次进行爬取，获取页面里面的代理ip，说到底就是做个智能爬虫，能够解析页面抓取ip</p>
<p>美好的想法肯定有对应的目标：</p>
<ul>
<li><p>满足自己数据中心抓取12306代理ip的使用</p>
</li>
<li><p>满足自己后，就可以给公司其他使用代理ip部门提供代理ip，比如机票等</p>
</li>
<li><p>公司满足后，就可以向外出售动态代理ip（太长远了）</p>
</li>
</ul>
<p>想法是付诸于实现的基石，我很高兴自己有这种想法，而不是浑浑噩噩的做着开发，因为我不是一个满足现状的人，我渴望有fresh的idea来充实自己，让自己的脑细胞尽量更多使用起来，而不是在那等死，即使那会让我很困。（学习新知识会让人疲倦厌恶摒弃）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;5.20号周六，今天来到公司来加班，公司的环境比较好，既可以学习，又可以做剩下的工作，还可以拿加班费^_^&lt;/p&gt;
&lt;p&gt;刚才打了那么多字，可恶的ultraEdit退出了，还没保存！！&lt;/p&gt;
&lt;p&gt;途牛火车票的盈利点很简单，至少我是这么认为的，就是在乘客购买火车票的时候能
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.tk/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.tk/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>抢票接口并发问题记录二</title>
    <link href="http://dingran.tk/2017/05/18/%E6%8A%A2%E7%A5%A8%E6%8E%A5%E5%8F%A3%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E4%BA%8C/"/>
    <id>http://dingran.tk/2017/05/18/抢票接口并发问题记录二/</id>
    <published>2017-05-18T06:55:43.000Z</published>
    <updated>2017-05-18T07:26:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>5.17号早上大概10点，尝试调用抢票的接口，已经直接返回false，无法查询准确的数据，今天把昨天的日志拽下来（昨天的日志会自动copy到一个ftp目录下面），使用linux命令解压日志文件，我预估计可能是线程池满了，直接溢出了，但是正常情况下，应该不会出现这种问题，况且我使用2个线程池，在切换线程池的时候，我还打印了一部分日志—打印线程池的一些参数.经过排查日志，发现在早上6点的时候，第一个线程池已经满了，所有的请求已经递交到第二个线程池了，到了9点左右，第二个线程池也满了，所有后续的请求就直接放不进线程池，就直接丢弃报异常。下面try catch捕捉异常直接反馈前端查询失败。</p>
<p>解决办法：刚开始打算是准备给线程配置超时时间，如果线程超过了配置时间就强制停掉，但是后来想线程不是想停就停的，也就说线程启动了不是很听话的。又想增大线程池，但是上网看到一句话，让我豁然开朗，“没有找到线程阻塞的原因，就是放再大的线程池，线程池迟早会满”，就是时间的问题。看来还是自己的代码写的有问题。不找到根本问题，接口无法在高并发下提供服务。</p>
<p>但是回头来想，所有相关接口的地方，我都已经做好控制了，不会出现线程阻塞的情况呀，一行一行看代码，结合日志我终于发现了一个异常点：由于代理ip的问题，可能会出现connect refuse的情况，在初始化httpclient的时候，我使用闭锁，并且使用回调onsuccess后释放闭锁，但是onfail的时候，也就是有异常的时候，我没有释放闭锁，这里漏了一个闭锁的countdown，并且没有给闭锁设置超时时间，至此，所有出现这个异常的请求到这里，清一色全部阻塞住，由于不是所有的请求都出现这个异常，所以过了好长时间才造成的接口不能接受请求，并且线程池满了。</p>
<p>更改代码，特意使用connect refuse的ip进行测试，后面就很快的释放线程了，并且线程池的第二个都没有使用过。:</p>
<p>看来细微决定成败，一个小小的问题机会导致整个应用的效率的快慢。自己平时要多关注这种问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;5.17号早上大概10点，尝试调用抢票的接口，已经直接返回false，无法查询准确的数据，今天把昨天的日志拽下来（昨天的日志会自动copy到一个ftp目录下面），使用linux命令解压日志文件，我预估计可能是线程池满了，直接溢出了，但是正常情况下，应该不会出现这种问题，况且
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.tk/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.tk/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>抢票接口开发问题记录一</title>
    <link href="http://dingran.tk/2017/05/17/%E6%8A%A2%E7%A5%A8%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B8%80/"/>
    <id>http://dingran.tk/2017/05/17/抢票接口开发问题记录一/</id>
    <published>2017-05-17T10:49:04.000Z</published>
    <updated>2017-05-17T11:18:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>5.16号，是途牛的会员日，搭上前端组的紧急上线“快车”，准备发布一次，由于之前的车次缺失，导致有一些客户投诉反馈，正好这次修上去；还有一部分是价格问题，价格添加最后更新时间，如果超过规定时间就再次抓取价格，由于12306的价格也不是一成不变的，遇到特殊的情况还是需要手动处理一下；还有的就是对抢票接口的修改。</p>
<p>抢票接口是我已经更改了好几遍了，上线了好几次，但是每次都是运行一段时间就反馈没有数据了，让我丈二摸不着头脑，这次上线，我对线程池进行了一些改动，并且打印了一些关键日志，能够让我掌握一些重要的参数，5.17号也就是今天，我把昨天的日志拉下来，打开后，排查15点之后的日志，发现了一条记录“插入缓存异常”，我在本地稍微压测了一下发现也报这个异常，于是查看系统的redis连接池，由于使用的事jedis2.1.0还是比较古老的接口了，应用spring-data-redis的jar包进行托管。封装了好多逻辑，我将redis的连接至增大了一倍，但是问题还是没有解决，于是上网搜索一番，更换jedis的redis客户端管理工具，简单方便。首先将jar包升级，然后底层封装改为jedis，原来配置一堆的代码，现在只要几行就搞定了，简单清爽。运行修改了几次后，就可以正常跑起来了。再次调节redis的连接池的大小，这次居然没有任何问题，关键是jedis在每次获取jedis对象，用完后都可以直接finally里面close掉，而spring-data-redis运行多个就会出现获取不到pool的尴尬局面，这是今天的任务一。</p>
<p>在controller接收到其他系统请求后，我采用线程异步处理，主线程使用countdown闭锁等待一定时间，在异步线程采用线程池，我放了两个，判断线程池的启动数目，如果启动数目大于等于总的数目就用第二个线程池，这里面虽然没有和数据库等其他io交互，但是这里有爬取12306，处理结果，拼装结果，也算不上是cpu密集型，可以算是io密集型。之前配置的是cpu密集型，所以在今天拉下来的日志里面，我看到了线程池启动的数目已经到达极限了，今天将线程池的参数重新配置一下，我在本地重新压测，每秒20次查询，发现没有问题，都可以正常运行。</p>
<p>由于线上的环境风云变幻，所以还需要做很多操作。并发接口开发起来就像是在大海航行一样，平时风平浪静，但是一旦请求接踵而至的时候，就会波浪滔天，顷刻就有翻船的事故。所以我这次还是让测试准备进行压测一下，平时对这个接口感觉没有任何困难，但是现在看来，不光是代码的问题，比如redis的连接池、线程池的参数配置以及JVM的相关参数优化都是需要再三考虑的。</p>
<p>互联网公司就是这样，碰到的问题很多，想起了那句话，在互联网公司待一年相当于在其他公司待3年，不光是问题多，成长也很多，收获也很多。</p>
<p>等待下次上线，这次做好相关测试。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;5.16号，是途牛的会员日，搭上前端组的紧急上线“快车”，准备发布一次，由于之前的车次缺失，导致有一些客户投诉反馈，正好这次修上去；还有一部分是价格问题，价格添加最后更新时间，如果超过规定时间就再次抓取价格，由于12306的价格也不是一成不变的，遇到特殊的情况还是需要手动处
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.tk/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.tk/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>车次缺失问题排查</title>
    <link href="http://dingran.tk/2017/05/16/%E8%BD%A6%E6%AC%A1%E7%BC%BA%E5%A4%B1%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    <id>http://dingran.tk/2017/05/16/车次缺失问题排查/</id>
    <published>2017-05-16T02:54:04.000Z</published>
    <updated>2017-05-16T10:35:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>5.10上线一版之后，在5.19号听到客户有反馈有些车次没有和12306进行同步，我很好奇，是数据没有抓下来么？还是12306接口返回结果又有什么变化么？</p>
<p>我在本地以及测试环境上查询相关车次均能够正常显示，首先排除了12306返回的结果问题，应该是自己的代码哪里没有处理好，造成车次丢失，可是没有办法正确定位问题。</p>
<p>5.15号团建回来第一天上班，出现了好几单这个问题，有一个Z29的车次映入眼帘，由于只能使用ELK查看日志，不是很方便还有延迟，但是怀着试试的心态，我调用这个接口，赶快查看日志，输入关键字Z29调节时间到最近，搜索，哇塞，出现了，报了一个匹配车次的异常。ok，有异常出现，那么下面就是排查问题了，后面跟着nullpointer，可惜堆栈没有打出来，不过参数打印出来了，根据打印日志找到相关的代码，排查一下，最后定位到是反刷结果的时候出现的问题，在用户成功下单后，会把真的下单结果反刷给dtc，由于算下铺的时候需要用到硬座，但是Z29这种车是没有硬座的，于是出现空指针异常，判断没有判断到位，造成有相关车次的丢失。</p>
<p>于是修改代码，将线上的反刷缓存放到测试redis里面，在用我们自己的程序跑一下，果然报错了，并且丢失了那个车次，于是根据问题，修改代码，修复了这个问题。</p>
<p>最近再彻底重构DTC数据中心的代码，有的地方重构出现没有考虑完整的情况，造成此类问题的发生，希望以后引起注意，勿再发生。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;5.10上线一版之后，在5.19号听到客户有反馈有些车次没有和12306进行同步，我很好奇，是数据没有抓下来么？还是12306接口返回结果又有什么变化么？&lt;/p&gt;
&lt;p&gt;我在本地以及测试环境上查询相关车次均能够正常显示，首先排除了12306返回的结果问题，应该是自己的代码哪
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.tk/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.tk/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
</feed>
