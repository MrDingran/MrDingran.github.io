<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>崎岖的路,走出自己的脚步</title>
  <subtitle>崎岖的路,走出自己的脚步</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dingran.top/"/>
  <updated>2019-04-25T06:13:53.879Z</updated>
  <id>http://dingran.top/</id>
  
  <author>
    <name>D.R</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>祝福途牛</title>
    <link href="http://dingran.top/2019/04/25/%E7%A5%9D%E7%A6%8F%E9%80%94%E7%89%9B/"/>
    <id>http://dingran.top/2019/04/25/祝福途牛/</id>
    <published>2019-04-25T05:41:30.000Z</published>
    <updated>2019-04-25T06:13:53.879Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一切都来得那么突然"><a href="#一切都来得那么突然" class="headerlink" title="一切都来得那么突然"></a>一切都来得那么突然</h1><p>2019年2月份春节从东北老家回到了上海，火车票余位查询运行良好，没有什么大问题，牛抢票也在平稳的进行，没有出现报警，由于节前系统资源配置充分，一切在可控之中。</p>
<p>2月中旬，甲哥分配任务要搭建一套自己的出票供应商系统，其实数据中心是有出票系统的，但是由于代码难以维护，看了一上午的代码也没摸出思路，于是决定在此基础上重新开发一套新的占位系统。</p>
<p>于是经过与甲哥讨论，获取甲哥同意后，开始申请svn代码权限，搭建框架，环境配置后，按照途牛对供应商的文档开始一个一个开始开发。查看tds代码是件头疼的事情，没办法一边看着老系统的代码思路，一变用charles抓取12306的接口进行比对，之前和运营康彦总都进行过沟通要在4月底进行上线。我把所有的节点里程碑都记录在wiki上，每天跟新进度，一切进行的很顺利，测试也测试的很快，一切都是相辅相成。</p>
<p>4月22日，通过各种小道消息就听说途牛要有caiyuan的动作，由于自己负责核心系统，一直也没有在意，后来传要把上海的的研发全部拿掉，心里有点慌慌的。</p>
<p>4月24日，该来的始终会来的，刚来公司就见到vp以及小棉袄忙个不停，知道有大事要发生，果然屁股没坐热，就开始谈话了，要把上海的研发迁到南京去，起始之前心里虽然知道消息，但是突然来了这么一下，心里还是有点不舒服。</p>
<p>由于各种原因实在无法前往南京，我回绝了，但是甲哥让我在考虑一下。</p>
<p>下午每个人的谈话依然在进行，上午已经处理了大半部分，下午华哥找我谈了一次，提出了很多条件，甚至让我自己提条件，说实话，我真的非常领导对我的认可，感谢他们一次又一次的找我聊，但是我还是由于诸多原因给回掉了，我不是一个人，后面还有家庭，去到一个陌生的环境还要从头开始。</p>
<p>下午15点多，该走的都走了，剩下几个需要出去吃饭的，大家有的在聊天，有的在自嘲，有的在讨论如何找工作。每个人的心里都是五味杂陈，谁都不想到有这么一天，但是这也是没办法的。</p>
<p>我看到华哥在来回走，一会去这边走走，一会去那边看看，我知道华哥心里也不好受，自己这么多年辛辛苦苦组建的团队一天就被干掉了，心里肯定七上八下，其实这一周看到华哥在工位上都是拄着脑袋面露难色。</p>
<p>更悲剧的应该是甲哥了，作为总监看到和自己打拼这么多年的同事一下子没了，到南京又要开始新的管理，心里肯定是MMP的。</p>
<p>生活不易，但是相信所有的一切只为更好，希望华哥和甲哥事业能更进一步。</p>
<p>2016年8月份，我进入途牛，刚进来只是负责牛抢票，随后由于人员变动，我负责了火车票查询、资源、占位、出票等系统，几乎接触了火车票数据中心所有的系统，这不到三年的途牛时间，我学习到了很多，高并发，大流量、缓存、数据库、docker云服务器等都进步了很多，更重要的是我认识了很多优秀的人，大家一起相互学习，自己在问题解决方便得到了极大的提升。</p>
<p>很高兴在途牛获得了赤兔奖，这个奖杯是我从入职以来获得的第一个奖杯，很漂亮，铜的很沉，我非常喜欢，还和CTO大王合影，这张照片我特意的保留了下来。</p>
<p>感谢途牛这段期间培养我，让我在技术上、性格上各方面都得到了极大的提升，非常感谢，祝途牛越来越好，祝地面交通越来越好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一切都来得那么突然&quot;&gt;&lt;a href=&quot;#一切都来得那么突然&quot; class=&quot;headerlink&quot; title=&quot;一切都来得那么突然&quot;&gt;&lt;/a&gt;一切都来得那么突然&lt;/h1&gt;&lt;p&gt;2019年2月份春节从东北老家回到了上海，火车票余位查询运行良好，没有什么大问题，牛
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.top/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>年后总结</title>
    <link href="http://dingran.top/2019/03/06/%E5%B9%B4%E5%90%8E%E6%80%BB%E7%BB%93/"/>
    <id>http://dingran.top/2019/03/06/年后总结/</id>
    <published>2019-03-06T08:23:53.000Z</published>
    <updated>2019-03-06T08:53:30.252Z</updated>
    
    <content type="html"><![CDATA[<p>差点就淡忘了这个博客，可能是年前准备应对春运力不从心了吧，嗯这是一个很好的借口。</p>
<p>今天的春运算是给自己涨了很多的“姿势”，订单数量是前几年的十几倍，流量也窜上去了，以前对带宽都是模糊的概念，今天算是对带宽有了较深的理解，后面对系统的并发量以及带宽底层方面资源都会考虑进去。</p>
<p>总体来说今天应对的还算可以，比前2年强多了，虽然还是存在很多不足，应对这么大的流量也算是一件不小的事情。年前根据以往的经验估算了一下订单量以及代理ip的数量，但运营的新业务介入带来大量的订单涌入，使系统的压力陡增几十倍，之前不怎么关注的流量也找上门来，公司的四分之三的流量已经被抢票占满，已经影响机票等相关业务，没办法只好降低频率，大量的订单产生了几十亿甚至百亿的查询，对于现有的实例数根本就是杯水车薪，向运维寻求思源，答复没有资源了，我大概算了一下，如果能够匹配现有的资源的实例数，相当于现有途牛所有实例数的总和，这是十分巨大的字，如果要实现起来也是十分艰难的，资源预算就是一个十分头疼的问题。</p>
<p>为了保证系统的稳定，只能先对大批流量进行限流操作，但是系统还是产生了大量的read_time_out，无法准确获取数据返回。这种问题目前解决十分简单，前一段时间看了go语言，天生支持高并发的，此时打算使用go去写一个系统，同时得到了运维的全力支持。随后出票系统上升到了极高的程度，领导指派去对火车票出票系统进行升级改造，这个系统是个十分复杂的系统，代码结构混乱，没头没尾，代码一大片一大片，无法理解，没办法只好申请新系统进行完全改造，这也是在短时间内完成最快的办法。现有出票系统有大量系统问题，新系统就是要解决这些问题，提升出票的成功率。</p>
<p>这段时间投入新系统的改造过得十分充实，不停地码代码设计代码，感觉这个工作进行的很顺利，工作才开始进行，运营已经把相关的期望指标定好，瞬间感觉压力巨大。</p>
<p>这两天小乔分享个链接<a href="https://www.zhihu.com/question/43377108/answer/574887910" target="_blank" rel="external">https://www.zhihu.com/question/43377108/answer/574887910</a>/，深受刺激，感觉自己平时实在是太浪费时间了，在奋斗的时候就应该全力奋斗，不应该把懒惰安逸当成了主旋律。</p>
<p>平时制定好相关的计划，努力达成，充实的度过现有的生活每一天。</p>
<p>还有老婆爱你。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;差点就淡忘了这个博客，可能是年前准备应对春运力不从心了吧，嗯这是一个很好的借口。&lt;/p&gt;
&lt;p&gt;今天的春运算是给自己涨了很多的“姿势”，订单数量是前几年的十几倍，流量也窜上去了，以前对带宽都是模糊的概念，今天算是对带宽有了较深的理解，后面对系统的并发量以及带宽底层方面资源都
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.top/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>2018年11月工作总结</title>
    <link href="http://dingran.top/2018/11/30/2018%E5%B9%B411%E6%9C%88%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    <id>http://dingran.top/2018/11/30/2018年11月工作总结/</id>
    <published>2018-11-30T09:36:32.000Z</published>
    <updated>2018-11-30T10:00:15.852Z</updated>
    
    <content type="html"><![CDATA[<p>距离上次写博客已经是很长时间了，可能是最近太闲了，基本是在维稳的状态。</p>
<p>本月第一天，上了半天班直接去南京，感谢领导的厚爱，获得了人生工作中第一个奖“赤兔奖”,为了背诵感言稿子，我花费了大概一个星期，不得不感叹自己的记忆能力有点倒退啊。没有吃饭的时间，颁奖完毕直接坐地铁到火车站搭乘倒数第二班高铁返回上海，捧着沉甸甸的奖杯，心里还是十分高兴的，来到途牛两年多了，火车票数据中心现在已经基本稳定，这是领导对我工作的认可，对我来说更是一份荣誉。别说，这个奖杯还挺沉的，嗯，还是铜的，锃亮！</p>
<p>由于现在部门只要集中力量在做目的地用车，所以火车票这边的需求基本都停滞了，除了一些小迭代，基本当天就可以打发掉了。本月度假打包开始做项目需求，中间有库存票的相关问题需要我配合调试，大部分都是入参错误，经过沟通也基本搞定。</p>
<p>还是就是系统存在的一些小问题：</p>
<p>火车票资源的日志打印了一堆垃圾日志，影响正常观看系统问题，我撤掉了一些打印返回值等大量日志，还有一些系统判断出现空指针等问题也进行了大量的修复工作。再看资源系统的日志清晰，这样出现问题可以很清楚的排查问题。</p>
<p>DTC爬取系统又出现了跨年的问题，经过简单的排查是自己在使用canendar的api遇到了问题，这个calendar.date这是用来判断某一天在这一年重是第几天，如果用来判断两个日期之间有多少天，那就崩溃了啊【捂脸哭】。</p>
<p>牛抢票系统还是存在数据库连接池timeout的情况，由于牛抢票现在的数据来源还是db，虽然在db上层增加了缓存进行过滤，但是当缓存过期拉取db数据的时候，量还是蛮大的，造成数据库连接池溢出，经过排查，发现是获取订单的sql并发量大，瞬间上百个sql进行查询导致db一下子无法反映过来造成连接池到达上限，经过explain sql后，虽然每个字段都用了索引进行过滤，但是总量还是很大，于是改用主键进行查询，查询速度提升了一倍，并且mysql的响应速度也提升了一倍，这也警示了我，虽然字段使用了索引，性能的提升也是有限的，尽量使用更少的字段进行数据过滤，当explain的sql的type到达const的时候性能基本是不错的了。</p>
<p>搜索系统在偶然的排查过程中，发现动卧席位居然没有返回上铺价格，测试也没有发现，自己只能默默的加上，再让测试进行回归测试。</p>
<p>本月进行了两个迭代，一个是列车停运的进行通知。当数据中心爬去数据的过程中发现某个车次停运了，即刻通过tubing消息队列发送到出发到达日期车次信息到订单，订单根据发送的信息排查是否又预定该车次的订单，对客人进行有效通知，可以减少客诉，防止影响客人的出行。</p>
<p>还有一个迭代是对占位的参数的传递，当爬去占位参数后直接发送到出票系统，出票系统可以不用再爬去占位参数，直接根据传来的参数直接发起占位，这样的占位效率至少能提升一倍。</p>
<p>本月工作基本如上，事情不多但是很杂乱。12月份即将到来，即将迎接元旦、春运，后面的事情会越来越多，这就是暴风雨之前的平静吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;距离上次写博客已经是很长时间了，可能是最近太闲了，基本是在维稳的状态。&lt;/p&gt;
&lt;p&gt;本月第一天，上了半天班直接去南京，感谢领导的厚爱，获得了人生工作中第一个奖“赤兔奖”,为了背诵感言稿子，我花费了大概一个星期，不得不感叹自己的记忆能力有点倒退啊。没有吃饭的时间，颁奖完毕直
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.top/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>火车票查询优化之车站数据优化</title>
    <link href="http://dingran.top/2018/09/11/%E7%81%AB%E8%BD%A6%E7%A5%A8%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E4%B9%8B%E8%BD%A6%E7%AB%99%E6%95%B0%E6%8D%AE%E4%BC%98%E5%8C%96/"/>
    <id>http://dingran.top/2018/09/11/火车票查询优化之车站数据优化/</id>
    <published>2018-09-11T01:47:01.000Z</published>
    <updated>2018-09-11T02:05:17.834Z</updated>
    
    <content type="html"><![CDATA[<p>8月末忙完了人生的一件大事，绕了一大圈终于回到了上海，大事间公司各种问题不断倒也是应付从容不迫。</p>
<p>刚回到工作的岗位上，就将回家这段期间的各种问题抓紧修复掉，经过一次紧急上线大多数问题都得到了修复，由于最近上线了很多版本，代码改过来改过去，所以需要进行一次代码整理，所以这一周主要是对已上线的冗余代码进行整理。</p>
<p>最近在抢10.1期间的火车票，火车票订单比平常增加了很多，抢票查询量大幅增加，如此算过来我们的代理ip数量和查询量相比杯水车薪，所以需要进行查询的归拢，缓存等访问的统一。</p>
<p>搜北京or北京西or北京南到上海的车次列表都是一样的，但是如果用这三个查询到上海将爬取三次，浪费三个代理ip而其实只需要使用一个代理ip就可以查询搞定了。</p>
<p>由于缓存使用的三字码，所以需要对缓存进行重新统一处理，这样可以重复使用，需要在对车站判断的时候进行额外处理。先做设计，再动手。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;8月末忙完了人生的一件大事，绕了一大圈终于回到了上海，大事间公司各种问题不断倒也是应付从容不迫。&lt;/p&gt;
&lt;p&gt;刚回到工作的岗位上，就将回家这段期间的各种问题抓紧修复掉，经过一次紧急上线大多数问题都得到了修复，由于最近上线了很多版本，代码改过来改过去，所以需要进行一次代码整
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.top/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>SimpleDateFormat的使用注意点</title>
    <link href="http://dingran.top/2018/08/20/SimpleDateFormat%E7%9A%84%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
    <id>http://dingran.top/2018/08/20/SimpleDateFormat的使用注意点/</id>
    <published>2018-08-20T03:50:17.000Z</published>
    <updated>2018-08-20T04:42:09.150Z</updated>
    
    <content type="html"><![CDATA[<p>SimpleDateFormat 这是一个我们太经常使用的类了，自从我开始接触java，它就一直伴随着我的成长，这个类一直用来做将日期类型转为string，或者string转为date类型。你真的了解过它么？</p>
<p>这两天突然发现代理爬虫爬取pc端的数据效果很差劲，几乎降到了2%左右，这是一个可怕的数字，因为这样几乎导致我整体的业务瘫痪。经过排查日志发现是一家分销商传入的查询参数有问题，特别是在将string转为date类型的时候进行校验的时候居然通过了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String str=&quot;2018-09-01\\&amp;quot;;cat /etc/passwd;\\&amp;quot;&quot;;</div><div class="line"></div><div class="line">Date date = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).parse(str);</div></pre></td></tr></table></figure>
<p>简简单单的语句，str里面有那么长的一串，其实有效的部分就是2018-09-01这个数字，运行代码，毫无征兆的运行通过了，没错就是运行通过了，一般认为在parse的时候就会抛出异常的呀，但是解析出来的数据却是2018-09-01丝毫不差，那后面的那一部分数据是怎么通过的呢？因为这一步骤的校验通过，我直接在后面代码使用了这个string的日期，然后就是一堆的异常。先不说这家分销商是否遭到了恶意爬取，就是对入参校验能通过就说不过去了。</p>
<p>经过排查源码段日期格式化在底层进行了字符串截取，取了前10位进行格式化成date类型，多么痛苦的领悟，导致后面误以为日期格式化成功。</p>
<p>后期将对日期进行特殊字符判断，日期在赋值进行修复。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SimpleDateFormat 这是一个我们太经常使用的类了，自从我开始接触java，它就一直伴随着我的成长，这个类一直用来做将日期类型转为string，或者string转为date类型。你真的了解过它么？&lt;/p&gt;
&lt;p&gt;这两天突然发现代理爬虫爬取pc端的数据效果很差劲，
    
    </summary>
    
      <category term="途牛" scheme="http://dingran.top/categories/%E9%80%94%E7%89%9B/"/>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E9%80%94%E7%89%9B/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="java" scheme="http://dingran.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>centos搭建redis cluster集群</title>
    <link href="http://dingran.top/2018/07/09/centos%E6%90%AD%E5%BB%BAredis-cluster%E9%9B%86%E7%BE%A4/"/>
    <id>http://dingran.top/2018/07/09/centos搭建redis-cluster集群/</id>
    <published>2018-07-09T02:15:57.000Z</published>
    <updated>2018-07-09T02:45:52.820Z</updated>
    
    <content type="html"><![CDATA[<p>根据上次的博文，搭建好了redis后，开始进行搭建redis-cluster集群。redis cluster集群，要求至少3个master，去组成一个高可用，健壮的分布式的集群，每个master都建议至少给一个slave，3个master，3个slave。</p>
<p>首先准备3台centos，每台centos按照上一篇博文搭建好redis，即每台centos上面启动2台redis，一共6个。</p>
<p>先安装第一台centos：</p>
<p>创建目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir -p /etc/redis-cluster</div><div class="line">mkdir -p /var/log/redis</div><div class="line">mkdir -p /var/redis/7001</div><div class="line">mkdir -p /var/redis/7002</div></pre></td></tr></table></figure></p>
<p>修改/etc/redis/6379.conf的配置参数如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">port 7001 //原来6379改为7001</div><div class="line">cluster-enabled yes</div><div class="line">cluster-config-file /etc/redis-cluster/node-7001.conf</div><div class="line">cluster-node-timeout 15000</div><div class="line">daemonize	yes							</div><div class="line">pidfile		/var/run/redis_7001.pid 						</div><div class="line">dir 		/var/redis/7001		</div><div class="line">logfile /var/log/redis/7001.log</div><div class="line">bind 192.168.1.X //绑定本机ip		</div><div class="line">appendonly yes</div></pre></td></tr></table></figure>
<p>如果配置文件有配置slaveof 请注释掉。 </p>
<p>将6379.conf 重命名为7001.conf</p>
<p>一定要将原来的6379 改为7001 对应的目录也要进行相应的改变。<br>复制7001.conf 重命名为7002.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp 7001.conf 7002.conf</div></pre></td></tr></table></figure></p>
<p>然后将7002.conf里面的7001更改为7002,可以直接vi进行字符串替换<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:%s/7001/7002/</div></pre></td></tr></table></figure></p>
<p>这样配置文件就配置好了，在去配置启动项：</p>
<p>进入/etc/init.d/目录下，将redis_6379 更名为redis_7001,在复制一份出来redis_7002</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">mv redis_6379 redis_7001</div><div class="line"></div><div class="line">cp redis_7001 redis_7002</div></pre></td></tr></table></figure>
<p>尝试启动：<br>进入/etc/init.d/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">./redis_7001 start</div><div class="line"></div><div class="line">./redis_7002 start</div><div class="line"></div><div class="line">ps -ef|grep redis </div><div class="line">查看2个redis是否都启动，没有启动根据提示信息或者日志进行重新配置</div></pre></td></tr></table></figure></p>
<p>如果上面都配置好了，启动成功，第一台centos的2台redis就部署好了，在第二台centos上面部署7003、7004方法同上，注意bind的ip地址 以及端口号。第三台centos同第二台。</p>
<h2 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h2><p>配置ruby，这里一定要注意ruby的版本号一定要<b>大于2.2.2</b>否则又得重新安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">wget https://cache.ruby-lang.org/pub/ruby/2.3/ruby-2.3.1.tar.gz</div><div class="line">tar -zxvf ruby-2.3.1.tar.gz</div><div class="line">./configure -prefix=/usr/local/ruby</div><div class="line">make &amp;&amp; make install</div><div class="line">cd /usr/local/ruby</div><div class="line">cp bin/ruby /usr/local/bin</div><div class="line">cp bin/gem /usr/local/bin</div><div class="line"></div><div class="line">wget http://rubygems.org/downloads/redis-3.3.0.gem</div><div class="line">gem install -l ./redis-3.3.0.gem</div><div class="line">gem list --check redis gem</div></pre></td></tr></table></figure>
<p>尝试使用yum install ruby可能下载的版本较低，所以推荐下载好了再进行安装。配置ruby的时候会报各种错误可以看看这个文章：<a href="https://blog.csdn.net/feinifi/article/details/78251486" target="_blank" rel="external">https://blog.csdn.net/feinifi/article/details/78251486</a></p>
<p>然后拷贝rdis-trib.rb</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">cp /usr/local/redis-3.2.8/src/redis-trib.rb /usr/local/bin</div></pre></td></tr></table></figure>
<p>将所有机器关联起来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-trib.rb create  --replicas 1 192.168.1.20:7001 192.168.1.20:7002 192.168.1.21:7003 192.168.1.21:7004 192.168.1.22:7005 192.168.1.22:7006</div></pre></td></tr></table></figure></p>
<p>测试连接一台机器查看集群情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-trib.rb check 192.168.1.20:7001</div></pre></td></tr></table></figure></p>
<p>可以看到3个Master 和3个slave 配置成功。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据上次的博文，搭建好了redis后，开始进行搭建redis-cluster集群。redis cluster集群，要求至少3个master，去组成一个高可用，健壮的分布式的集群，每个master都建议至少给一个slave，3个master，3个slave。&lt;/p&gt;
&lt;p&gt;首
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="redis" scheme="http://dingran.top/tags/redis/"/>
    
      <category term="centos" scheme="http://dingran.top/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>centos搭建redis集群步骤</title>
    <link href="http://dingran.top/2018/07/01/centos%E6%90%AD%E5%BB%BAredis%E9%9B%86%E7%BE%A4%E6%AD%A5%E9%AA%A4/"/>
    <id>http://dingran.top/2018/07/01/centos搭建redis集群步骤/</id>
    <published>2018-07-01T05:51:43.000Z</published>
    <updated>2018-07-01T06:17:36.224Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>参照龙果学院的讲师搭建redis集群</p>
</blockquote>
<h1 id="准备4台centos"><a href="#准备4台centos" class="headerlink" title="准备4台centos"></a>准备4台centos</h1><h2 id="使用virtualBox启动4台虚拟机"><a href="#使用virtualBox启动4台虚拟机" class="headerlink" title="使用virtualBox启动4台虚拟机"></a>使用virtualBox启动4台虚拟机</h2><p>（1）使用课程提供的CentOS 6.5镜像即可，CentOS-6.5-i386-minimal.iso。（不一定按照这个）<br>（2）创建虚拟机：打开Virtual Box，点击“新建”按钮，点击“下一步”，输入虚拟机名称为eshop-cache01，选择操作系统为Linux，选择版本为Red Hat，分配1024MB内存，后面的选项全部用默认，在Virtual Disk File location and size中，一定要自己选择一个目录来存放虚拟机文件，最后点击“create”按钮，开始创建虚拟机。<br>（3）设置虚拟机网卡：选择创建好的虚拟机，点击“设置”按钮，在网络一栏中，连接方式中，选择“Bridged Adapter”。<br>（4）安装虚拟机中的CentOS 6.5操作系统：选择创建好的虚拟机，点击“开始”按钮，选择安装介质（即本地的CentOS 6.5镜像文件），选择第一项开始安装-Skip-欢迎界面Next-选择默认语言-Baisc Storage Devices-Yes, discard any data-主机名:spark2upgrade01-选择时区-设置初始密码为- Existing Linux System-Write changes to disk-CentOS 6.5自己开始安装。<br>（5）安装完以后，CentOS会提醒你要重启一下，就是reboot，你就reboot就可以了。</p>
<h2 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h2><p>vi /etc/sysconfig/network-scripts/ifcfg-eth0</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">BOOTPROTO=static</div><div class="line">IPADDR=192.168.0.X //改为静态ip 可配置</div><div class="line">NETMASK=255.255.255.0</div><div class="line">GATEWAY=192.168.0.1</div><div class="line">service network restart</div></pre></td></tr></table></figure>
<h2 id="配置hosts"><a href="#配置hosts" class="headerlink" title="配置hosts"></a>配置hosts</h2><p>vi /etc/hosts<br>配置本机的hostname到ip地址的映射</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">192.168.31.187 eshop-cache01(假设本机是187)</div><div class="line">192.168.31.xxx eshop-cache02</div><div class="line">192.168.31.xxx eshop-cache03</div><div class="line">192.168.31.xxx eshop-cache04</div></pre></td></tr></table></figure>
<h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">service iptables stop</div><div class="line">service ip6tables stop</div><div class="line">chkconfig iptables off</div><div class="line">chkconfig ip6tables off</div><div class="line"></div><div class="line"></div><div class="line">vi /etc/selinux/config</div><div class="line">SELINUX=disabled</div></pre></td></tr></table></figure>
<h2 id="配置yum"><a href="#配置yum" class="headerlink" title="配置yum"></a>配置yum</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum clean all</div><div class="line">yum makecache</div><div class="line">yum install wget</div></pre></td></tr></table></figure>
<h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><p>1、将jdk-7u60-linux-i586.rpm通过WinSCP上传到虚拟机中<br>2、安装JDK：rpm -ivh jdk-7u65-linux-i586.rpm<br>3、配置jdk相关的环境变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vi .bashrc</div><div class="line">export JAVA_HOME=/usr/java/latest</div><div class="line">export PATH=$PATH:$JAVA_HOME/bin</div><div class="line">source .bashrc</div></pre></td></tr></table></figure>
<p>测试jdk安装是否成功：java -version</p>
<h2 id="安装Perl"><a href="#安装Perl" class="headerlink" title="安装Perl"></a>安装Perl</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">yum install -y gcc</div><div class="line"></div><div class="line">wget http://www.cpan.org/src/5.0/perl-5.16.1.tar.gz</div><div class="line">tar -xzf perl-5.16.1.tar.gz</div><div class="line">cd perl-5.16.1</div><div class="line">./Configure -des -Dprefix=/usr/local/perl</div><div class="line">make &amp;&amp; make test &amp;&amp; make install</div><div class="line">perl -v</div></pre></td></tr></table></figure>
<h2 id="配置4台CentOS为ssh免密码互相通信"><a href="#配置4台CentOS为ssh免密码互相通信" class="headerlink" title="配置4台CentOS为ssh免密码互相通信"></a>配置4台CentOS为ssh免密码互相通信</h2><p>首先在三台机器上配置对本机的ssh免密码登录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa</div></pre></td></tr></table></figure>
<p>生成本机的公钥，过程中不断敲回车即可，ssh-keygen命令默认会将公钥放在/root/.ssh目录下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /root/.ssh</div><div class="line">cp id_rsa.pub authorized_keys</div></pre></td></tr></table></figure>
<p>将公钥复制为authorized_keys文件，此时使用ssh连接本机就不需要输入密码了</p>
<hr>
<h1 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h1><h2 id="下载包"><a href="#下载包" class="headerlink" title="下载包"></a>下载包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wget http://downloads.sourceforge.net/tcl/tcl8.6.1-src.tar.gz</div><div class="line">tar -xzvf tcl8.6.1-src.tar.gz</div><div class="line">cd  /usr/local/tcl8.6.1/unix/</div><div class="line">./configure  </div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<p>使用redis-3.2.8.tar.gz</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar -zxvf redis-3.2.8.tar.gz</div><div class="line">cd redis-3.2.8</div><div class="line">make &amp;&amp; make test &amp;&amp; make install</div></pre></td></tr></table></figure>
<h2 id="redis-启动"><a href="#redis-启动" class="headerlink" title="redis 启动"></a>redis 启动</h2><p>（1）redis utils目录下，有个redis_init_script脚本<br>（2）将redis_init_script脚本拷贝到linux的/etc/init.d目录中，将redis_init_script重命名为redis_6379，6379是我们希望这个redis实例监听的端口号<br>（3）修改redis_6379脚本的第6行的REDISPORT，设置为相同的端口号（默认就是6379）<br>（4）创建两个目录：/etc/redis（存放redis的配置文件），/var/redis/6379（存放redis的持久化文件）<br>（5）修改redis配置文件（默认在根目录下，redis.conf），拷贝到/etc/redis目录中，修改名称为6379.conf<br>（6）修改redis.conf中的部分配置为生产环境</p>
<p>修改config目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">daemonize	yes		让redis以daemon进程运行</div><div class="line">pidfile		/var/run/redis_6379.pid 	设置redis的pid文件位置</div><div class="line">port		6379						设置redis的监听端口号</div><div class="line">dir 		/var/redis/6379				设置持久化文件的存储位置</div></pre></td></tr></table></figure></p>
<p>（7）启动redis，执行cd /etc/init.d, chmod 777 redis_6379，./redis_6379 start</p>
<p>（8）确认redis进程是否启动，ps -ef | grep redis</p>
<p>（9）让redis跟随系统启动自动启动</p>
<pre><code>在redis_6379脚本中，最上面，加入两行注释
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># chkconfig:   2345 90 10</div><div class="line"></div><div class="line"># description:  Redis is a persistent key-value database</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig redis_6379 on</div></pre></td></tr></table></figure>
<h2 id="启动成功之后-可以使用cli"><a href="#启动成功之后-可以使用cli" class="headerlink" title="启动成功之后 可以使用cli"></a>启动成功之后 可以使用cli</h2><p>redis cli的使用</p>
<p>redis-cli SHUTDOWN，连接本机的6379端口停止redis进程</p>
<p>redis-cli -h 127.0.0.1 -p 6379 SHUTDOWN，制定要连接的ip和端口号</p>
<p>redis-cli PING，ping redis的端口，看是否正常</p>
<p>redis-cli，进入交互式命令行</p>
<h1 id="配置redis-读写分离"><a href="#配置redis-读写分离" class="headerlink" title="配置redis 读写分离"></a>配置redis 读写分离</h1><ul>
<li><p>打开/etc/redis/6379.conf，找到slaveof </p>
</li>
<li><p>修改 slaveof 192.168.1.1 6379 主机的ip端口号</p>
</li>
<li><p>slave-read-only 开启  默认开启的</p>
</li>
<li><p>master 配置requierepass 配置 masterauth</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//从节点配置这个</div><div class="line">requierepass password</div><div class="line">//主节点配置这个</div><div class="line">masterauth password</div></pre></td></tr></table></figure>
<ul>
<li><p>配置conf的bind<br>找到6379.conf 里面的bind 修改127.0.0.1 改为本机的ip 192.168.1.X</p>
</li>
<li><p>重新启动 先启动主节点  再启动从节点</p>
</li>
</ul>
<p>调用命令进去cli  ipaddr 为IP地址 port 端口号  -a 后面跟着password<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">redis-cli -h ipaddr -p port -a password</div></pre></td></tr></table></figure></p>
<p>查看主从配置情况 info replication</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">info replication</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;参照龙果学院的讲师搭建redis集群&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;准备4台centos&quot;&gt;&lt;a href=&quot;#准备4台centos&quot; class=&quot;headerlink&quot; title=&quot;准备4台centos&quot;&gt;&lt;/a&gt;准备4
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="redis" scheme="http://dingran.top/tags/redis/"/>
    
      <category term="centos" scheme="http://dingran.top/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>Mac下利用ssh进行文件传输</title>
    <link href="http://dingran.top/2018/06/30/Mac%E4%B8%8B%E5%88%A9%E7%94%A8ssh%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/"/>
    <id>http://dingran.top/2018/06/30/Mac下利用ssh进行文件传输/</id>
    <published>2018-06-30T03:49:44.000Z</published>
    <updated>2018-06-30T03:55:00.047Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、从服务器上下载文件"><a href="#1、从服务器上下载文件" class="headerlink" title="1、从服务器上下载文件"></a>1、从服务器上下载文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp username@servername:/path/filename /var/www/local_dir（本地目录）</div></pre></td></tr></table></figure>
<p>例如scp root@192.168.0.101:/var/www/test.txt  把192.168.0.101上的/var/www/test.txt 的文件下载到/var/www/local_dir（本地目录）</p>
<h2 id="2、上传本地文件到服务器"><a href="#2、上传本地文件到服务器" class="headerlink" title="2、上传本地文件到服务器"></a>2、上传本地文件到服务器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp /path/filename username@servername:/path</div></pre></td></tr></table></figure>
<p>例如scp /var/www/test.php  root@192.168.0.101:/var/www/  把本机/var/www/目录下的test.php文件上传到192.168.0.101这台服务器上的/var/www/目录中</p>
<h2 id="3、从服务器下载整个目录"><a href="#3、从服务器下载整个目录" class="headerlink" title="3、从服务器下载整个目录"></a>3、从服务器下载整个目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp -r username@servername:/var/www/remote_dir/（远程目录） /var/www/local_dir（本地目录）</div></pre></td></tr></table></figure>
<p>例如:scp -r root@192.168.0.101:/var/www/test  /var/www/  </p>
<h2 id="4、上传目录到服务器"><a href="#4、上传目录到服务器" class="headerlink" title="4、上传目录到服务器"></a>4、上传目录到服务器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp  -r local_dir username@servername:remote_dir</div></pre></td></tr></table></figure>
<p>例如：scp -r test  root@192.168.0.101:/var/www/   把当前目录下的test目录上传到服务器的/var/www/ 目录</p>
<p>注：目标服务器要开启写入权限。</p>
<h2 id="补充修改linux的主机名"><a href="#补充修改linux的主机名" class="headerlink" title="补充修改linux的主机名"></a>补充修改linux的主机名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vi /etc/sysconfig/network</div><div class="line"></div><div class="line">HOSTNAME=localhost.localdomain  #修改localhost.localdomain为你要的</div><div class="line"></div><div class="line">//需要reboot</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、从服务器上下载文件&quot;&gt;&lt;a href=&quot;#1、从服务器上下载文件&quot; class=&quot;headerlink&quot; title=&quot;1、从服务器上下载文件&quot;&gt;&lt;/a&gt;1、从服务器上下载文件&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="mac" scheme="http://dingran.top/tags/mac/"/>
    
      <category term="ssh" scheme="http://dingran.top/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>无需第三方软件实现Mac支持ntfs读写的简单操作</title>
    <link href="http://dingran.top/2018/06/28/%E6%97%A0%E9%9C%80%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6%E5%AE%9E%E7%8E%B0Mac%E6%94%AF%E6%8C%81ntfs%E8%AF%BB%E5%86%99%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/"/>
    <id>http://dingran.top/2018/06/28/无需第三方软件实现Mac支持ntfs读写的简单操作/</id>
    <published>2018-06-28T05:58:35.000Z</published>
    <updated>2018-06-28T06:10:00.957Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>此方法转载自知乎，@知乎用户的回答<br>原文链接：<a href="https://www.zhihu.com/question/19571334/answer/224291746" target="_blank" rel="external">https://www.zhihu.com/question/19571334/answer/224291746</a><br>本文参照链接：<a href="https://blog.csdn.net/u013247765/article/details/77932144/" target="_blank" rel="external">https://blog.csdn.net/u013247765/article/details/77932144/</a></p>
</blockquote>
<hr>
<p>参照此方法在自己的Mac上试验成功，现记录此方法如下(略有改动)：</p>
<h2 id="本机环境："><a href="#本机环境：" class="headerlink" title="本机环境："></a>本机环境：</h2><ul>
<li>macOS Sierra version 10.13.5 </li>
<li>2017 款 MacBook Pro </li>
<li>2018.6.28</li>
</ul>
<p>此方法对10.6以前版本的OS理论上是无效的<br>苹果理论上是支持NTFS的，修改下原生配置文件就可以实现读写ntfs</p>
<h2 id="流程简介"><a href="#流程简介" class="headerlink" title="流程简介"></a>流程简介</h2><ul>
<li>挂载上你的NTFS硬盘，查看硬盘名称</li>
<li>编辑/etc/fstab文件，使其支持NTFS写入</li>
<li>将/Volumes中的NTFS磁盘快捷方式到Finder</li>
</ul>
<h2 id="详细流程"><a href="#详细流程" class="headerlink" title="详细流程"></a>详细流程</h2><ul>
<li><p>插上硬盘后，查看你的硬盘名称，这里假设名称是<b>AngleDisk</b>，牢记之（你的可不是这个呀！！）</p>
</li>
<li><p>打开Applications的Terminal, 你也可以直接spotlight输入terminal打开</p>
</li>
<li><p>在终端输入sudo nano /etc/fstab 敲击回车</p>
</li>
<li><p>现在你看到了一个编辑界面，输入LABEL=<b>AngleDisk</b> none ntfs rw,auto,nobrowse后，敲击回车，再Ctrl+X，再敲击Y，再敲击回车</p>
</li>
<li><p>一定将上面名称换成你的ntfs的名称</p>
</li>
</ul>
<hr>
<p>此时，退出你的移动硬盘，再重新插入，你会发现磁盘没有显示再桌面或是Finder之前出现的地方，别慌</p>
<p>打开Finder，Command+Shift+G，输入框中输入/Volumes，回车，你就可以看到你的磁盘啦！是可以读写的哟，Enjoy</p>
<p>方便起见，你可以直接把磁盘拖到Finder侧边栏中，这样下次使用就不用进入到/Volumes目录打开了</p>
<p>Enjoy !!</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;此方法转载自知乎，@知乎用户的回答&lt;br&gt;原文链接：&lt;a href=&quot;https://www.zhihu.com/question/19571334/answer/224291746&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="mac" scheme="http://dingran.top/tags/mac/"/>
    
      <category term="ntfs" scheme="http://dingran.top/tags/ntfs/"/>
    
  </entry>
  
  <entry>
    <title>解决chrome下css样式不显示- Failed to decode downloaded font</title>
    <link href="http://dingran.top/2018/06/13/%E8%A7%A3%E5%86%B3chrome%E4%B8%8Bcss%E6%A0%B7%E5%BC%8F%E4%B8%8D%E6%98%BE%E7%A4%BA/"/>
    <id>http://dingran.top/2018/06/13/解决chrome下css样式不显示/</id>
    <published>2018-06-13T09:45:26.000Z</published>
    <updated>2018-06-13T09:56:37.916Z</updated>
    
    <content type="html"><![CDATA[<p>今天开始准备将牛抢票进行分片重构，在原有的基础上删除无用的代码以及相关测试代码，将我准备分片的项目集成到牛抢票系统里面，一切准备完毕，准备启动调试。</p>
<p>页面缓缓打开，却发现登录后面的css样式不显示，用chrome打开开发工具进行抓包，也没有发现问题，打开favicon，http状态码显示的200，就是不显示图片，这让我很苦恼哇。</p>
<p>于是度娘了好久，始终没有找到正确的姿势，在抓取css的包过程中发现console打出了一些黄色的提示信息：Failed to decode downloaded font，带着试试的态度去度娘了一下，果然找到了关键的回答帖子：<a href="https://blog.csdn.net/xinqilela/article/details/79664591" target="_blank" rel="external">https://blog.csdn.net/xinqilela/article/details/79664591</a></p>
<p>说的很明白哇<br><b>因为经过maven的filter，会破坏font文件的二进制文件格式，导致前台解析出错。</b><br>按照正确的姿势我修改了配置maven的pom配置文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">webResources</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span> //这里很重要</div><div class="line">                        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">webResources</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
<p>排查了一下午终于解决了这个问题，所以找对姿势还是很重要的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天开始准备将牛抢票进行分片重构，在原有的基础上删除无用的代码以及相关测试代码，将我准备分片的项目集成到牛抢票系统里面，一切准备完毕，准备启动调试。&lt;/p&gt;
&lt;p&gt;页面缓缓打开，却发现登录后面的css样式不显示，用chrome打开开发工具进行抓包，也没有发现问题，打开fav
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.top/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>牛抢票DB异常问题分析</title>
    <link href="http://dingran.top/2018/06/09/%E7%89%9B%E6%8A%A2%E7%A5%A8DB%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
    <id>http://dingran.top/2018/06/09/牛抢票DB异常问题分析/</id>
    <published>2018-06-09T14:57:25.000Z</published>
    <updated>2018-06-09T15:30:47.750Z</updated>
    
    <content type="html"><![CDATA[<p>从上个星期开始，每隔那么几个分钟，手机就会收到一条短信，起初不知道这是什么短信，但是可以确信的是这是途牛运维发过来的短信，经过和运维沟通过后发现，这个是数据库从库延迟增加导致的短信，我赶快打开数据库运维监控页面，发现数据库连接池已经到达上线3000，从库的延迟增加到每秒延迟1000+的数量。</p>
<p>使用线上sqladmin查询，都是无功而返，几乎都是查询超时。在运维查看页面我打开当前运行sql，发现堵住了大概有上千的sql，期初怀疑是sql写的有问题，将sql进行explain发现确实有点小问题，有个sql使用了临时表，正好周一那天我修改了一下进行上线。附mysql的explain 的type类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">|  ALL              |  全表扫描</div><div class="line"></div><div class="line">|  index            |  索引全扫描</div><div class="line"></div><div class="line">|  range            |  索引范围扫描，常用语&lt;,&lt;=,&gt;=,between等操作</div><div class="line"></div><div class="line">|  ref                |  使用非唯一索引扫描或唯一索引前缀扫描，返回单条记录，常出现在关联查询中</div><div class="line"></div><div class="line">|  eq_ref           |  类似ref，区别在于使用的是唯一索引，使用主键的关联查询</div><div class="line"></div><div class="line">|  const/system  |  单条记录，系统会把匹配行中的其他列作为常数处理，如主键或唯一索引查询</div><div class="line"></div><div class="line">|  null                |  MySQL不访问任何表或索引，直接返回结果</div><div class="line"></div><div class="line">sql效率从上到下逐渐增高</div></pre></td></tr></table></figure>
<p>上完线后，发现还是不能够有效的降低从库的延迟压力，sql经过优化已经完全可以不会造成这种问题，但是查看线上的运维数据库界面的相关数据指标丝毫没有下降的意思。这个项目我已经完全做了读写分离，经过和dba沟通后以及dba了解我的业务后，发现是牛抢票的查询速度太快导致的，于是我降低了抢票的查询速度，果然延迟瞬间下降了，所以问题的原因是查询并发量非常高导致从库读写压力大，cpu计算负荷大等造成db反馈数据慢。</p>
<p>dba给出了4点建议：</p>
<p>1.业务上增加对缓存层<br>2.读从库的一部分流量转到主库上去<br>3.调整mysql系统参数，需要重启<br>4.增加从库机器</p>
<p>这4个建议可以说很靠谱，所谓抢票业务就是不断查询余票的相关数量在进行有效的分单操作。在获取订单的时候就会对mysql产生每秒上千次的查询，造成db压力，由于db的从库机器非常少导致压力不能均衡从而导致延迟增高的风险。</p>
<p>所以经过以上排查分析，我在获取订单数据的时候增加一层缓存，缓存根据抢票频率进行设置超时时间，即缓存的订单的新鲜度，因为抢票订单每时每秒都会增加，所以可能添加一层缓存会造成刚下的抢票订单需要过一个缓存新鲜度的周期才能进行有效分单占位但是却可以保证DB的压力下降一半以上。</p>
<p>由于我在的读写分离使用的是mybatis的动态plugin，即使用aop方式根据查询的sql的类型进行选择主库还是从库，所以我在diamond的添加了百分比的数值，通过调整这个数据可以调整原来走从库获取数据转而走主库，这样能够有效降低从库的压力，又可以查看主库的指标，一旦主库告急，可以通过diamond动态配置进行调整。</p>
<p>后面还将对抢票的分片进行改造。在淘宝的开源项目定时分布式调度tbschedule上，我进行了相关改进，使项目更符合牛抢票的相关特点，相信后面抢票能力会有很大的提升。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从上个星期开始，每隔那么几个分钟，手机就会收到一条短信，起初不知道这是什么短信，但是可以确信的是这是途牛运维发过来的短信，经过和运维沟通过后发现，这个是数据库从库延迟增加导致的短信，我赶快打开数据库运维监控页面，发现数据库连接池已经到达上线3000，从库的延迟增加到每秒延迟
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.top/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>记2018-06-04途牛重大事故</title>
    <link href="http://dingran.top/2018/06/04/%E8%AE%B02018-06-04%E9%80%94%E7%89%9B%E9%87%8D%E5%A4%A7%E4%BA%8B%E6%95%85/"/>
    <id>http://dingran.top/2018/06/04/记2018-06-04途牛重大事故/</id>
    <published>2018-06-04T07:50:05.000Z</published>
    <updated>2018-06-04T08:03:45.715Z</updated>
    
    <content type="html"><![CDATA[<p>6.4号，周一<br>一周的开始，开始搞RIS火车票查询系统的迁移，在sst和sit环境迁移完之后，一切顺风顺水。</p>
<p>下午15点左右，黄大仙突然和我说DTC挂了，我还埋怨他没事诅咒我的系统挂了，查看监控被眼前的景象惊呆了，满屏全红，客服开始纷纷踏至问怎么查不出来车次列表？我也无可奈何，只能让他们等候。</p>
<p>过了一会，监控群爆炸了，一堆人说网络访问不通，越来越多人反馈相关问题，我负责的系统也是红了一片，查看日志，发现缓存访问不了。不一会CTO出来让赶紧修复掉，因为主站已经挂了500，M站等无一幸免。</p>
<p>15点50多有系统开始恢复，追根溯源，是公司的缓存交换机出现了故障，这次问题比较大，最近可是多事之秋，希望运维能够保证相关系统的稳定性，不要再出现类似的问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;6.4号，周一&lt;br&gt;一周的开始，开始搞RIS火车票查询系统的迁移，在sst和sit环境迁移完之后，一切顺风顺水。&lt;/p&gt;
&lt;p&gt;下午15点左右，黄大仙突然和我说DTC挂了，我还埋怨他没事诅咒我的系统挂了，查看监控被眼前的景象惊呆了，满屏全红，客服开始纷纷踏至问怎么查不出来
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.top/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>HTTP client线程撑爆异常总结</title>
    <link href="http://dingran.top/2018/05/08/HTTP-client%E7%BA%BF%E7%A8%8B%E6%92%91%E7%88%86%E5%BC%82%E5%B8%B8%E6%80%BB%E7%BB%93/"/>
    <id>http://dingran.top/2018/05/08/HTTP-client线程撑爆异常总结/</id>
    <published>2018-05-08T03:13:29.000Z</published>
    <updated>2018-06-11T09:09:12.980Z</updated>
    
    <content type="html"><![CDATA[<p>昨天上线了DTC_LEFT余位查询系统，上线后一切运行正常，今天早上来后，查看监控系统发现jvm里面运行的线程数量已经达到5000+，这也太可怕了。</p>
<p>经过jvm工具jvisualvm查看系统的线程情况发现是有个线程“Connection evictor”不断的增加已经达到了好几千的数量，关键是回收的数量太慢了，而且在代码里面并没有使用这个线程池或者给予这个线程命名。</p>
<p>度娘了一下，排除系统创建的线程池，预排查在使用httpclient的时候导致的，经过jvisualvm的线程查看线程堆栈果然证实了想法，是由于一个类IdleConnectionEvictor导致的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * ====================================================================</div><div class="line"> * Licensed to the Apache Software Foundation (ASF) under one</div><div class="line"> * or more contributor license agreements.  See the NOTICE file</div><div class="line"> * distributed with this work for additional information</div><div class="line"> * regarding copyright ownership.  The ASF licenses this file</div><div class="line"> * to you under the Apache License, Version 2.0 (the</div><div class="line"> * "License"); you may not use this file except in compliance</div><div class="line"> * with the License.  You may obtain a copy of the License at</div><div class="line"> *</div><div class="line"> *   http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"> *</div><div class="line"> * Unless required by applicable law or agreed to in writing,</div><div class="line"> * software distributed under the License is distributed on an</div><div class="line"> * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</div><div class="line"> * KIND, either express or implied.  See the License for the</div><div class="line"> * specific language governing permissions and limitations</div><div class="line"> * under the License.</div><div class="line"> * ====================================================================</div><div class="line"> *</div><div class="line"> * This software consists of voluntary contributions made by many</div><div class="line"> * individuals on behalf of the Apache Software Foundation.  For more</div><div class="line"> * information on the Apache Software Foundation, please see</div><div class="line"> * &lt;http://www.apache.org/&gt;.</div><div class="line"> *</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">package</span> org.apache.http.impl.client;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.ThreadFactory;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.http.conn.HttpClientConnectionManager;</div><div class="line"><span class="keyword">import</span> org.apache.http.util.Args;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * This class maintains a background thread to enforce an eviction policy for expired / idle</div><div class="line"> * persistent connections kept alive in the connection pool.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@since</span> 4.4</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">IdleConnectionEvictor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HttpClientConnectionManager connectionManager;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadFactory threadFactory;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Thread thread;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> sleepTimeMs;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> maxIdleTimeMs;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Exception exception;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IdleConnectionEvictor</span><span class="params">(</span></span></div><div class="line">            <span class="keyword">final</span> HttpClientConnectionManager connectionManager,</div><div class="line">            <span class="keyword">final</span> ThreadFactory threadFactory,</div><div class="line">            <span class="keyword">final</span> <span class="keyword">long</span> sleepTime, <span class="keyword">final</span> TimeUnit sleepTimeUnit,</div><div class="line">            <span class="keyword">final</span> <span class="keyword">long</span> maxIdleTime, <span class="keyword">final</span> TimeUnit maxIdleTimeUnit) &#123;</div><div class="line">        <span class="keyword">this</span>.connectionManager = Args.notNull(connectionManager, <span class="string">"Connection manager"</span>);</div><div class="line">        <span class="keyword">this</span>.threadFactory = threadFactory != <span class="keyword">null</span> ? threadFactory : <span class="keyword">new</span> DefaultThreadFactory();</div><div class="line">        <span class="keyword">this</span>.sleepTimeMs = sleepTimeUnit != <span class="keyword">null</span> ? sleepTimeUnit.toMillis(sleepTime) : sleepTime;</div><div class="line">        <span class="keyword">this</span>.maxIdleTimeMs = maxIdleTimeUnit != <span class="keyword">null</span> ? maxIdleTimeUnit.toMillis(maxIdleTime) : maxIdleTime;</div><div class="line">        <span class="keyword">this</span>.thread = <span class="keyword">this</span>.threadFactory.newThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">while</span> (!Thread.currentThread().isInterrupted()) &#123;</div><div class="line">                        Thread.sleep(sleepTimeMs);</div><div class="line">                        connectionManager.closeExpiredConnections();</div><div class="line">                        <span class="keyword">if</span> (maxIdleTimeMs &gt; <span class="number">0</span>) &#123;</div><div class="line">                            connectionManager.closeIdleConnections(maxIdleTimeMs, TimeUnit.MILLISECONDS);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception ex) &#123;</div><div class="line">                    exception = ex;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IdleConnectionEvictor</span><span class="params">(</span></span></div><div class="line">            <span class="keyword">final</span> HttpClientConnectionManager connectionManager,</div><div class="line">            <span class="keyword">final</span> <span class="keyword">long</span> sleepTime, <span class="keyword">final</span> TimeUnit sleepTimeUnit,</div><div class="line">            <span class="keyword">final</span> <span class="keyword">long</span> maxIdleTime, <span class="keyword">final</span> TimeUnit maxIdleTimeUnit) &#123;</div><div class="line">        <span class="keyword">this</span>(connectionManager, <span class="keyword">null</span>, sleepTime, sleepTimeUnit, maxIdleTime, maxIdleTimeUnit);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IdleConnectionEvictor</span><span class="params">(</span></span></div><div class="line">            <span class="keyword">final</span> HttpClientConnectionManager connectionManager,</div><div class="line">            <span class="keyword">final</span> <span class="keyword">long</span> maxIdleTime, <span class="keyword">final</span> TimeUnit maxIdleTimeUnit) &#123;</div><div class="line">        <span class="keyword">this</span>(connectionManager, <span class="keyword">null</span>,</div><div class="line">                maxIdleTime &gt; <span class="number">0</span> ? maxIdleTime : <span class="number">5</span>, maxIdleTimeUnit != <span class="keyword">null</span> ? maxIdleTimeUnit : TimeUnit.SECONDS,</div><div class="line">                maxIdleTime, maxIdleTimeUnit);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line">        thread.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</div><div class="line">        thread.interrupt();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRunning</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> thread.isAlive();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">awaitTermination</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> time, <span class="keyword">final</span> TimeUnit tunit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        thread.join((tunit != <span class="keyword">null</span> ? tunit : TimeUnit.MILLISECONDS).toMillis(time));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultThreadFactory</span> <span class="keyword">implements</span> <span class="title">ThreadFactory</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</div><div class="line">            <span class="keyword">final</span> Thread t = <span class="keyword">new</span> Thread(r, <span class="string">"Connection evictor"</span>);</div><div class="line">            t.setDaemon(<span class="keyword">true</span>);</div><div class="line">            <span class="keyword">return</span> t;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在后面的threadFactory，会有不断创建“Connection evictor的线程”，那么究竟是哪里调用这个线程的呢？经过排查封装httpclient的代码发现，之前在查看文档的时候发现有两个参数可以定时清理无用的httpclient的链接:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">evictIdleConnections(<span class="number">5</span>, TimeUnit.SECONDS).evictExpiredConnections()</div></pre></td></tr></table></figure>
<p>这两个参数是定时清理无用的httpclient，释放超时的链接，但是evictExpireConnections这个方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">    * Makes this instance of HttpClient proactively evict expired connections from the</div><div class="line">    * connection pool using a background thread.</div><div class="line">    * &lt;p&gt;</div><div class="line">    * One MUST explicitly close HttpClient with &#123;<span class="doctag">@link</span> CloseableHttpClient#close()&#125; in order</div><div class="line">    * to stop and release the background thread.</div><div class="line">    * &lt;p&gt;</div><div class="line">    * Please note this method has no effect if the instance of HttpClient is configuted to</div><div class="line">    * use a shared connection manager.</div><div class="line">    * &lt;p&gt;</div><div class="line">    * Please note this method may not be used when the instance of HttpClient is created</div><div class="line">    * inside an EJB container.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@see</span> #setConnectionManagerShared(boolean)</div><div class="line">    * <span class="doctag">@see</span> org.apache.http.conn.HttpClientConnectionManager#closeExpiredConnections()</div><div class="line">    *</div><div class="line">    * <span class="doctag">@since</span> 4.4</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> HttpClientBuilder <span class="title">evictExpiredConnections</span><span class="params">()</span> </span>&#123;</div><div class="line">       evictExpiredConnections = <span class="keyword">true</span>;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">\\省略</div><div class="line"></div><div class="line">  List&lt;Closeable&gt; closeablesCopy = closeables != <span class="keyword">null</span> ? <span class="keyword">new</span> ArrayList&lt;Closeable&gt;(closeables) : <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.connManagerShared) &#123;</div><div class="line">            <span class="keyword">if</span> (closeablesCopy == <span class="keyword">null</span>) &#123;</div><div class="line">                closeablesCopy = <span class="keyword">new</span> ArrayList&lt;Closeable&gt;(<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">final</span> HttpClientConnectionManager cm = connManagerCopy;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (evictExpiredConnections || evictIdleConnections) &#123;</div><div class="line">                <span class="keyword">final</span> IdleConnectionEvictor connectionEvictor = <span class="keyword">new</span> IdleConnectionEvictor(cm,</div><div class="line">                        maxIdleTime &gt; <span class="number">0</span> ? maxIdleTime : <span class="number">10</span>, maxIdleTimeUnit != <span class="keyword">null</span> ? maxIdleTimeUnit : TimeUnit.SECONDS);</div><div class="line">                closeablesCopy.add(<span class="keyword">new</span> Closeable() &#123;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                        connectionEvictor.shutdown();</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                &#125;);</div><div class="line">                connectionEvictor.start();</div><div class="line">            &#125;</div><div class="line">            closeablesCopy.add(<span class="keyword">new</span> Closeable() &#123;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                    cm.shutdown();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    \\省略</div></pre></td></tr></table></figure>
<p>也就是说，每开启个httpclient的链接，都会创建一个后续线程去释放这个链接，代码里面使用sleep，造成线程休眠，如果httpclient的链接请求不断增加就会导致线程数不停的增长，最终导致系统的线程都无法创建报错无法创建线程，can not create native thread.所以编写代码须谨慎，一步不当就会造成系统崩溃。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天上线了DTC_LEFT余位查询系统，上线后一切运行正常，今天早上来后，查看监控系统发现jvm里面运行的线程数量已经达到5000+，这也太可怕了。&lt;/p&gt;
&lt;p&gt;经过jvm工具jvisualvm查看系统的线程情况发现是有个线程“Connection evictor”不断的
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.top/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>RES资源系统去除直接调用DTC缓存更改</title>
    <link href="http://dingran.top/2018/04/27/RES%E8%B5%84%E6%BA%90%E7%B3%BB%E7%BB%9F%E5%8E%BB%E9%99%A4%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8DTC%E7%BC%93%E5%AD%98%E6%9B%B4%E6%94%B9/"/>
    <id>http://dingran.top/2018/04/27/RES资源系统去除直接调用DTC缓存更改/</id>
    <published>2018-04-27T03:03:10.000Z</published>
    <updated>2018-04-27T05:03:25.339Z</updated>
    
    <content type="html"><![CDATA[<p>DTC数据中心核心爬取数据系统已经由原来DTC+DTG拆分为DTC.LEFT+DTC.GRAB两个系统，一个是用来查询余位的，一个是用来给抢票查询最新余位数据。</p>
<p>DTC.GRAB已经上线了几个月了，一直运行平稳，迁移拆分几乎没有费多大功夫，是因为抢票查询是独立在原来DTC的代码里，没有DB依赖，只依赖缓存，由于抢票的查询QPS比较高，会影响余位的返回成功率，所以单独部署。</p>
<p>DTC.LEFT经过一个月的迁移，将所有的原来DTC包含的功能全部迁往DTC.LEFT，然后对代码进行进一步整理，使得原来的DTC.DTC的java总行数由90000行降至不到30000行，功能却不减反增。遇到问题后查询问题也是非常方便的，应用软件设计原则以及maven分层解耦的思想设计的架构在代码管理上也是非常清爽。</p>
<p>在4月初，总体设计完毕，已经sst环境稳定运行了一段时间。总体来看，查询速度明显提升，几乎不会出现查询余位不显示价格的问题，减少了一大批由于价格的问题导致查词列表不显示的问题。但是在上sit上却遇到了问题，原来RES资源系统在查询DTC缓存的时候直接连接redis，直接查询DTC的缓存格式，而不是走DTC的接口，由于原来的缓存设计复杂，当车次较多的时候会造成redis的发送流量增加几倍以上导致redis返回过慢导致redis崩溃，这种大value的问题也是急需更改的问题，这次DTC.LEFT上线后我对DTC的缓存格式进行了重新的设计，缓存的传输下降了50%以上。但是res这么调用就会导致对度假打包业务的崩溃，其中有一段业务就是直接调用DTC缓存查询价格、余位的。这么强的耦合当初添加进来是很大的败笔。</p>
<p>在说一下系统的分工问题：DTC.LEFT是用来爬取12306的车次系统，落入的数据也是车次的信息，比如车次站站对信息、经停站信息、价格信息，别无其他。而RES是静态资源系统，它和DTC.LEFT所落入的数据是不一样的，RES里面包含资源信息，所谓资源就是一个车次的所有信息细致到席位的价格上，由公司公共资源系统分配资源id，然后保存到DB里，这个信息是公司的其他部门调用的基础信息比如度假、打包等查询的信息均已资源id进行查询；RES还维护了公司的火车票的POI信息，也就是某个城市下有哪些车站、车站的编码、车站的code等由公司公共部门统一维护，这些信息在DTC系统里面根本用不上，DTC所使用的是三字码也只有三字码，为什么呢？因为12306页只接受三字码，所以输入的城市也只是根据城市查找某个车站，再根据车站的三字码进行查询。一般前端暴露的POI数据都是三字码信息，即客人查询火车票选择的都是“站”信息，不是城市，但是打包度假等查询的却是以城市来查询的，这也是区别所在。12306虽然查询的是以站的方式查询，但是返回的信息却是以城市方式展示的，比如输入上海，返回的却是上海所有的车站的车次信息，还有特殊的，输入瓦房店到大连的车次和瓦房店西到大连的车次信息却是不同的，明明是同城车站怎么返回还不一样的呢？这是12306的规则，我们只能适配，所以有些规则并不是一成不变的。</p>
<p>话说回来，前任离职司机说要将两个系统合二为一，弱化资源系统，首先我的观点是根本弱化不了，也合并不了，因为系统功能分工是不同的：资源是公司所有的系统传输查询的根本，是公司的基本规则，无法弱化，如果将DTC和RES合到一起，只会陡增复杂度，增加系统之间的耦合度，根本不符合迪米特、单一原则。所以我觉得现在这种设计正好符合SOA的设计，对于微服务还是值得商榷的。</p>
<p>在2017年6月份，火车票的车次列表架构梳理，我就发现，RIS搜索层分析拆分资源的方式就是系统的极大瓶颈。但是由于系统改动极大，所以就被领导无限推后，我的方案以及相关部门的修改方式都已经以PPT的方式对大家进行了宣讲，大家的总体来说还是赞成的，主要是生成资源的方式是以mq异步的方式推到RES，进行拆分分析转化为资源得方式进行落库，在RIS层直接透出DTC的查询车次信息，显示的速度可以提升30%一上。</p>
<p>有些人提出来DTC推送RES的资源可能消费不完？这是问题么？消费不完是RES系统要解决的问题，那就要努力去消费，分布式等根据现有的查询量分析资源是绰绰有余的。难道这个过程交由RIS去处理就完成了么？</p>
<p>MQ会丢失消息啊？没错mq会丢失消息，但是mq也有一套自己的机制保证消息能够准确发送到目的地，老的mq系统由于公司配置允许丢失，所以会存在，但是接入公司的tubing后，这种情况基本不存在，如果存在可以联系运维去解决。</p>
<p>方案通过后，遇到的问题都不是问题，那可能没有问题，遇到问题就去解决问题，如果不去尝试那再好的方案也无可奈何。我们可以先预估哪些问题，然后对应的解决策略可以做出有效的评估。一步一个脚印，绝对可以做好。</p>
<p>前几天前负责系统人离职后，我用了不到一上午的时间去除RES资源系统的DTC的REDIS配置，改用调用DTC查询缓存的接口，经由测试测试通过后，已经稳定运行在线上。别说什么直接调用缓存快，调用接口会有接口耗时的，都是扯淡，经过查询分析后差距最多都是毫秒级，即使接口要求10ms，也是绰绰有余的。</p>
<p>在数据组已经快2年了，2年间我的感受颇多：三人行，必有我师，不管你的同事平时技术能力多差，也不要小看他；也许你们做着相同的工作，也许你拿到相同的工资，但是要记住士别三日当刮目相待，你们也许在一个起点上，但是后续就不知道了；一定抱有学习的心态，别没事就抬杠，要根据数据事实分析说话。猜测根本不起任何作用。最后一点也是我的最大问题：脾气，一定要控制自己的脾气，与人讨论即使自己是对的，别人极不认可自己的观点的时候也要心平气和，这样才会把事情办好。</p>
<p>来到途牛不到2年期间，自己学到了很多，真心感谢在途牛一起工作的同事们，虽说我们可能有过争吵、甚至闹的不欢不快，但是我觉得从你们身上我看出了自己的不足，还是需要自己去努力的地方。2年前我还是做外包，那时候没有对自己要做哪一个方面的软件规划有清晰的目标，造成自己胡乱择业，还有自己及时回头，希望一切都不晚。</p>
<p>以前由于自己欠下的技术债，后面需要自己加倍的偿还。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DTC数据中心核心爬取数据系统已经由原来DTC+DTG拆分为DTC.LEFT+DTC.GRAB两个系统，一个是用来查询余位的，一个是用来给抢票查询最新余位数据。&lt;/p&gt;
&lt;p&gt;DTC.GRAB已经上线了几个月了，一直运行平稳，迁移拆分几乎没有费多大功夫，是因为抢票查询是独立
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.top/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>DR-JOB分布式定时推送分片系统研究</title>
    <link href="http://dingran.top/2018/03/11/DR-JOB%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9A%E6%97%B6%E6%8E%A8%E9%80%81%E5%88%86%E7%89%87%E7%B3%BB%E7%BB%9F%E7%A0%94%E7%A9%B6/"/>
    <id>http://dingran.top/2018/03/11/DR-JOB分布式定时推送分片系统研究/</id>
    <published>2018-03-11T15:15:02.000Z</published>
    <updated>2018-03-11T15:59:04.243Z</updated>
    
    <content type="html"><![CDATA[<p>新的一年新的开始。</p>
<p>浩浩荡荡的春运已经过去了，春节回家呆了几天就回来了，春运期间火车票数据中心运行基本稳定，没有出现太大的问题。抢票在春运过后调节监控频率到2秒，使得每日的抢票查询的次数达到3.5亿次。这么大的查询量必然不可能都是去爬PC的，幸亏前期添加了其他渠道，保证抢票查询的可用性得到了极大的提升。</p>
<p>年前我就一直在研究TBSCHEDULE的淘宝一款定时分布式分片任务的系统，这个做的真好，很简单的代码就可以实现，网上大堆的介绍文章，说实话，我也没怎么看源码，但是通过其他网友博客的详细介绍，我已经了解了它是怎么运行原理，我将它跑起来进行多次测试，但是它却不符合目前牛抢票的设计要求。tbschedule是根据分片项将分片的任务映射到一台机器上，然后的定时任务就会按照这个分片运行不会再变，但是牛抢票的分片项是需要动态随机的，比如我要按照A~Z26个字母去筛选站站对，那么就有可能会产生问题：这26个站站对每个的数量不是均等的，造成有的机器累死，有的机器闲死。而且tbschedule的taskType分片项最好和当前集群的机器的数量相等，否则假设有100个机器，设置分片项50个，那么其中的分片项只会有50个任务会在机器上执行，其余50个机器会一直等待，直到其中有一个挂了，剩下50个中的一个才会去补上，综上，这是很好开源项目，但是不能为我所用，有点可惜。想到这里，心里有些懊恼，但是它的设计思想我已经学会，我为什么不自己开发一个呢？</p>
<p>说干就干，由于春节过后领导要求需要定制计划，我特意申请了一个星期的时间进行研究开发这个系统，首先搭建框架，基本确定项目技术选型：zookeeper+curator+springmvc+quartz。由于tbschedule的页面实在是太丑了，我研究过xxl-job的代码，发现它的页面比较好用，我直接扒下来它的页面，进行自己开发设计。</p>
<p>万事起步总是困难的，经过2天的摸索，开发已经逐渐走上正轨，期间也遇到了很多问题，但是经过仔细的摸索已经网上查找问题基本都搞定了，经过一周的时间，这个系统的基本功能均已经实现：服务器启动后选举leader，注册本机ip，通过页面创建触发器-任务项-设置leader推送数据计划-设置分片项-启动定时job执行等。这样就可以在leader选举完后，进行分发分片项，给所有的注册机器发送，这里面特别改良了随机平均分配算法，尽量让每个机器拿到的数据进行分散。系统依赖zookeeper所以容灾也有了保证：zookeeper挂了，每个机器无限重连，每个机器依赖leader上次推送的信息继续运行，只是由于zookeeper挂了，不能再获取最新的分配信息了；leader挂了，可以从其他follower里面选举一台机器作为leader，保证任务继续分发；如果某个机器挂了，不会影响数据的分发，这个机器会被摘除，由于分片项本身就是随机的，所以后续的分片项也不会再分配到这个挂的机器上；如果这个机器网络又重连到zookeeper注册中心，那么就会重新注册到zookeeper作为follower继续获取分片项而继续运行，可用性极高。</p>
<p>还是想起了以前的一句话，做事要有想法，有了想法剩下的就是实现了，做事一步一个脚印脚印来。后续将推进这个系统到实际项目中运行，在实际中检验这个系统的可用性。</p>
<p>现在系统基本功能刚实现，很有很多细节问题比如日志查询、分片算法等都需要进行可配置可选择的就会更大提升系统的可用性。</p>
<p>这里要感谢淘宝的开源框架tbschedule，还有xxl-job的源码奉献，没有你们慷慨无私的奉献就不会让我有灵感去设计这个系统，谢谢你们为开源社区做的贡献。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新的一年新的开始。&lt;/p&gt;
&lt;p&gt;浩浩荡荡的春运已经过去了，春节回家呆了几天就回来了，春运期间火车票数据中心运行基本稳定，没有出现太大的问题。抢票在春运过后调节监控频率到2秒，使得每日的抢票查询的次数达到3.5亿次。这么大的查询量必然不可能都是去爬PC的，幸亏前期添加了其他
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.top/tags/%E9%80%94%E7%89%9B/"/>
    
      <category term="分布式" scheme="http://dingran.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>DTC独立抢票查询接口</title>
    <link href="http://dingran.top/2018/01/26/DTC%E7%8B%AC%E7%AB%8B%E6%8A%A2%E7%A5%A8%E6%9F%A5%E8%AF%A2%E6%8E%A5%E5%8F%A3/"/>
    <id>http://dingran.top/2018/01/26/DTC独立抢票查询接口/</id>
    <published>2018-01-26T06:49:27.000Z</published>
    <updated>2018-01-26T07:07:24.761Z</updated>
    
    <content type="html"><![CDATA[<p>来了途牛就一直在负责牛抢票的系统，抢票系统已经做了2代的样子，这一段正是春运的抢票的高峰期，抢票还是在稳定的运行，现在已经调整到30秒一次，但是在老板的眼里，我们要做到一秒一次。</p>
<p>先不说牛抢票系统，就拿不断提升牛抢票的监控能力，那么查询DTC所带来的压力是可想而知的，现在平均一秒DTC的请求在1200个左右，等所有的订单在监控中的时候可以达到1500左右。这1200所有的请求也不都是全部给查询的，因为还有代理ip等资源的限制，为了平衡压力，需要进行限流的措施。</p>
<p>由于这两天的单量比较大，增大DTC的限流后，DTC的某一台机器就瞬间飙红了，造成整个机器的崩溃。也就是说现有的实例数量在负载均衡后也不能支持这么大的流量，现在紧急增加机器也不能了，远水解不了近渴。目前运维推广用docker来部署java应用，于是我就萌生了独立DTC抢票查询接口的想法，这个抢票查询不同于余位查询，抢票查询不需要车次的出发站运行时间、价格、起始站等信息，我精简了返回结果，那么随便就会在解析数据的时候回大幅提高数据的解析速度，为后面实现更高的牛抢票的查询能力做好基础。</p>
<p>于是先申请svn命名DTC.GRAB。开始搭建maven多模块框架，抽出原代码，在原代码的基础上进行精简。精简率达到了80%以上，结构清晰，分层明显，符合软件的设计规则。</p>
<p>目前抢票查询系统部署在sit环境上，需要运行一段时间进行测试等环节，等稳定后将大规模部署在线上，减轻线上的服务器的压力。这个查询系统不算大，而且依赖的资源也很少，不需要DB，仅需要redis缓存就够了。</p>
<p>至于实际效果，拭目以待。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来了途牛就一直在负责牛抢票的系统，抢票系统已经做了2代的样子，这一段正是春运的抢票的高峰期，抢票还是在稳定的运行，现在已经调整到30秒一次，但是在老板的眼里，我们要做到一秒一次。&lt;/p&gt;
&lt;p&gt;先不说牛抢票系统，就拿不断提升牛抢票的监控能力，那么查询DTC所带来的压力是可想
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.top/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>DTC价格整改总结</title>
    <link href="http://dingran.top/2018/01/19/DTC%E4%BB%B7%E6%A0%BC%E6%95%B4%E6%94%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://dingran.top/2018/01/19/DTC价格整改总结/</id>
    <published>2018-01-19T05:37:19.000Z</published>
    <updated>2018-01-19T06:21:48.020Z</updated>
    
    <content type="html"><![CDATA[<p>时间过得很快，18年的一月份马上就过去了，时间真的是不抗混了。还有20多天就回家了，每年的这个时候总是让人望眼欲穿。</p>
<p>之前已经把这个月的计划规划好了，该干什么需要时间等。最让我头疼的是这个价格整改：原来的设计采用的是12306的trainno+出发站号+到达站号，这种查询价格特别头疼的点在于我需要关注这三个数据比如trainno，这个查询竞品是不提供的，就需要现查，还有出发站号和到达站号，还需对经停站进行查询获取，比如小程序的接口就没有返回两个数据。按照这种价格缓存，严重影响查询的速度，不便对竞品等数据进行分析入库。第二个问题就是JD提到总是用户抱怨我们的价格总是比12306高，而且抱怨竞品的价格总是比我们的低，造成客人的流失。所以在现有设计价格由于种种无法再进行更改。</p>
<p>dtc还有一个逻辑比较啰嗦，就是在查询完成后要在循环每个车次判断是否反刷价格，如果有反刷价格就赋值上去，没有就用计算价格。这种想法是没错的，每查一次缓存大概40ms,如果上海-南京260+个车次，260*40=10400ms，这种耗时也是比较大，影响了数据输出给前端，造成前端的数据无法实时更新。</p>
<p>DTC新价格新方案采用的是车次-出发站-到达站这种缓存类型。这种好处就是即使12306进行运行图调整或者取消车次，都无法影响我这边的价格，而老的价格方案就无法应对。新方案兼容pc端、微信端、小程序端和竞品的价格抓取入库，进行有效的分类操作，处理逻辑相同方便后面进行统一管理。</p>
<p>现在的价格主要是通过微信端和小程序的价格，因为这两个接口访问直接返回价格，不需要额外抓取，节省了大批量的代理ip的消耗。在余位和价格整合的过程中自动对车次的相应席位进行计算处理：比如硬卧计算下铺等操作，在整合的过程中直接赋值，在数据输送给前端的过程中不需要在拆开，反刷的价格也是在这个过程中赋值的，省去循环查询每个车次是否有反刷价格。</p>
<p>即使这样也无法应对JD的需求，比如客人进行下了2018-01-01上海-北京的T1的硬卧花了200块，而实际是190的下铺，我们只会反刷2018-01-01这一天的硬卧价格为190，1.2号之后还是计算的价格200，为此在新方案的同时，还需要反刷价格的同时能够进行价格的推算操作：即在反刷价格的同时异步进行30天的价格判断，进行反刷价格是否可以赋值。这样只要一个客人下单后，这预售期内的这个车次的硬卧下铺价格都是真实的下铺价格，省去了客人的烦恼。</p>
<p>还有就是最近12306采取的封IP可谓无所不用其极。用代理ip抓的价格已经无法确保准确，经常会出现一个车次有三个价格，只抓下来一个价格，造成另外2个席位无法正常售卖。所以在更新价格的时候需要额外注意：即如果发现现有缓存的价格有4个席位，而抓下来只有一个的这种情况：就把抓下来的价格更新到缓存里，缓存价格还是保证有4个，这样不会对售卖坐等有任何影响。而老的价格策略简单粗暴，直接覆盖最新的价格，也就是只有一个，那么其他的坐等不显示价格，就无法售卖早晨客人的投诉；如果缓存价格的个数小于抓袭来的价格，直接更新新抓下来的价格。</p>
<p>经过以上的改动，可以保证价格的准确性，高可用性、高温定型。在赋值价格的时候如果当天没有抓下来，直接取最近跟新的价格进行赋值。取消原逻辑进行价格推算的逻辑，造成缓存大量使用流量超标或者DB压力增大。</p>
<p>此次上线也是一波三折，第一次上线，由于价格需要新存一张表，造成大量价格数据的插入，造成极大的数据库压力，刚上线，就看到数据库从库的延迟瞬间增加，无奈，只好关闭新价格逻辑，上线回滚。第二次是因为第二天有人紧急上线，初步分析是DTC这边的读写分离问题并且增加在插入数据库的时候进行限流操作，一切完成后发布上线，上线后，数据库压力没有多大问题，但是在elk日志却显示很多查询失败的异常，经过排查发现是DTC当前大多数采用的是ibatis的写法即namespace+sqlid的这总，不是采用mybatis的mapper映射到接口的方式，这种进行读写判断的时候极其容易产生异常，为此我将读写分离的代码先还原，保持插入db的限流的可控开关再次上线。由于30的价格有几百万，所以为了防止短时间大批量插入，我在diamond里面配置规定时间插入的数量。随着价格不断完善，后面的抓取的价格会越来越少，保证缓存的价格完整准确。后面讲去掉这个限流开关。</p>
<p>经过一天的观察已经多次测试，现有的价格逻辑可以极大提高系统的吞吐量。最大的影响就是保证了价格的安全性，不会影响火车票的正常售卖。后面将对同站站对的车次进行价格的判断，因为同站站对的相同铺等80%左右的价格是一致的，也就是说可以采用相同的反刷价格。</p>
<p>这段是时间有点累，休息、休息一下。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时间过得很快，18年的一月份马上就过去了，时间真的是不抗混了。还有20多天就回家了，每年的这个时候总是让人望眼欲穿。&lt;/p&gt;
&lt;p&gt;之前已经把这个月的计划规划好了，该干什么需要时间等。最让我头疼的是这个价格整改：原来的设计采用的是12306的trainno+出发站号+到达站
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.top/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>Disruptor的使用</title>
    <link href="http://dingran.top/2018/01/08/Disruptor%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://dingran.top/2018/01/08/Disruptor的使用/</id>
    <published>2018-01-08T09:36:21.000Z</published>
    <updated>2018-01-08T09:43:55.585Z</updated>
    
    <content type="html"><![CDATA[<p>最近由于京东的不断推广，牛抢票的订单数疯长，对目前的系统造成了很大的压力。经过不断摸索改为分布式方式平衡压力，但是在多线程一下处理订单还是比较耗时的，线程实在是太宝贵了，所以急需一种框架能够大幅提高订单处理能力。</p>
<p>最近看到并发框架Disruptor，单线程一秒种可以处理600W订单，看到这么牛逼的字眼，总会让我精神一动，它怎么能这么牛逼呢？这里不讲解实现原理，有兴趣可以参考下面资料：<a href="http://ifeve.com/disruptor/" target="_blank" rel="external">http://ifeve.com/disruptor/</a></p>
<p>Disruptor是生产者消费者模式所以下面给出例子：<br><a href="http://blog.csdn.net/java1993666/article/details/72828010" target="_blank" rel="external">http://blog.csdn.net/java1993666/article/details/72828010</a></p>
<p>容我在细细研究一下它的实现原理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近由于京东的不断推广，牛抢票的订单数疯长，对目前的系统造成了很大的压力。经过不断摸索改为分布式方式平衡压力，但是在多线程一下处理订单还是比较耗时的，线程实在是太宝贵了，所以急需一种框架能够大幅提高订单处理能力。&lt;/p&gt;
&lt;p&gt;最近看到并发框架Disruptor，单线程一秒
    
    </summary>
    
      <category term="并发" scheme="http://dingran.top/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="并发" scheme="http://dingran.top/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Spring+Mybatis读写分离</title>
    <link href="http://dingran.top/2018/01/02/Spring-Mybatis%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
    <id>http://dingran.top/2018/01/02/Spring-Mybatis读写分离/</id>
    <published>2018-01-02T09:04:26.000Z</published>
    <updated>2018-01-02T09:35:30.999Z</updated>
    
    <content type="html"><![CDATA[<p>2018年第一天上班，元旦去了杭州带着老婆去西湖玩了一圈，为了防止系统发生意外，还特意戴上我的电脑，这几天不断有JD的问题。抢票取消反馈有超时的问题。回来第一天就是排查这个问题，经过查询日志后发现是对DB的频繁更新操作造成的。由于之前迁入DDG，直接将DataSource连接master库，没有连接slave。造成所有的压力全部压在主库上。所以第一步就是先进行读写分离。</p>
<p>说起来容易，实施起来比较困难。找了一堆文档，写的都是有上文没有下文的。经过不断摸索终于找到了一个使用mybatis的plugin的方法实现了这个动态切换dataSource的方法，现在总结如下：</p>
<p>建立一个plugin 用来做拦截mybatis的mapper，很重要：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD SQL Map Config 3.0//EN"</span></div><div class="line">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"top.dingran.train.sgt.rwAspect.DynamicPlugin"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>实现拦截类，又来判断走READ OR WRITE：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.ibatis.executor.Executor;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.executor.keygen.SelectKeyGenerator;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.BoundSql;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.MappedStatement;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.SqlCommandType;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.*;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.session.ResultHandler;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.session.RowBounds;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.transaction.support.TransactionSynchronizationManager;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Locale;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * 动态判断 是否走slave 库还是master库</div><div class="line"> * </div><div class="line"> * User: dingran</div><div class="line"> * Date: 2016-08-10 11:09</div><div class="line"> * Desc:</div><div class="line"> */</div><div class="line"><span class="meta">@Intercepts</span>(&#123; <span class="meta">@Signature</span>(type = Executor.class, method = <span class="string">"update"</span>, args = &#123; MappedStatement.class,</div><div class="line">                                                                            Object.class &#125;),</div><div class="line">              <span class="meta">@Signature</span>(type = Executor.class, method = <span class="string">"query"</span>, args = &#123; MappedStatement.class,</div><div class="line">                                                                           Object.class,</div><div class="line">                                                                           RowBounds.class,</div><div class="line">                                                                           ResultHandler.class &#125;) &#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicPlugin</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger                             logger   = LoggerFactory</div><div class="line">        .getLogger(DynamicPlugin.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String                               REGEX    = <span class="string">".*insert\\u0020.*|.*delete\\u0020.*|.*update\\u0020.*"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, DynamicDataSourceGlobal&gt; cacheMap = <span class="keyword">new</span> ConcurrentHashMap&lt;String, DynamicDataSourceGlobal&gt;();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> synchronizationActive = TransactionSynchronizationManager.isSynchronizationActive();</div><div class="line">        <span class="keyword">if</span> (!synchronizationActive) &#123;</div><div class="line">            Object[] objects = invocation.getArgs();</div><div class="line">            MappedStatement ms = (MappedStatement) objects[<span class="number">0</span>];</div><div class="line"></div><div class="line">            DynamicDataSourceGlobal dynamicDataSourceGlobal = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> ((dynamicDataSourceGlobal = cacheMap.get(ms.getId())) == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">//读方法</span></div><div class="line">                <span class="keyword">if</span> (ms.getSqlCommandType().equals(SqlCommandType.SELECT)) &#123;</div><div class="line">                    <span class="comment">//!selectKey 为自增id查询主键(SELECT LAST_INSERT_ID() )方法，使用主库</span></div><div class="line">                    <span class="keyword">if</span> (ms.getId().contains(SelectKeyGenerator.SELECT_KEY_SUFFIX)) &#123;</div><div class="line">                        dynamicDataSourceGlobal = DynamicDataSourceGlobal.WRITE;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        BoundSql boundSql = ms.getSqlSource().getBoundSql(objects[<span class="number">1</span>]);</div><div class="line">                        String sql = boundSql.getSql().toLowerCase(Locale.CHINA)</div><div class="line">                            .replaceAll(<span class="string">"[\\t\\n\\r]"</span>, <span class="string">" "</span>);</div><div class="line">                        <span class="keyword">if</span> (sql.matches(REGEX)) &#123;</div><div class="line">                            dynamicDataSourceGlobal = DynamicDataSourceGlobal.WRITE;</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            dynamicDataSourceGlobal = DynamicDataSourceGlobal.READ;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    dynamicDataSourceGlobal = DynamicDataSourceGlobal.WRITE;</div><div class="line">                &#125;</div><div class="line">                logger.warn(<span class="string">"设置方法[&#123;&#125;] use [&#123;&#125;] Strategy, SqlCommandType [&#123;"</span></div><div class="line">                            + ms.getSqlCommandType().name() + <span class="string">"&#125;].."</span>,</div><div class="line">                    ms.getId(), dynamicDataSourceGlobal.name());</div><div class="line">                cacheMap.put(ms.getId(), dynamicDataSourceGlobal);</div><div class="line">            &#125;</div><div class="line">            DynamicDataSourceHolder.putDataSource(dynamicDataSourceGlobal);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> invocation.proceed();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (target <span class="keyword">instanceof</span> Executor) &#123;</div><div class="line">            <span class="keyword">return</span> Plugin.wrap(target, <span class="keyword">this</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> target;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</div><div class="line">        <span class="comment">//</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当前线程保存dataSource信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 当前线程设置threadlocal 和获取数据源信息</div><div class="line"> * User: dingran</div><div class="line"> * Date: 2018-01-02 13:35</div><div class="line"> * Desc:</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceHolder</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;DynamicDataSourceGlobal&gt; holder = <span class="keyword">new</span> ThreadLocal&lt;DynamicDataSourceGlobal&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putDataSource</span><span class="params">(DynamicDataSourceGlobal dataSource)</span> </span>&#123;</div><div class="line">        holder.set(dataSource);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DynamicDataSourceGlobal <span class="title">getDataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> holder.get();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearDataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        holder.remove();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>工具枚举类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 定义枚举类型，读写</div><div class="line"> * Created by dingran on 2018/1/2.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> DynamicDataSourceGlobal &#123;</div><div class="line">                                     READ, WRITE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>设置主从数据源，用于根据mybatis的sqlId进行切换：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Random;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 动态数据源 配置</div><div class="line"> * User: dingran</div><div class="line"> * Date: 2018-01-02 10:56</div><div class="line"> * Desc: 动态数据源实现读写分离</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Object            writeDataSource;                                <span class="comment">//写数据源</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;Object&gt;      readDataSources;                                <span class="comment">//多个读数据源</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>               readDataSourceSize;                             <span class="comment">//读数据源个数</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>               readDataSourcePollPattern = <span class="number">0</span>;                  <span class="comment">//获取读数据源方式，0：随机，1：轮询</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> AtomicLong        counter                   = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Long MAX_POOL                  = Long.MAX_VALUE;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock        lock                      = <span class="keyword">new</span> ReentrantLock();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.writeDataSource == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Property 'writeDataSource' is required"</span>);</div><div class="line">        &#125;</div><div class="line">        setDefaultTargetDataSource(writeDataSource);</div><div class="line">        Map&lt;Object, Object&gt; targetDataSources = <span class="keyword">new</span> HashMap&lt;Object, Object&gt;();</div><div class="line">        targetDataSources.put(DynamicDataSourceGlobal.WRITE.name(), writeDataSource);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.readDataSources == <span class="keyword">null</span>) &#123;</div><div class="line">            readDataSourceSize = <span class="number">0</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; readDataSources.size(); i++) &#123;</div><div class="line">                targetDataSources.put(DynamicDataSourceGlobal.READ.name() + i,</div><div class="line">                    readDataSources.get(i));</div><div class="line">            &#125;</div><div class="line">            readDataSourceSize = readDataSources.size();</div><div class="line">        &#125;</div><div class="line">        setTargetDataSources(targetDataSources);</div><div class="line">        <span class="keyword">super</span>.afterPropertiesSet();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        DynamicDataSourceGlobal dynamicDataSourceGlobal = DynamicDataSourceHolder.getDataSource();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (dynamicDataSourceGlobal == <span class="keyword">null</span></div><div class="line">            || dynamicDataSourceGlobal == DynamicDataSourceGlobal.WRITE</div><div class="line">            || readDataSourceSize &lt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> DynamicDataSourceGlobal.WRITE.name();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> index = <span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (readDataSourcePollPattern == <span class="number">1</span>) &#123;</div><div class="line">            <span class="comment">//轮询方式</span></div><div class="line">            <span class="keyword">long</span> currValue = counter.incrementAndGet();</div><div class="line">            <span class="keyword">if</span> ((currValue + <span class="number">1</span>) &gt;= MAX_POOL) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    lock.lock();</div><div class="line">                    <span class="keyword">if</span> ((currValue + <span class="number">1</span>) &gt;= MAX_POOL) &#123;</div><div class="line">                        counter.set(<span class="number">0</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                    lock.unlock();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            index = (<span class="keyword">int</span>) (currValue % readDataSourceSize);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//随机方式</span></div><div class="line"></div><div class="line">            index = <span class="keyword">new</span> Random().nextInt(readDataSourceSize);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dynamicDataSourceGlobal.name() + index;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWriteDataSource</span><span class="params">(Object writeDataSource)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.writeDataSource = writeDataSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadDataSources</span><span class="params">(List&lt;Object&gt; readDataSources)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.readDataSources = readDataSources;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadDataSourcePollPattern</span><span class="params">(<span class="keyword">int</span> readDataSourcePollPattern)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.readDataSourcePollPattern = readDataSourcePollPattern;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">       <span class="attr">xmlns:jee</span>=<span class="string">"http://www.springframework.org/schema/jee"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd </div><div class="line">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</div><div class="line">       http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd</div><div class="line">       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd"&gt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--注：不要配置id,必须使用name 标记连接池bean--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"SGT_GTA-OCS-MASTER-DB"</span> <span class="attr">class</span>=<span class="string">"C3P0DataSourceProxy"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"SGT_GTA-OCS-SLAVE-DB"</span> <span class="attr">class</span>=<span class="string">"C3P0DataSourceProxy"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"DynamicDataSource"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"writeDataSource"</span> <span class="attr">ref</span>=<span class="string">"SGT_GTA-OCS-MASTER-DB"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"readDataSources"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"SGT_GTA-OCS-SLAVE-DB"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--轮询方式--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"readDataSourcePollPattern"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultTargetDataSource"</span> <span class="attr">ref</span>=<span class="string">"SGT_GTA-OCS-MASTER-DB"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 自动扫描mapping.xml文件 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath*:config/database/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:config/spring/config-plugin.xml"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"dao"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- (事务管理)transaction manager, use JtaTransactionManager for global tx --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></div><div class="line">          <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>由于代码是在开发项目上拉下来的，不能带有公司标志，所以有些package自己去改好。<br>另外特别注意一点：我们自己写mybatis的sql方法时候最好统一，比如查询 list用find 单个用get，update更新，delete删除，这样保证了一致性方便维护。</p>
<p>网上还有很多其他的方法，选择一种适合自己的最好，下面这个链接就有4种方法，我用的就是最后一种，大家可以借鉴一下：<br><a href="https://www.jianshu.com/p/2222257f96d3" target="_blank" rel="external">https://www.jianshu.com/p/2222257f96d3</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2018年第一天上班，元旦去了杭州带着老婆去西湖玩了一圈，为了防止系统发生意外，还特意戴上我的电脑，这几天不断有JD的问题。抢票取消反馈有超时的问题。回来第一天就是排查这个问题，经过查询日志后发现是对DB的频繁更新操作造成的。由于之前迁入DDG，直接将DataSource连
    
    </summary>
    
      <category term="mybatis" scheme="http://dingran.top/categories/mybatis/"/>
    
    
      <category term="spring" scheme="http://dingran.top/tags/spring/"/>
    
      <category term="mybatis" scheme="http://dingran.top/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>年终总结</title>
    <link href="http://dingran.top/2017/12/26/2017%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://dingran.top/2017/12/26/2017年终总结/</id>
    <published>2017-12-26T08:05:00.000Z</published>
    <updated>2017-12-26T08:33:51.043Z</updated>
    
    <content type="html"><![CDATA[<pre><code>还有不到一周的时间就到2018年了，真是快啊，遥想当年上学的时候简直度日如年啊，现在的日子真是不好混了。
</code></pre><p>来到途牛已经已经一年又4个月了，这段时间里时间貌似一咋眼就过来了，人来人往。截止到现在数据中心负责的数据系统已经稳定运行了好长一段时间了，牛抢票也完全迁移到docker上了，不再有线程池等性能瓶颈。现在唯一的压力就是DTC的查询能力和代理ip的质量问题。现在DTC集中所有了火车票的查询，随着京东以及翼支付等相关分销商的接入，查询倍增，所面临的挑战也不断增加。至少目前一切安然无恙。</p>
<p>21号，公司进行了大规模裁员，研发裁掉了很多，说是为了降低成本。这种大规模裁研发的倒是很少见啊，不幸的是德良中枪了，通过这件事说明了一个问题：努力成为可以取代任何人的人，而不要被任何人所取代。</p>
<p>过几天元旦准备出去玩玩，来了上海好几年，说真的真没有认真出去玩玩。目前身在OTA行业居然也心无所动，说明我也够懒得呀。现在周边溜达溜达吧，人生真应该活的多姿多彩，否则天天三点一线真的是很无聊，看看产品经理蒋老师就知道人家出去玩了好多次了，真是潇洒哦。</p>
<p>2017年即将过去，目前看来今年干的还是比较圆满，负责的系统都稳定的运行在线上，很少出现波动了，容灾、预警等功能也相应到位。抢票也开始时时刻刻的运行着，可以在第一时间发起出票。总起来说这一年我所学到的东西是前3年的总和吧。前三年主要是在摸索怎么做？研究的理论东西，有些理论还不懂，来途牛的这一年对系统改动了好多，也遇到了好多坑，不过系统的性能也提升了好多，益大于弊。</p>
<p>2018即将到来，这一年是关键的一年，我将继续在技术的路上疾行，多研究底层的实现，将以前欠下的技术债努力的往回补，目前自己与大神还相差甚远，希望自己不忘初心，走出自己的一番天地，干出自己的一番事业。</p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;还有不到一周的时间就到2018年了，真是快啊，遥想当年上学的时候简直度日如年啊，现在的日子真是不好混了。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;来到途牛已经已经一年又4个月了，这段时间里时间貌似一咋眼就过来了，人来人往。截止到现在数据中心负责的数据系统已经稳定运行
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.top/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
</feed>
