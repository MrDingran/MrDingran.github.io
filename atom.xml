<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>崎岖的路,走出自己的脚步</title>
  <subtitle>崎岖的路,走出自己的脚步</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dingran.top/"/>
  <updated>2018-04-27T05:03:25.339Z</updated>
  <id>http://dingran.top/</id>
  
  <author>
    <name>D.R</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RES资源系统去除直接调用DTC缓存更改</title>
    <link href="http://dingran.top/2018/04/27/RES%E8%B5%84%E6%BA%90%E7%B3%BB%E7%BB%9F%E5%8E%BB%E9%99%A4%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8DTC%E7%BC%93%E5%AD%98%E6%9B%B4%E6%94%B9/"/>
    <id>http://dingran.top/2018/04/27/RES资源系统去除直接调用DTC缓存更改/</id>
    <published>2018-04-27T03:03:10.000Z</published>
    <updated>2018-04-27T05:03:25.339Z</updated>
    
    <content type="html"><![CDATA[<p>DTC数据中心核心爬取数据系统已经由原来DTC+DTG拆分为DTC.LEFT+DTC.GRAB两个系统，一个是用来查询余位的，一个是用来给抢票查询最新余位数据。</p>
<p>DTC.GRAB已经上线了几个月了，一直运行平稳，迁移拆分几乎没有费多大功夫，是因为抢票查询是独立在原来DTC的代码里，没有DB依赖，只依赖缓存，由于抢票的查询QPS比较高，会影响余位的返回成功率，所以单独部署。</p>
<p>DTC.LEFT经过一个月的迁移，将所有的原来DTC包含的功能全部迁往DTC.LEFT，然后对代码进行进一步整理，使得原来的DTC.DTC的java总行数由90000行降至不到30000行，功能却不减反增。遇到问题后查询问题也是非常方便的，应用软件设计原则以及maven分层解耦的思想设计的架构在代码管理上也是非常清爽。</p>
<p>在4月初，总体设计完毕，已经sst环境稳定运行了一段时间。总体来看，查询速度明显提升，几乎不会出现查询余位不显示价格的问题，减少了一大批由于价格的问题导致查词列表不显示的问题。但是在上sit上却遇到了问题，原来RES资源系统在查询DTC缓存的时候直接连接redis，直接查询DTC的缓存格式，而不是走DTC的接口，由于原来的缓存设计复杂，当车次较多的时候会造成redis的发送流量增加几倍以上导致redis返回过慢导致redis崩溃，这种大value的问题也是急需更改的问题，这次DTC.LEFT上线后我对DTC的缓存格式进行了重新的设计，缓存的传输下降了50%以上。但是res这么调用就会导致对度假打包业务的崩溃，其中有一段业务就是直接调用DTC缓存查询价格、余位的。这么强的耦合当初添加进来是很大的败笔。</p>
<p>在说一下系统的分工问题：DTC.LEFT是用来爬取12306的车次系统，落入的数据也是车次的信息，比如车次站站对信息、经停站信息、价格信息，别无其他。而RES是静态资源系统，它和DTC.LEFT所落入的数据是不一样的，RES里面包含资源信息，所谓资源就是一个车次的所有信息细致到席位的价格上，由公司公共资源系统分配资源id，然后保存到DB里，这个信息是公司的其他部门调用的基础信息比如度假、打包等查询的信息均已资源id进行查询；RES还维护了公司的火车票的POI信息，也就是某个城市下有哪些车站、车站的编码、车站的code等由公司公共部门统一维护，这些信息在DTC系统里面根本用不上，DTC所使用的是三字码也只有三字码，为什么呢？因为12306页只接受三字码，所以输入的城市也只是根据城市查找某个车站，再根据车站的三字码进行查询。一般前端暴露的POI数据都是三字码信息，即客人查询火车票选择的都是“站”信息，不是城市，但是打包度假等查询的却是以城市来查询的，这也是区别所在。12306虽然查询的是以站的方式查询，但是返回的信息却是以城市方式展示的，比如输入上海，返回的却是上海所有的车站的车次信息，还有特殊的，输入瓦房店到大连的车次和瓦房店西到大连的车次信息却是不同的，明明是同城车站怎么返回还不一样的呢？这是12306的规则，我们只能适配，所以有些规则并不是一成不变的。</p>
<p>话说回来，前任离职司机说要将两个系统合二为一，弱化资源系统，首先我的观点是根本弱化不了，也合并不了，因为系统功能分工是不同的：资源是公司所有的系统传输查询的根本，是公司的基本规则，无法弱化，如果将DTC和RES合到一起，只会陡增复杂度，增加系统之间的耦合度，根本不符合迪米特、单一原则。所以我觉得现在这种设计正好符合SOA的设计，对于微服务还是值得商榷的。</p>
<p>在2017年6月份，火车票的车次列表架构梳理，我就发现，RIS搜索层分析拆分资源的方式就是系统的极大瓶颈。但是由于系统改动极大，所以就被领导无限推后，我的方案以及相关部门的修改方式都已经以PPT的方式对大家进行了宣讲，大家的总体来说还是赞成的，主要是生成资源的方式是以mq异步的方式推到RES，进行拆分分析转化为资源得方式进行落库，在RIS层直接透出DTC的查询车次信息，显示的速度可以提升30%一上。</p>
<p>有些人提出来DTC推送RES的资源可能消费不完？这是问题么？消费不完是RES系统要解决的问题，那就要努力去消费，分布式等根据现有的查询量分析资源是绰绰有余的。难道这个过程交由RIS去处理就完成了么？</p>
<p>MQ会丢失消息啊？没错mq会丢失消息，但是mq也有一套自己的机制保证消息能够准确发送到目的地，老的mq系统由于公司配置允许丢失，所以会存在，但是接入公司的tubing后，这种情况基本不存在，如果存在可以联系运维去解决。</p>
<p>方案通过后，遇到的问题都不是问题，那可能没有问题，遇到问题就去解决问题，如果不去尝试那再好的方案也无可奈何。我们可以先预估哪些问题，然后对应的解决策略可以做出有效的评估。一步一个脚印，绝对可以做好。</p>
<p>前几天前负责系统人离职后，我用了不到一上午的时间去除RES资源系统的DTC的REDIS配置，改用调用DTC查询缓存的接口，经由测试测试通过后，已经稳定运行在线上。别说什么直接调用缓存快，调用接口会有接口耗时的，都是扯淡，经过查询分析后差距最多都是毫秒级，即使接口要求10ms，也是绰绰有余的。</p>
<p>在数据组已经快2年了，2年间我的感受颇多：三人行，必有我师，不管你的同事平时技术能力多差，也不要小看他；也许你们做着相同的工作，也许你拿到相同的工资，但是要记住士别三日当刮目相待，你们也许在一个起点上，但是后续就不知道了；一定抱有学习的心态，别没事就抬杠，要根据数据事实分析说话。猜测根本不起任何作用。最后一点也是我的最大问题：脾气，一定要控制自己的脾气，与人讨论即使自己是对的，别人极不认可自己的观点的时候也要心平气和，这样才会把事情办好。</p>
<p>来到途牛不到2年期间，自己学到了很多，真心感谢在途牛一起工作的同事们，虽说我们可能有过争吵、甚至闹的不欢不快，但是我觉得从你们身上我看出了自己的不足，还是需要自己去努力的地方。2年前我还是做外包，那时候没有对自己要做哪一个方面的软件规划有清晰的目标，造成自己胡乱择业，还有自己及时回头，希望一切都不晚。</p>
<p>以前由于自己欠下的技术债，后面需要自己加倍的偿还。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DTC数据中心核心爬取数据系统已经由原来DTC+DTG拆分为DTC.LEFT+DTC.GRAB两个系统，一个是用来查询余位的，一个是用来给抢票查询最新余位数据。&lt;/p&gt;
&lt;p&gt;DTC.GRAB已经上线了几个月了，一直运行平稳，迁移拆分几乎没有费多大功夫，是因为抢票查询是独立
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.top/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>DR-JOB分布式定时推送分片系统研究</title>
    <link href="http://dingran.top/2018/03/11/DR-JOB%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9A%E6%97%B6%E6%8E%A8%E9%80%81%E5%88%86%E7%89%87%E7%B3%BB%E7%BB%9F%E7%A0%94%E7%A9%B6/"/>
    <id>http://dingran.top/2018/03/11/DR-JOB分布式定时推送分片系统研究/</id>
    <published>2018-03-11T15:15:02.000Z</published>
    <updated>2018-03-11T15:59:04.243Z</updated>
    
    <content type="html"><![CDATA[<p>新的一年新的开始。</p>
<p>浩浩荡荡的春运已经过去了，春节回家呆了几天就回来了，春运期间火车票数据中心运行基本稳定，没有出现太大的问题。抢票在春运过后调节监控频率到2秒，使得每日的抢票查询的次数达到3.5亿次。这么大的查询量必然不可能都是去爬PC的，幸亏前期添加了其他渠道，保证抢票查询的可用性得到了极大的提升。</p>
<p>年前我就一直在研究TBSCHEDULE的淘宝一款定时分布式分片任务的系统，这个做的真好，很简单的代码就可以实现，网上大堆的介绍文章，说实话，我也没怎么看源码，但是通过其他网友博客的详细介绍，我已经了解了它是怎么运行原理，我将它跑起来进行多次测试，但是它却不符合目前牛抢票的设计要求。tbschedule是根据分片项将分片的任务映射到一台机器上，然后的定时任务就会按照这个分片运行不会再变，但是牛抢票的分片项是需要动态随机的，比如我要按照A~Z26个字母去筛选站站对，那么就有可能会产生问题：这26个站站对每个的数量不是均等的，造成有的机器累死，有的机器闲死。而且tbschedule的taskType分片项最好和当前集群的机器的数量相等，否则假设有100个机器，设置分片项50个，那么其中的分片项只会有50个任务会在机器上执行，其余50个机器会一直等待，直到其中有一个挂了，剩下50个中的一个才会去补上，综上，这是很好开源项目，但是不能为我所用，有点可惜。想到这里，心里有些懊恼，但是它的设计思想我已经学会，我为什么不自己开发一个呢？</p>
<p>说干就干，由于春节过后领导要求需要定制计划，我特意申请了一个星期的时间进行研究开发这个系统，首先搭建框架，基本确定项目技术选型：zookeeper+curator+springmvc+quartz。由于tbschedule的页面实在是太丑了，我研究过xxl-job的代码，发现它的页面比较好用，我直接扒下来它的页面，进行自己开发设计。</p>
<p>万事起步总是困难的，经过2天的摸索，开发已经逐渐走上正轨，期间也遇到了很多问题，但是经过仔细的摸索已经网上查找问题基本都搞定了，经过一周的时间，这个系统的基本功能均已经实现：服务器启动后选举leader，注册本机ip，通过页面创建触发器-任务项-设置leader推送数据计划-设置分片项-启动定时job执行等。这样就可以在leader选举完后，进行分发分片项，给所有的注册机器发送，这里面特别改良了随机平均分配算法，尽量让每个机器拿到的数据进行分散。系统依赖zookeeper所以容灾也有了保证：zookeeper挂了，每个机器无限重连，每个机器依赖leader上次推送的信息继续运行，只是由于zookeeper挂了，不能再获取最新的分配信息了；leader挂了，可以从其他follower里面选举一台机器作为leader，保证任务继续分发；如果某个机器挂了，不会影响数据的分发，这个机器会被摘除，由于分片项本身就是随机的，所以后续的分片项也不会再分配到这个挂的机器上；如果这个机器网络又重连到zookeeper注册中心，那么就会重新注册到zookeeper作为follower继续获取分片项而继续运行，可用性极高。</p>
<p>还是想起了以前的一句话，做事要有想法，有了想法剩下的就是实现了，做事一步一个脚印脚印来。后续将推进这个系统到实际项目中运行，在实际中检验这个系统的可用性。</p>
<p>现在系统基本功能刚实现，很有很多细节问题比如日志查询、分片算法等都需要进行可配置可选择的就会更大提升系统的可用性。</p>
<p>这里要感谢淘宝的开源框架tbschedule，还有xxl-job的源码奉献，没有你们慷慨无私的奉献就不会让我有灵感去设计这个系统，谢谢你们为开源社区做的贡献。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新的一年新的开始。&lt;/p&gt;
&lt;p&gt;浩浩荡荡的春运已经过去了，春节回家呆了几天就回来了，春运期间火车票数据中心运行基本稳定，没有出现太大的问题。抢票在春运过后调节监控频率到2秒，使得每日的抢票查询的次数达到3.5亿次。这么大的查询量必然不可能都是去爬PC的，幸亏前期添加了其他
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.top/tags/%E9%80%94%E7%89%9B/"/>
    
      <category term="分布式" scheme="http://dingran.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>DTC独立抢票查询接口</title>
    <link href="http://dingran.top/2018/01/26/DTC%E7%8B%AC%E7%AB%8B%E6%8A%A2%E7%A5%A8%E6%9F%A5%E8%AF%A2%E6%8E%A5%E5%8F%A3/"/>
    <id>http://dingran.top/2018/01/26/DTC独立抢票查询接口/</id>
    <published>2018-01-26T06:49:27.000Z</published>
    <updated>2018-01-26T07:07:24.761Z</updated>
    
    <content type="html"><![CDATA[<p>来了途牛就一直在负责牛抢票的系统，抢票系统已经做了2代的样子，这一段正是春运的抢票的高峰期，抢票还是在稳定的运行，现在已经调整到30秒一次，但是在老板的眼里，我们要做到一秒一次。</p>
<p>先不说牛抢票系统，就拿不断提升牛抢票的监控能力，那么查询DTC所带来的压力是可想而知的，现在平均一秒DTC的请求在1200个左右，等所有的订单在监控中的时候可以达到1500左右。这1200所有的请求也不都是全部给查询的，因为还有代理ip等资源的限制，为了平衡压力，需要进行限流的措施。</p>
<p>由于这两天的单量比较大，增大DTC的限流后，DTC的某一台机器就瞬间飙红了，造成整个机器的崩溃。也就是说现有的实例数量在负载均衡后也不能支持这么大的流量，现在紧急增加机器也不能了，远水解不了近渴。目前运维推广用docker来部署java应用，于是我就萌生了独立DTC抢票查询接口的想法，这个抢票查询不同于余位查询，抢票查询不需要车次的出发站运行时间、价格、起始站等信息，我精简了返回结果，那么随便就会在解析数据的时候回大幅提高数据的解析速度，为后面实现更高的牛抢票的查询能力做好基础。</p>
<p>于是先申请svn命名DTC.GRAB。开始搭建maven多模块框架，抽出原代码，在原代码的基础上进行精简。精简率达到了80%以上，结构清晰，分层明显，符合软件的设计规则。</p>
<p>目前抢票查询系统部署在sit环境上，需要运行一段时间进行测试等环节，等稳定后将大规模部署在线上，减轻线上的服务器的压力。这个查询系统不算大，而且依赖的资源也很少，不需要DB，仅需要redis缓存就够了。</p>
<p>至于实际效果，拭目以待。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来了途牛就一直在负责牛抢票的系统，抢票系统已经做了2代的样子，这一段正是春运的抢票的高峰期，抢票还是在稳定的运行，现在已经调整到30秒一次，但是在老板的眼里，我们要做到一秒一次。&lt;/p&gt;
&lt;p&gt;先不说牛抢票系统，就拿不断提升牛抢票的监控能力，那么查询DTC所带来的压力是可想
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.top/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>DTC价格整改总结</title>
    <link href="http://dingran.top/2018/01/19/DTC%E4%BB%B7%E6%A0%BC%E6%95%B4%E6%94%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://dingran.top/2018/01/19/DTC价格整改总结/</id>
    <published>2018-01-19T05:37:19.000Z</published>
    <updated>2018-01-19T06:21:48.020Z</updated>
    
    <content type="html"><![CDATA[<p>时间过得很快，18年的一月份马上就过去了，时间真的是不抗混了。还有20多天就回家了，每年的这个时候总是让人望眼欲穿。</p>
<p>之前已经把这个月的计划规划好了，该干什么需要时间等。最让我头疼的是这个价格整改：原来的设计采用的是12306的trainno+出发站号+到达站号，这种查询价格特别头疼的点在于我需要关注这三个数据比如trainno，这个查询竞品是不提供的，就需要现查，还有出发站号和到达站号，还需对经停站进行查询获取，比如小程序的接口就没有返回两个数据。按照这种价格缓存，严重影响查询的速度，不便对竞品等数据进行分析入库。第二个问题就是JD提到总是用户抱怨我们的价格总是比12306高，而且抱怨竞品的价格总是比我们的低，造成客人的流失。所以在现有设计价格由于种种无法再进行更改。</p>
<p>dtc还有一个逻辑比较啰嗦，就是在查询完成后要在循环每个车次判断是否反刷价格，如果有反刷价格就赋值上去，没有就用计算价格。这种想法是没错的，每查一次缓存大概40ms,如果上海-南京260+个车次，260*40=10400ms，这种耗时也是比较大，影响了数据输出给前端，造成前端的数据无法实时更新。</p>
<p>DTC新价格新方案采用的是车次-出发站-到达站这种缓存类型。这种好处就是即使12306进行运行图调整或者取消车次，都无法影响我这边的价格，而老的价格方案就无法应对。新方案兼容pc端、微信端、小程序端和竞品的价格抓取入库，进行有效的分类操作，处理逻辑相同方便后面进行统一管理。</p>
<p>现在的价格主要是通过微信端和小程序的价格，因为这两个接口访问直接返回价格，不需要额外抓取，节省了大批量的代理ip的消耗。在余位和价格整合的过程中自动对车次的相应席位进行计算处理：比如硬卧计算下铺等操作，在整合的过程中直接赋值，在数据输送给前端的过程中不需要在拆开，反刷的价格也是在这个过程中赋值的，省去循环查询每个车次是否有反刷价格。</p>
<p>即使这样也无法应对JD的需求，比如客人进行下了2018-01-01上海-北京的T1的硬卧花了200块，而实际是190的下铺，我们只会反刷2018-01-01这一天的硬卧价格为190，1.2号之后还是计算的价格200，为此在新方案的同时，还需要反刷价格的同时能够进行价格的推算操作：即在反刷价格的同时异步进行30天的价格判断，进行反刷价格是否可以赋值。这样只要一个客人下单后，这预售期内的这个车次的硬卧下铺价格都是真实的下铺价格，省去了客人的烦恼。</p>
<p>还有就是最近12306采取的封IP可谓无所不用其极。用代理ip抓的价格已经无法确保准确，经常会出现一个车次有三个价格，只抓下来一个价格，造成另外2个席位无法正常售卖。所以在更新价格的时候需要额外注意：即如果发现现有缓存的价格有4个席位，而抓下来只有一个的这种情况：就把抓下来的价格更新到缓存里，缓存价格还是保证有4个，这样不会对售卖坐等有任何影响。而老的价格策略简单粗暴，直接覆盖最新的价格，也就是只有一个，那么其他的坐等不显示价格，就无法售卖早晨客人的投诉；如果缓存价格的个数小于抓袭来的价格，直接更新新抓下来的价格。</p>
<p>经过以上的改动，可以保证价格的准确性，高可用性、高温定型。在赋值价格的时候如果当天没有抓下来，直接取最近跟新的价格进行赋值。取消原逻辑进行价格推算的逻辑，造成缓存大量使用流量超标或者DB压力增大。</p>
<p>此次上线也是一波三折，第一次上线，由于价格需要新存一张表，造成大量价格数据的插入，造成极大的数据库压力，刚上线，就看到数据库从库的延迟瞬间增加，无奈，只好关闭新价格逻辑，上线回滚。第二次是因为第二天有人紧急上线，初步分析是DTC这边的读写分离问题并且增加在插入数据库的时候进行限流操作，一切完成后发布上线，上线后，数据库压力没有多大问题，但是在elk日志却显示很多查询失败的异常，经过排查发现是DTC当前大多数采用的是ibatis的写法即namespace+sqlid的这总，不是采用mybatis的mapper映射到接口的方式，这种进行读写判断的时候极其容易产生异常，为此我将读写分离的代码先还原，保持插入db的限流的可控开关再次上线。由于30的价格有几百万，所以为了防止短时间大批量插入，我在diamond里面配置规定时间插入的数量。随着价格不断完善，后面的抓取的价格会越来越少，保证缓存的价格完整准确。后面讲去掉这个限流开关。</p>
<p>经过一天的观察已经多次测试，现有的价格逻辑可以极大提高系统的吞吐量。最大的影响就是保证了价格的安全性，不会影响火车票的正常售卖。后面将对同站站对的车次进行价格的判断，因为同站站对的相同铺等80%左右的价格是一致的，也就是说可以采用相同的反刷价格。</p>
<p>这段是时间有点累，休息、休息一下。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时间过得很快，18年的一月份马上就过去了，时间真的是不抗混了。还有20多天就回家了，每年的这个时候总是让人望眼欲穿。&lt;/p&gt;
&lt;p&gt;之前已经把这个月的计划规划好了，该干什么需要时间等。最让我头疼的是这个价格整改：原来的设计采用的是12306的trainno+出发站号+到达站
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.top/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>Disruptor的使用</title>
    <link href="http://dingran.top/2018/01/08/Disruptor%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://dingran.top/2018/01/08/Disruptor的使用/</id>
    <published>2018-01-08T09:36:21.000Z</published>
    <updated>2018-01-08T09:43:55.585Z</updated>
    
    <content type="html"><![CDATA[<p>最近由于京东的不断推广，牛抢票的订单数疯长，对目前的系统造成了很大的压力。经过不断摸索改为分布式方式平衡压力，但是在多线程一下处理订单还是比较耗时的，线程实在是太宝贵了，所以急需一种框架能够大幅提高订单处理能力。</p>
<p>最近看到并发框架Disruptor，单线程一秒种可以处理600W订单，看到这么牛逼的字眼，总会让我精神一动，它怎么能这么牛逼呢？这里不讲解实现原理，有兴趣可以参考下面资料：<a href="http://ifeve.com/disruptor/" target="_blank" rel="external">http://ifeve.com/disruptor/</a></p>
<p>Disruptor是生产者消费者模式所以下面给出例子：<br><a href="http://blog.csdn.net/java1993666/article/details/72828010" target="_blank" rel="external">http://blog.csdn.net/java1993666/article/details/72828010</a></p>
<p>容我在细细研究一下它的实现原理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近由于京东的不断推广，牛抢票的订单数疯长，对目前的系统造成了很大的压力。经过不断摸索改为分布式方式平衡压力，但是在多线程一下处理订单还是比较耗时的，线程实在是太宝贵了，所以急需一种框架能够大幅提高订单处理能力。&lt;/p&gt;
&lt;p&gt;最近看到并发框架Disruptor，单线程一秒
    
    </summary>
    
      <category term="并发" scheme="http://dingran.top/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="并发" scheme="http://dingran.top/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Spring+Mybatis读写分离</title>
    <link href="http://dingran.top/2018/01/02/Spring-Mybatis%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
    <id>http://dingran.top/2018/01/02/Spring-Mybatis读写分离/</id>
    <published>2018-01-02T09:04:26.000Z</published>
    <updated>2018-01-02T09:35:30.999Z</updated>
    
    <content type="html"><![CDATA[<p>2018年第一天上班，元旦去了杭州带着老婆去西湖玩了一圈，为了防止系统发生意外，还特意戴上我的电脑，这几天不断有JD的问题。抢票取消反馈有超时的问题。回来第一天就是排查这个问题，经过查询日志后发现是对DB的频繁更新操作造成的。由于之前迁入DDG，直接将DataSource连接master库，没有连接slave。造成所有的压力全部压在主库上。所以第一步就是先进行读写分离。</p>
<p>说起来容易，实施起来比较困难。找了一堆文档，写的都是有上文没有下文的。经过不断摸索终于找到了一个使用mybatis的plugin的方法实现了这个动态切换dataSource的方法，现在总结如下：</p>
<p>建立一个plugin 用来做拦截mybatis的mapper，很重要：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD SQL Map Config 3.0//EN"</span></div><div class="line">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"top.dingran.train.sgt.rwAspect.DynamicPlugin"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>实现拦截类，又来判断走READ OR WRITE：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.ibatis.executor.Executor;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.executor.keygen.SelectKeyGenerator;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.BoundSql;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.MappedStatement;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.SqlCommandType;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.*;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.session.ResultHandler;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.session.RowBounds;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.transaction.support.TransactionSynchronizationManager;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Locale;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * 动态判断 是否走slave 库还是master库</div><div class="line"> * </div><div class="line"> * User: dingran</div><div class="line"> * Date: 2016-08-10 11:09</div><div class="line"> * Desc:</div><div class="line"> */</div><div class="line"><span class="meta">@Intercepts</span>(&#123; <span class="meta">@Signature</span>(type = Executor.class, method = <span class="string">"update"</span>, args = &#123; MappedStatement.class,</div><div class="line">                                                                            Object.class &#125;),</div><div class="line">              <span class="meta">@Signature</span>(type = Executor.class, method = <span class="string">"query"</span>, args = &#123; MappedStatement.class,</div><div class="line">                                                                           Object.class,</div><div class="line">                                                                           RowBounds.class,</div><div class="line">                                                                           ResultHandler.class &#125;) &#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicPlugin</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger                             logger   = LoggerFactory</div><div class="line">        .getLogger(DynamicPlugin.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String                               REGEX    = <span class="string">".*insert\\u0020.*|.*delete\\u0020.*|.*update\\u0020.*"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, DynamicDataSourceGlobal&gt; cacheMap = <span class="keyword">new</span> ConcurrentHashMap&lt;String, DynamicDataSourceGlobal&gt;();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> synchronizationActive = TransactionSynchronizationManager.isSynchronizationActive();</div><div class="line">        <span class="keyword">if</span> (!synchronizationActive) &#123;</div><div class="line">            Object[] objects = invocation.getArgs();</div><div class="line">            MappedStatement ms = (MappedStatement) objects[<span class="number">0</span>];</div><div class="line"></div><div class="line">            DynamicDataSourceGlobal dynamicDataSourceGlobal = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> ((dynamicDataSourceGlobal = cacheMap.get(ms.getId())) == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">//读方法</span></div><div class="line">                <span class="keyword">if</span> (ms.getSqlCommandType().equals(SqlCommandType.SELECT)) &#123;</div><div class="line">                    <span class="comment">//!selectKey 为自增id查询主键(SELECT LAST_INSERT_ID() )方法，使用主库</span></div><div class="line">                    <span class="keyword">if</span> (ms.getId().contains(SelectKeyGenerator.SELECT_KEY_SUFFIX)) &#123;</div><div class="line">                        dynamicDataSourceGlobal = DynamicDataSourceGlobal.WRITE;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        BoundSql boundSql = ms.getSqlSource().getBoundSql(objects[<span class="number">1</span>]);</div><div class="line">                        String sql = boundSql.getSql().toLowerCase(Locale.CHINA)</div><div class="line">                            .replaceAll(<span class="string">"[\\t\\n\\r]"</span>, <span class="string">" "</span>);</div><div class="line">                        <span class="keyword">if</span> (sql.matches(REGEX)) &#123;</div><div class="line">                            dynamicDataSourceGlobal = DynamicDataSourceGlobal.WRITE;</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            dynamicDataSourceGlobal = DynamicDataSourceGlobal.READ;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    dynamicDataSourceGlobal = DynamicDataSourceGlobal.WRITE;</div><div class="line">                &#125;</div><div class="line">                logger.warn(<span class="string">"设置方法[&#123;&#125;] use [&#123;&#125;] Strategy, SqlCommandType [&#123;"</span></div><div class="line">                            + ms.getSqlCommandType().name() + <span class="string">"&#125;].."</span>,</div><div class="line">                    ms.getId(), dynamicDataSourceGlobal.name());</div><div class="line">                cacheMap.put(ms.getId(), dynamicDataSourceGlobal);</div><div class="line">            &#125;</div><div class="line">            DynamicDataSourceHolder.putDataSource(dynamicDataSourceGlobal);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> invocation.proceed();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (target <span class="keyword">instanceof</span> Executor) &#123;</div><div class="line">            <span class="keyword">return</span> Plugin.wrap(target, <span class="keyword">this</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> target;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</div><div class="line">        <span class="comment">//</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当前线程保存dataSource信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 当前线程设置threadlocal 和获取数据源信息</div><div class="line"> * User: dingran</div><div class="line"> * Date: 2018-01-02 13:35</div><div class="line"> * Desc:</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceHolder</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;DynamicDataSourceGlobal&gt; holder = <span class="keyword">new</span> ThreadLocal&lt;DynamicDataSourceGlobal&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putDataSource</span><span class="params">(DynamicDataSourceGlobal dataSource)</span> </span>&#123;</div><div class="line">        holder.set(dataSource);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DynamicDataSourceGlobal <span class="title">getDataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> holder.get();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearDataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        holder.remove();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>工具枚举类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 定义枚举类型，读写</div><div class="line"> * Created by dingran on 2018/1/2.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> DynamicDataSourceGlobal &#123;</div><div class="line">                                     READ, WRITE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>设置主从数据源，用于根据mybatis的sqlId进行切换：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Random;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 动态数据源 配置</div><div class="line"> * User: dingran</div><div class="line"> * Date: 2018-01-02 10:56</div><div class="line"> * Desc: 动态数据源实现读写分离</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Object            writeDataSource;                                <span class="comment">//写数据源</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;Object&gt;      readDataSources;                                <span class="comment">//多个读数据源</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>               readDataSourceSize;                             <span class="comment">//读数据源个数</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>               readDataSourcePollPattern = <span class="number">0</span>;                  <span class="comment">//获取读数据源方式，0：随机，1：轮询</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> AtomicLong        counter                   = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Long MAX_POOL                  = Long.MAX_VALUE;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock        lock                      = <span class="keyword">new</span> ReentrantLock();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.writeDataSource == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Property 'writeDataSource' is required"</span>);</div><div class="line">        &#125;</div><div class="line">        setDefaultTargetDataSource(writeDataSource);</div><div class="line">        Map&lt;Object, Object&gt; targetDataSources = <span class="keyword">new</span> HashMap&lt;Object, Object&gt;();</div><div class="line">        targetDataSources.put(DynamicDataSourceGlobal.WRITE.name(), writeDataSource);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.readDataSources == <span class="keyword">null</span>) &#123;</div><div class="line">            readDataSourceSize = <span class="number">0</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; readDataSources.size(); i++) &#123;</div><div class="line">                targetDataSources.put(DynamicDataSourceGlobal.READ.name() + i,</div><div class="line">                    readDataSources.get(i));</div><div class="line">            &#125;</div><div class="line">            readDataSourceSize = readDataSources.size();</div><div class="line">        &#125;</div><div class="line">        setTargetDataSources(targetDataSources);</div><div class="line">        <span class="keyword">super</span>.afterPropertiesSet();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        DynamicDataSourceGlobal dynamicDataSourceGlobal = DynamicDataSourceHolder.getDataSource();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (dynamicDataSourceGlobal == <span class="keyword">null</span></div><div class="line">            || dynamicDataSourceGlobal == DynamicDataSourceGlobal.WRITE</div><div class="line">            || readDataSourceSize &lt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> DynamicDataSourceGlobal.WRITE.name();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> index = <span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (readDataSourcePollPattern == <span class="number">1</span>) &#123;</div><div class="line">            <span class="comment">//轮询方式</span></div><div class="line">            <span class="keyword">long</span> currValue = counter.incrementAndGet();</div><div class="line">            <span class="keyword">if</span> ((currValue + <span class="number">1</span>) &gt;= MAX_POOL) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    lock.lock();</div><div class="line">                    <span class="keyword">if</span> ((currValue + <span class="number">1</span>) &gt;= MAX_POOL) &#123;</div><div class="line">                        counter.set(<span class="number">0</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                    lock.unlock();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            index = (<span class="keyword">int</span>) (currValue % readDataSourceSize);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//随机方式</span></div><div class="line"></div><div class="line">            index = <span class="keyword">new</span> Random().nextInt(readDataSourceSize);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dynamicDataSourceGlobal.name() + index;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWriteDataSource</span><span class="params">(Object writeDataSource)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.writeDataSource = writeDataSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadDataSources</span><span class="params">(List&lt;Object&gt; readDataSources)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.readDataSources = readDataSources;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadDataSourcePollPattern</span><span class="params">(<span class="keyword">int</span> readDataSourcePollPattern)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.readDataSourcePollPattern = readDataSourcePollPattern;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">       <span class="attr">xmlns:jee</span>=<span class="string">"http://www.springframework.org/schema/jee"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd </div><div class="line">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</div><div class="line">       http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd</div><div class="line">       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd"&gt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--注：不要配置id,必须使用name 标记连接池bean--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"SGT_GTA-OCS-MASTER-DB"</span> <span class="attr">class</span>=<span class="string">"C3P0DataSourceProxy"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"SGT_GTA-OCS-SLAVE-DB"</span> <span class="attr">class</span>=<span class="string">"C3P0DataSourceProxy"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"DynamicDataSource"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"writeDataSource"</span> <span class="attr">ref</span>=<span class="string">"SGT_GTA-OCS-MASTER-DB"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"readDataSources"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"SGT_GTA-OCS-SLAVE-DB"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--轮询方式--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"readDataSourcePollPattern"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultTargetDataSource"</span> <span class="attr">ref</span>=<span class="string">"SGT_GTA-OCS-MASTER-DB"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 自动扫描mapping.xml文件 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath*:config/database/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:config/spring/config-plugin.xml"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"dao"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- (事务管理)transaction manager, use JtaTransactionManager for global tx --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></div><div class="line">          <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>由于代码是在开发项目上拉下来的，不能带有公司标志，所以有些package自己去改好。<br>另外特别注意一点：我们自己写mybatis的sql方法时候最好统一，比如查询 list用find 单个用get，update更新，delete删除，这样保证了一致性方便维护。</p>
<p>网上还有很多其他的方法，选择一种适合自己的最好，下面这个链接就有4种方法，我用的就是最后一种，大家可以借鉴一下：<br><a href="https://www.jianshu.com/p/2222257f96d3" target="_blank" rel="external">https://www.jianshu.com/p/2222257f96d3</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2018年第一天上班，元旦去了杭州带着老婆去西湖玩了一圈，为了防止系统发生意外，还特意戴上我的电脑，这几天不断有JD的问题。抢票取消反馈有超时的问题。回来第一天就是排查这个问题，经过查询日志后发现是对DB的频繁更新操作造成的。由于之前迁入DDG，直接将DataSource连
    
    </summary>
    
      <category term="mybatis" scheme="http://dingran.top/categories/mybatis/"/>
    
    
      <category term="spring" scheme="http://dingran.top/tags/spring/"/>
    
      <category term="mybatis" scheme="http://dingran.top/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>年终总结</title>
    <link href="http://dingran.top/2017/12/26/2017%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://dingran.top/2017/12/26/2017年终总结/</id>
    <published>2017-12-26T08:05:00.000Z</published>
    <updated>2017-12-26T08:33:51.043Z</updated>
    
    <content type="html"><![CDATA[<pre><code>还有不到一周的时间就到2018年了，真是快啊，遥想当年上学的时候简直度日如年啊，现在的日子真是不好混了。
</code></pre><p>来到途牛已经已经一年又4个月了，这段时间里时间貌似一咋眼就过来了，人来人往。截止到现在数据中心负责的数据系统已经稳定运行了好长一段时间了，牛抢票也完全迁移到docker上了，不再有线程池等性能瓶颈。现在唯一的压力就是DTC的查询能力和代理ip的质量问题。现在DTC集中所有了火车票的查询，随着京东以及翼支付等相关分销商的接入，查询倍增，所面临的挑战也不断增加。至少目前一切安然无恙。</p>
<p>21号，公司进行了大规模裁员，研发裁掉了很多，说是为了降低成本。这种大规模裁研发的倒是很少见啊，不幸的是德良中枪了，通过这件事说明了一个问题：努力成为可以取代任何人的人，而不要被任何人所取代。</p>
<p>过几天元旦准备出去玩玩，来了上海好几年，说真的真没有认真出去玩玩。目前身在OTA行业居然也心无所动，说明我也够懒得呀。现在周边溜达溜达吧，人生真应该活的多姿多彩，否则天天三点一线真的是很无聊，看看产品经理蒋老师就知道人家出去玩了好多次了，真是潇洒哦。</p>
<p>2017年即将过去，目前看来今年干的还是比较圆满，负责的系统都稳定的运行在线上，很少出现波动了，容灾、预警等功能也相应到位。抢票也开始时时刻刻的运行着，可以在第一时间发起出票。总起来说这一年我所学到的东西是前3年的总和吧。前三年主要是在摸索怎么做？研究的理论东西，有些理论还不懂，来途牛的这一年对系统改动了好多，也遇到了好多坑，不过系统的性能也提升了好多，益大于弊。</p>
<p>2018即将到来，这一年是关键的一年，我将继续在技术的路上疾行，多研究底层的实现，将以前欠下的技术债努力的往回补，目前自己与大神还相差甚远，希望自己不忘初心，走出自己的一番天地，干出自己的一番事业。</p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;还有不到一周的时间就到2018年了，真是快啊，遥想当年上学的时候简直度日如年啊，现在的日子真是不好混了。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;来到途牛已经已经一年又4个月了，这段时间里时间貌似一咋眼就过来了，人来人往。截止到现在数据中心负责的数据系统已经稳定运行
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.top/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>牛抢票独立总结</title>
    <link href="http://dingran.top/2017/12/06/%E7%89%9B%E6%8A%A2%E7%A5%A8%E7%8B%AC%E7%AB%8B%E6%80%BB%E7%BB%93/"/>
    <id>http://dingran.top/2017/12/06/牛抢票独立总结/</id>
    <published>2017-12-06T05:46:57.000Z</published>
    <updated>2017-12-06T06:05:12.490Z</updated>
    
    <content type="html"><![CDATA[<p>周一是个上线的日子，准备是用来上牛抢票的最新的代码，但是因为申请MQ和运维搞的很紧张。现在申请mq都取消了，改用公司技术平台组新开发的tubing，但是我从来没听说这个东西呀，找了N个人后，通知我说这个两个月前已经发了邮件了，但是我没收到哇，后来截图给我看确实发邮件了发给研发经理和总监了，我去问研发经理和总监是否收到这封邮件，搞笑了，他们居然没收到，我艹，这是什么鬼。和他们理论，结果人家不说话了，好像我们组团骗他们一样。由于我们用mq还是需要很稳定的，现在他们不维护了，也是没办法只能接入tubing。</p>
<p>看着文档，又是之前接入docker的相关问题，有些jar包冲突了，最后搞的差不多了，就是在接收消息的时候有点问题。询问负责人，是那个启动spring循环依赖的问题，修改之后便可以正常使用了。总体说来还是问题不大的，就是jar冲突比较头疼。</p>
<p>至此牛抢票独立完成，开始到测试环境上进行试跑。由于现在牛抢票的业务是通过ROA进行的，ROA必须将原来对接OCS的TSP，转到SGT上，这样便可以开始联调了。</p>
<p>牛抢票简要流程如下：定时任务调度，调用SGT触发接口，然后翻页从DB总获取需要的监控的数据，通过hash算法分配执行时间，然后通过akka进行异步发送到tubing，tubing再将这些信息平衡到所有的实例上，每个实例获取到信息后，调用akka，创建actor，调用DTC查询余票，查询完成后再次调用akka进行分配订单通知ROA后续操作。</p>
<p>首先akka1GB的堆可以支撑250W个actor，相比较线程池可用性更高，由于牛抢票后期订单数量巨大，线程池已经不能满足需要所以必须通过分布式进行分发处理。所以在上面使用akka创建actor的地方都是比价耗时的，比如查询DTC，DTC返回结果等都需要时间，这对线程池是极大的消耗，延迟发送更是如此。</p>
<p>是骡子是马，咱到线上遛遛去！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;周一是个上线的日子，准备是用来上牛抢票的最新的代码，但是因为申请MQ和运维搞的很紧张。现在申请mq都取消了，改用公司技术平台组新开发的tubing，但是我从来没听说这个东西呀，找了N个人后，通知我说这个两个月前已经发了邮件了，但是我没收到哇，后来截图给我看确实发邮件了发给研
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.top/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>转Spring基于Event支持</title>
    <link href="http://dingran.top/2017/12/04/%E8%BD%ACSpring%E5%9F%BA%E4%BA%8EEvent%E6%94%AF%E6%8C%81/"/>
    <id>http://dingran.top/2017/12/04/转Spring基于Event支持/</id>
    <published>2017-12-04T07:24:24.000Z</published>
    <updated>2017-12-04T07:28:27.951Z</updated>
    
    <content type="html"><![CDATA[<p>spring在启动的时候有个事件加载机制，今天在importnew中看到了这篇介绍事件的例子，可以在以后的工作中有所应用。</p>
<p>文章地址：<a href="http://www.importnew.com/26782.html" target="_blank" rel="external">spring对event支持</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;spring在启动的时候有个事件加载机制，今天在importnew中看到了这篇介绍事件的例子，可以在以后的工作中有所应用。&lt;/p&gt;
&lt;p&gt;文章地址：&lt;a href=&quot;http://www.importnew.com/26782.html&quot; target=&quot;_blank&quot; r
    
    </summary>
    
      <category term="spring" scheme="http://dingran.top/categories/spring/"/>
    
    
      <category term="spring" scheme="http://dingran.top/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>2017-11月份工作总结</title>
    <link href="http://dingran.top/2017/11/29/2017-11%E6%9C%88%E4%BB%BD%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    <id>http://dingran.top/2017/11/29/2017-11月份工作总结/</id>
    <published>2017-11-29T03:55:26.000Z</published>
    <updated>2017-11-29T05:09:40.215Z</updated>
    
    <content type="html"><![CDATA[<p>匆匆的11月份，一转眼都29号了，回顾这个月感觉干了好多事。</p>
<p>第一肯定是双11了，虽然是淘宝的举办的节日，但是我还是自觉地去了京东去买的东西。为什么？因为双十一的京东的优惠力度比较大，买了一罐蛋白粉，原价剪了150，再打五折这个可不是什么时候都能遇到的，很顺利，买到了自己要买的东西。</p>
<p>这个月是一年比较高兴的，以为加工资了，虽然没有加到理想的地位，但是职位晋升到了P5，也算是资深级别的开发工程师，想想我们部门也就有我一个也算是小小的满足吧。</p>
<p>既然加了money自然要多干活，在甲哥的要求下我到年底的需求几乎都排好了，跃然纸上，自然有一种按部就班的感觉。</p>
<p>第一个是收尾DTC的反刷问题。首先是火车列表反刷，这个主要是针对IOS的，由于火车列表反刷有个异常，之前关掉了，现在反刷由我负责，经过我的考虑，将分析12306的结果还是交给DTC进行处理，不要在两个地方都维护相同的代码，又把京东的反刷结果也给改了，经过相关查询通过了测试，正式上线，这样就可以减少代理ip的消耗，总体感觉还是不错的。</p>
<p>后面主要是对OCS进行改造：</p>
<ul>
<li><p>第一点代码分离：将牛抢票的代码从OCS里面独立出来，成为新系统SGT。在代码分离的时候考虑到还是使用maven，我就重新设计了一下架构分为4层：common、dao、service、web层，这样各层明确分工，可以极大的降低了代码的耦合度。由于代码还需要对base64进行转换，写了AOP，实现对异常处理，对HttpServletRequest里面的参数进行自动转json也进行了相关重构重写。仅用一个小小的aop代码段就完成了原来底层一堆的代码调用，代码十分简洁却麻雀虽小五脏俱全。</p>
</li>
<li><p>第二点就是设置ddg：由于公司极度要求java项目部署到docker上面，没办法只能硬着头皮搞。配置ddg，按照相关文档一步一步进行，中间遇到点问题，一般是jar包的版本问题导致的，后续还是解决了。</p>
</li>
<li><p>第三点就是推线上：也就是目前在干的事情，放到PRE的时候jvm的参数不知道为何自己变掉了，真TMD奇怪，找了一堆人终于重新修改了。再次启动ddg又没有返回正确的结果，没有结果我这边就一直报错。首先感觉一上午搞环境问题，到处找人真是心累，只能进一步说明途牛的沟通效率真是差的要命。</p>
</li>
</ul>
<p>眼看到月底了，按照之前排的事情已经完成了80%了，后续就是推主要的线上系统进行变更TSP的调用关系，这样就彻底搞定了牛抢票的迁移。</p>
<p>心累 。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;匆匆的11月份，一转眼都29号了，回顾这个月感觉干了好多事。&lt;/p&gt;
&lt;p&gt;第一肯定是双11了，虽然是淘宝的举办的节日，但是我还是自觉地去了京东去买的东西。为什么？因为双十一的京东的优惠力度比较大，买了一罐蛋白粉，原价剪了150，再打五折这个可不是什么时候都能遇到的，很顺利
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.top/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>关于DTC采用aop添加日志</title>
    <link href="http://dingran.top/2017/11/04/%E5%85%B3%E4%BA%8EDTC%E9%87%87%E7%94%A8aop%E6%B7%BB%E5%8A%A0%E6%97%A5%E5%BF%97/"/>
    <id>http://dingran.top/2017/11/04/关于DTC采用aop添加日志/</id>
    <published>2017-11-04T03:50:56.000Z</published>
    <updated>2017-11-04T04:05:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天来加个班，主要是对DTC的访问添加日志的统计。之前做了一次日志统计，由于所有的代码都是镶嵌在原来的代码里面，造成代码耦合度很强，一个方法的代码经常超过了200行，关键是的事之前采用的汇总策略，但是准确性经常查了几个百分点，造成数据不太可信。随后经过考虑分析，决定采用AOP的方式进行统计。</p>
<p>开始一切都很顺利，自定义个标签，添加类别，根据对应的类别进行对比统计。貌似没有什么问题了，经过简单的测试也没有问题，统计的数据也很准确。便放到sst环境上进行测试，刚发不多久，就看到有入参为空的现象，开始以为是供应商传参有问题，后续发现不对，而且越来越多，我在本地测试没有发现这种问题呀，经过对比我发现了问题的根源：</p>
<p>这个余位查询没有指定对应的提交方式即既可以用post的方式也可以用get的方式，我之前本地测试使用的便是get方式，get是将参数作为url的一部分，所以没有问题。post的方式是用方法体的一部分作为流的方式进行传递。先说明一点，由于我需要统计分销商，也就说在aop的before层里面，我需要先解析意思post的流，后续进入正式的方法里面，需要在解析一次，那么问题就出现这再次解析里面：httpServletRequest的getRender和getInputStream获取流只能获取一次，这里需要切记。那么找到了问题的根源就想怎么解决，数据肯定是要解析的，所以后续解析不了，只需要将解析后的数据传递下去即可。如果想怎么解决？<br>可以借鉴：<a href="http://www.cnblogs.com/ocean-sky/p/6899613.html" target="_blank" rel="external">http://www.cnblogs.com/ocean-sky/p/6899613.html</a></p>
<p>ok，到了这一步数据解决了，在本地进行压测统计，发现aop的afterreturn统计不了数据，由于我们采用TSP的分布式调用，所以有可能是aop的after失效了，所以我将对应的逻辑进行重构，再次进行spring托管，进行aop统计，这里彻底解决了问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天来加个班，主要是对DTC的访问添加日志的统计。之前做了一次日志统计，由于所有的代码都是镶嵌在原来的代码里面，造成代码耦合度很强，一个方法的代码经常超过了200行，关键是的事之前采用的汇总策略，但是准确性经常查了几个百分点，造成数据不太可信。随后经过考虑分析，决定采用AO
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.top/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>DTC添加统计日志</title>
    <link href="http://dingran.top/2017/11/01/DTC%E6%B7%BB%E5%8A%A0%E7%BB%9F%E8%AE%A1%E6%97%A5%E5%BF%97/"/>
    <id>http://dingran.top/2017/11/01/DTC添加统计日志/</id>
    <published>2017-11-01T03:46:11.000Z</published>
    <updated>2017-11-01T05:08:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>11.1号，新的一个月了，一晃就过了一个月，再晃晃就过年了。</p>
<p>10.1回来后主要是价格的修复操作，找到的问题的根源后，经过一个月的数据刷新，现在价格问题几乎不再出现，主要是对系统内部的一些功能的调整。</p>
<p>之前需要统计DTC余位查询的调用功能的数据、代理ip的使用数据以及各个分销商的调用数据，由于DTC之前没有这个功能，只能通过TSP的平台上直接看接口的总体调用次数，不能以各种维度去统计分析数据。</p>
<p>之前由于领导紧急要用，便紧急做了一个统计功能。这个统计功能什么都有，各种维度，但是需要在原来的代码里面穿插大量的统计代码。没错，就是这种土方法，由于运营等还要添加各种其他维度，后面还需要继续添加，后果可想而知。本来就很乱的代码，如果在里面再继续添加这种统计代码，后面就不用维护了。</p>
<p>上述统计的方法虽然方便，却是对原代码有很大的入侵性，造成高度耦合性。后期发现有的数据统计的都差除了3个百分点。还不准确，无法交代。为此我想起了spring的AOP功能。</p>
<p>spring的aop功能就是在方法前执行一段逻辑，方法执行完后执行一段逻辑，而且采用的是代理模式，只需要配置一段代码便可让原代码在无感知的情况下，完成统计工作。</p>
<p>配合切面需要谨慎考虑，总体来说需要统计的就那么几个类，但是却需要统计各个维度，比如价格查询、经停站查询、余位查询、抢票查询等，所以应用spring的自定义annotation来设置就在合适不过了，只要在自定义标签上添加对应的type就可以及时分辨出来需要统计的维度，后续需要再添加任何维度，只需要在没枚举中添加这个维度，然后在对应的处理标签中扩展对应的逻辑即可，非常方便。原来穿插在代码的多行代码，只需要在方法的头部添加个标签，标签配置type就搞定了，可侵入性非常低，耦合性也非常低。</p>
<p>下周上线，后续将对牛抢票开展进一步操作。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;11.1号，新的一个月了，一晃就过了一个月，再晃晃就过年了。&lt;/p&gt;
&lt;p&gt;10.1回来后主要是价格的修复操作，找到的问题的根源后，经过一个月的数据刷新，现在价格问题几乎不再出现，主要是对系统内部的一些功能的调整。&lt;/p&gt;
&lt;p&gt;之前需要统计DTC余位查询的调用功能的数据、
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.top/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>9.24号价格问题总结</title>
    <link href="http://dingran.top/2017/10/14/9-24%E5%8F%B7%E4%BB%B7%E6%A0%BC%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://dingran.top/2017/10/14/9-24号价格问题总结/</id>
    <published>2017-10-14T06:41:13.000Z</published>
    <updated>2017-10-14T06:59:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>9.20左右上线了竞品的数据查询分析的一部分代码，这个功能是用来在紧急的情况下，可以采用竞品的数据来保证我们火车票的业务正常流转，在本地进行测试的时候一切都很顺利，后来上线后，我将数据进行按照比例进行分配给竞品查询，一切看起来都是很顺利的。</p>
<p>后来由于出现了价格的问题，车次查出来的价格都是乱七八糟的，影响了很多业务的进行。随即关闭竞品的数据查询。由于临近10.1，我又提前请了2天假回家，这10.1期间价格问题层出不穷，这时候我还是不知道价格的问题出现在哪里。这段期间内由技术支持来进行手动刷取价格保证业务的正常流转。</p>
<p>10.1假期过后，价格的问题成了我的首要任务，首先我将价格进行添加origin字段即添加价格的来源，这样我们就可一眼看出这个错误的价格来源自哪里，因为我们的价格来源途径不仅只有一条，所以上线后，我看到了线上的数据随即进行了更新，新抓下来的价格几乎是没有问题的。</p>
<p>再次查看对比相同车次的不同团期的价格，发现了一个大问题，抓取价格是按照trainno和fromstationno还有tostationno，三个部分组成的。但是数据库里面这三个要素是相同的，但是对应的站站三字码却是不同的，这就是说，价格抓取的不对。经过仔细分析，这三个在12306都是提供的字段，唯一不提供的就是对数据竞品数据查询，瞬间知道了一切来源，原来是自己无意之间闯了这么个大祸，还好及时关闭了。为自己犯下这么低级的错误而羞愧。</p>
<p>虽说这次问题比较大，但是意义很深刻，为什么说呢？因为12306的trainno是可变的，比如G1对应的trainno可能不知道哪一天就变掉了，而且这个trainno却是查询价格和经停站必备的字段。所以在用竞品查询的时候如果取不对trainno或者fromNo还有toNo取错了的话，那么整个脏数据就会出现。</p>
<p>根据如上的分析，我找出了对应的策略，将from三字码和to三字码放到缓存里面，如果查出的价格的站站不是我要获取的站站三字码，价格就要重新抓取，虽然这是个十分漫长的数据更新过程，不过却可以最大程度减少问题。</p>
<p>现在经过几天的价格清洗，可以看到数据正在有序的恢复，下周上线后，数据将彻底完善。为此我还开发了价格自动前推后推功能，可以自动将30天的数据全部更新一遍，但是消耗代理ip的数据实在太大了，所以在十分紧急或者资源够用的情况下可以开启。</p>
<p>请铭记此次问题的前因后果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;9.20左右上线了竞品的数据查询分析的一部分代码，这个功能是用来在紧急的情况下，可以采用竞品的数据来保证我们火车票的业务正常流转，在本地进行测试的时候一切都很顺利，后来上线后，我将数据进行按照比例进行分配给竞品查询，一切看起来都是很顺利的。&lt;/p&gt;
&lt;p&gt;后来由于出现了价格
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.top/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>10.1这段期间小结</title>
    <link href="http://dingran.top/2017/10/12/10-1%E8%BF%99%E6%AE%B5%E6%9C%9F%E9%97%B4%E5%B0%8F%E7%BB%93/"/>
    <id>http://dingran.top/2017/10/12/10-1这段期间小结/</id>
    <published>2017-10-12T06:02:42.000Z</published>
    <updated>2017-10-12T06:20:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>10.1眨眼就过去了，回家呆了9天左右，算是一个小长假了，走之前不知道什么情况价格出现了很多脏数据。数据中心本身就是个源头，结果源头的数据乱套了就废了。途牛线、分销线都开始报价格不准，各种大王过来捅呀。。。所以整个假期过的都不安分。</p>
<p>坐飞机刚回家的第一天晚上，运维打电话说我们的调用线上的公共mq了，我查找一下代码果然在一个地方调用了，幸好我机智做了一个开关，关上了算是消停了很多。第二天老大开始捅价格问题。不光是途牛的，jd的捅了最厉害了。由于一时没有更好的解决方案，所以只能先挺着。</p>
<p>回来了就着手开始解决价格的问题。我先出了一个方案，将价格问题的背景以及出现问题的可能性进行剖析还有即将应对的方案进行详细阐述。回来就开了个会，我详细将我的方案和大家进行讨论，经过大家的统一定夺后，就开始进行开发操作。</p>
<ul>
<li>价格抓取还是以12306为准</li>
<li>增加微信接口的应用性</li>
<li>竞品的数据先作为备用</li>
<li>返回缓存的时候一定要取价格的最新缓存</li>
<li>价格小于0.5的全部滤掉，不显示</li>
<li>价格自动校验正确 差距太大需要警示</li>
<li>价格添加来源 后期可以一眼看出价格的错误来源进行有效的分析</li>
</ul>
<p>昨天的上线还是很顺林的，价格修复操作开始不断的进行，通过elk日志，可以看到我们的价格缓存有很多的错误数据，还有一部分是12306给出的价格是错误的，但是不影响售卖。昨天还有几单说要刷价格，今天几乎没有了，说明价格的准确性已经取得初步的胜利，后面将继续进行观察。</p>
<p>PS:12306最近又有新的幺蛾子，不仅在G\D\C上增加了选座的功能，而且还提供了可以进行中转的功能，后期对应的需求肯定开始来了，真是应接不暇，说好的同名支付呢？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;10.1眨眼就过去了，回家呆了9天左右，算是一个小长假了，走之前不知道什么情况价格出现了很多脏数据。数据中心本身就是个源头，结果源头的数据乱套了就废了。途牛线、分销线都开始报价格不准，各种大王过来捅呀。。。所以整个假期过的都不安分。&lt;/p&gt;
&lt;p&gt;坐飞机刚回家的第一天晚上，
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.top/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>9.18号12306巨坑来袭</title>
    <link href="http://dingran.top/2017/09/22/9-18%E5%8F%B712306%E5%B7%A8%E5%9D%91%E6%9D%A5%E8%A2%AD/"/>
    <id>http://dingran.top/2017/09/22/9-18号12306巨坑来袭/</id>
    <published>2017-09-22T08:16:41.000Z</published>
    <updated>2017-09-22T08:26:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>9.18号，看起一切都十分正常，我准备开始研究火车票的架构推进策略。然而客服报了一单订单价格出现异常。起初还没有在意这是什么导致的，查询这个站站对后发现，12306居然没有给这个车次赋值价格，剩余的几个车次都没有价格，我的天啊，发生了生么？</p>
<p>查询app端发现价格也没有，这个很严重的呀，这样会导致我们的火车票的车次列表的信息显示不完整，不光是影响了途牛线，连京东也叫了起来，发了100+个订单过来，说是占位失败。大批量的站站对都是从哈尔滨西发车的都有问题。查看相关站站对，发现有的价格涨了不少，还有一些是价格为空的。这次10.1，12306增加了部分的临时车次，也许12306的相关车次也在进行相关的调整。</p>
<p>此次影响的范围已经超过了我的预计，必须立马马上进行修复方案。12306的价格已经不能作为唯一的价格来源，为此我研究了多种方案后，进行相关相似性对比，找出了最匹配的方案，立马开始开发编码，用了不到一天的努力，价格开始大规模修复，截止目前，几乎不再有价格的问题。</p>
<p>祈祷12306稳定一些 好吧啦！！！在这么折磨真要疯了的节奏。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;9.18号，看起一切都十分正常，我准备开始研究火车票的架构推进策略。然而客服报了一单订单价格出现异常。起初还没有在意这是什么导致的，查询这个站站对后发现，12306居然没有给这个车次赋值价格，剩余的几个车次都没有价格，我的天啊，发生了生么？&lt;/p&gt;
&lt;p&gt;查询app端发现价
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.top/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>爬取12306cookie的总结</title>
    <link href="http://dingran.top/2017/09/13/%E7%88%AC%E5%8F%9612306cookie%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <id>http://dingran.top/2017/09/13/爬取12306cookie的总结/</id>
    <published>2017-09-13T03:01:06.000Z</published>
    <updated>2017-09-13T08:08:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>9.4号，所有的供应商全部挂掉了，就剩一家还在苟延残喘，随后一天后，供应商全部恢复，不得不赞叹，供应商的应对策略还是很厉害的。我们的直连趴窝了好几天后，经过艰难的摸索终于可以试营业了。之前一直委以重任的app反刷现在也停下来了，降到现在的1%左右的使用率，之前还有大概70以上呢。</p>
<p>造成这么多的事故，肯定是12306采用了或者更改了什么机制导致了大家都集体崩溃了。这边DTC的查询量也被封的十分严重，所以找到应对方法十分重要。首先一般查询都是从query接口开始的，但是12306一般都是从log接口开始的，之前也一直没有在意这个接口到底是干什么的，一直认为就是在记录一些日志。最近和在飞飞研究他那块问题的时候，发现有些接口变了，最主要的是12306开始往回写了一些cookie的东西，这引起了我的注意。那么经过推敲，我觉得我这边肯定也是返回了cookie的东西。我将拼接好的链接，放到另一个浏览器采用无痕模式访问，结果直接返回悲剧了，ok，看来是12306发现了我们的非法访问，并且在返回结果返回“非法请求”，有点搞笑。怎么让我们的请求变成合理请求呢？就得从log接口入手了。</p>
<p>首先将浏览器缓存包括cookie全部清除，调用log接口，发现返回结果还是和之前一样，没没有发生任何变化，但是在response的header里面多了set-cookie，我们这边爬取，直接忽略cookie，可能就直接12306识别出来了。所以现在本地做测试，先访问log接口，抓取cookie，然后在调用query接口的时候，带上这些cookie，重启服务器，再次调用接口，但是发现，还是发现非法请求，咦？啥问题，不是该有的都有了么？肯定是什么东西还是被察觉了，经过询问飞飞（他踩了好久的坑），他现在可以使用了，我问题他怎么使用的cookie，他说用他用的cookiestore，我则使用的字符串拼接，可能是这个原因么？</p>
<p>我将log接口返回的cookie，封装成cookiestore，再次将cookiestore载入httpclient，发起请求，发现这次不是非法请求了，而是网络繁忙了。ok，又向胜利近了一步，剩下的再次观察浏览器cookie，发现还有很多其他静态cookie，都是用来保存上次访问的信息的，我直接将这些cookie动态生成，封装成cookiestore，一起在访问query接口，一起带给服务器，再次尝试请求query接口，嗯，终于返回结果了，通过这一步步的尝试，终于摸清楚了12306到底搞了什么名堂。</p>
<p>后续app反刷等也必须采用这种方式进行处理，否则无法获取真正的数据，我们就断了一条路获取数据，虽然我们有很多的路获取数据^_^</p>
<p>PS:今天下午，之前一直搁置的需求找回12306密码，之前由于种种原因始终没有通过最后的请求，下午闲来没事采用上面的cookiestore的方式，认真的将每个cookie小心导入，最后，binggo，成功了，终于最近觉得做了一件有点意义的事情。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;9.4号，所有的供应商全部挂掉了，就剩一家还在苟延残喘，随后一天后，供应商全部恢复，不得不赞叹，供应商的应对策略还是很厉害的。我们的直连趴窝了好几天后，经过艰难的摸索终于可以试营业了。之前一直委以重任的app反刷现在也停下来了，降到现在的1%左右的使用率，之前还有大概70以
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.top/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>记20170905的上线总结</title>
    <link href="http://dingran.top/2017/09/05/%E8%AE%B020170905%E7%9A%84%E4%B8%8A%E7%BA%BF%E6%80%BB%E7%BB%93/"/>
    <id>http://dingran.top/2017/09/05/记20170905的上线总结/</id>
    <published>2017-09-05T07:30:06.000Z</published>
    <updated>2017-09-05T07:51:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>9月4号，上午都是风平浪静的，最近12306一直在搞什么同名支付，这边各个组也都积极应对，否则后面都无法卖票了。</p>
<p>中午刚吃饭回来，就发现12306接口响应速度非常慢，途牛火车票这边几乎查询不出来任何数据。比较恶心的是12306不返回数据也就算了呗，结果返回了为空的结果，其实这个站站对是有车次的呀，数据中心的基础数据几乎都被12306给打乱了。</p>
<p>本来我就预想这要做一个容灾的机制：现在所有的数据都是从12306爬下来的，如果12306加紧封ip的步骤，我们就会面临很被动的局面，而事实也正是如此，在8.23号以来，12306不断提升封ip的步伐，最初一天只会封我们几百次请求，到现在几乎都把我们逼到死胡同了，而9.4号这天，12306的不知道是上线还是在干什么，首先余位查询接口接连变了两次，而后，余位查询全部都是访问网络繁忙，再往后什么也查不出来了。作为12306的“分销商”，12306的可用性几乎连2个9都达不到，如果是上线或者修改什么在白天是不是也太儿戏了，特别是在10.1这么个买票小高峰的时间段。</p>
<p>容灾机制其实我已经构思完毕了，只是这个接口返回的数据和我现有的数据有些冲突，所谓冲突的点就是原能够提供的数据，这个新接口不能提供或者根本没有，而我们的接口返回的数据这些参数还必须都要有。我准备在研究一段时间，但是9.4号这一天突然12306的查询接口不可用了，逼着我把这个接口给紧急上线了，因为我们的车次列表根本不显示任何数据，紧急发布一版了后，车次列表可以暂时显示，所有的线上流量全部走新接口，由于是紧急上线，线上的接口还是有很多问题的，有些没有提供的参数需要我进行查找、计算得出来的。并且12306的车次还有暂售、停运、起售和我们自己的预售。这么多状态少了一个都不行，都会影响客人的下单引起客人的投诉。</p>
<p>9.4号注定不是平凡的一天，由于12306的变动，所有的供应商出票10家有9家全部瘫痪，造成订单几乎卡在占位中，后面分销商不停的催、我们催供应商。到了下午六点以后，12306的接口有所恢复，但是查询的效果还是很低，到了今天算是终于告于一个段落。</p>
<p>祈祷12306不要搞什么花样，还有这个同名支付不要再引起一波动荡！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;9月4号，上午都是风平浪静的，最近12306一直在搞什么同名支付，这边各个组也都积极应对，否则后面都无法卖票了。&lt;/p&gt;
&lt;p&gt;中午刚吃饭回来，就发现12306接口响应速度非常慢，途牛火车票这边几乎查询不出来任何数据。比较恶心的是12306不返回数据也就算了呗，结果返回了为
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.top/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>spring事务失效原因之一</title>
    <link href="http://dingran.top/2017/08/30/spring%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88%E5%8E%9F%E5%9B%A0%E4%B9%8B%E4%B8%80/"/>
    <id>http://dingran.top/2017/08/30/spring事务失效原因之一/</id>
    <published>2017-08-30T06:28:58.000Z</published>
    <updated>2017-08-30T06:36:01.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>有一种情况会导致spring的aop事务失效：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AService</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>;  </div><div class="line">&#125;  </div><div class="line">   </div><div class="line"><span class="meta">@Service</span>()  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AServiceImpl1</span> <span class="keyword">implements</span> <span class="title">AService</span></span>&#123;  </div><div class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.b();  </div><div class="line">    &#125;  </div><div class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRES_NEW)  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span> </span>&#123;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>在this.b()调用b方法中，b的事务是不会生效的原因是这种调用方式无法实现aop的增强方式<br><img src="http://dl.iteye.com/upload/attachment/0066/6247/d33ee177-cf3f-39cc-befe-533306b0715f.jpg" alt="http://dl.iteye.com/upload/attachment/0066/6247/d33ee177-cf3f-39cc-befe-533306b0715f.jpg"></li>
</ol>
<p>3、解决方案<br>此处a方法中调用b方法时，只要通过AOP代理调用b方法即可走事务切面，即可以进行事务增强，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;  </div><div class="line">aopProxy.b();<span class="comment">//即调用AOP代理对象的b方法即可执行事务切面进行事务增强  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>判断一个Bean是否是AOP代理对象可以使用如下三种方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">AopUtils.isAopProxy(bean)        ： 是否是代理对象；</div><div class="line">AopUtils.isCglibProxy(bean)       ： 是否是CGLIB方式的代理对象；</div><div class="line">AopUtils.isJdkDynamicProxy(bean) ： 是否是JDK动态代理方式的代理对象；</div></pre></td></tr></table></figure>
<p>3.1、通过ThreadLocal暴露Aop代理对象</p>
<p>1、开启暴露Aop代理到ThreadLocal支持（如下配置方式从spring3开始支持）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">expose-proxy</span>=<span class="string">"true"</span>/&gt;</span><span class="tag">&lt;<span class="name">!—注解风格支持--</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">expose-proxy</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;<span class="name">!—xml风格支持--</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、修改我们的业务实现类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.b();-----------修改为---------&gt;((AService) AopContext.currentProxy()).b();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;有一种情况会导致spring的aop事务失效：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div 
    
    </summary>
    
      <category term="spring" scheme="http://dingran.top/categories/spring/"/>
    
    
      <category term="spring" scheme="http://dingran.top/tags/spring/"/>
    
      <category term="事务" scheme="http://dingran.top/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Spring循环依赖的三种方式</title>
    <link href="http://dingran.top/2017/08/22/Spring%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://dingran.top/2017/08/22/Spring循环依赖的三种方式/</id>
    <published>2017-08-22T06:43:03.000Z</published>
    <updated>2017-08-22T06:56:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>转自：<a href="http://blog.csdn.net/u010644448/article/details/59108799" target="_blank" rel="external">http://blog.csdn.net/u010644448/article/details/59108799</a></p>
<h1 id="第一种：构造器参数循环依赖"><a href="#第一种：构造器参数循环依赖" class="headerlink" title="第一种：构造器参数循环依赖"></a>第一种：构造器参数循环依赖</h1><p>Spring容器会将每一个正在创建的Bean 标识符放在一个“当前创建Bean池”中，Bean标识符在创建过程中将一直保持<br>在这个池中，因此如果在创建Bean过程中发现自己已经在“当前创建Bean池”里时将抛出<br>BeanCurrentlyInCreationException异常表示循环依赖；而对于创建完毕的Bean将从“当前创建Bean池”中清除掉。</p>
<p>首先我们先初始化三个Bean。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentA</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> StudentB studentB ;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentB</span><span class="params">(StudentB studentB)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.studentB = studentB;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentA</span><span class="params">()</span> </span>&#123;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentA</span><span class="params">(StudentB studentB)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.studentB = studentB;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentB</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> StudentC studentC ;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentC</span><span class="params">(StudentC studentC)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.studentC = studentC;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentB</span><span class="params">()</span> </span>&#123;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentB</span><span class="params">(StudentC studentC)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.studentC = studentC;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentC</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> StudentA studentA ;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentA</span><span class="params">(StudentA studentA)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.studentA = studentA;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentC</span><span class="params">()</span> </span>&#123;  </div><div class="line">    &#125;  </div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentC</span><span class="params">(StudentA studentA)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.studentA = studentA;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>OK，上面是很基本的3个类，，StudentA有参构造是StudentB。StudentB的有参构造是StudentC，StudentC的有参构造是StudentA ，这样就产生了一个循环依赖的情况，<br>我们都把这三个Bean交给Spring管理，并用有参构造实例化</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"a"</span> <span class="attr">class</span>=<span class="string">"com.zfx.student.StudentA"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"b"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"b"</span> <span class="attr">class</span>=<span class="string">"com.zfx.student.StudentB"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"c"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"c"</span> <span class="attr">class</span>=<span class="string">"com.zfx.student.StudentC"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"a"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>下面是测试类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/zfx/student/applicationContext.xml"</span>);  </div><div class="line">        <span class="comment">//System.out.println(context.getBean("a", StudentA.class));  </span></div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果报错信息为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Caused by: org.springframework.beans.factory.BeanCurrentlyInCreationException:   </div><div class="line">    Error creating bean with name &apos;a&apos;: Requested bean is currently in creation: Is there an unresolvable circular reference?</div></pre></td></tr></table></figure>
<p>如果大家理解开头那句话的话，这个报错应该不惊讶，Spring容器先创建单例StudentA，StudentA依赖StudentB，然后将A放在“当前创建Bean池”中，此时创建StudentB,StudentB依赖StudentC ,然后将B放在“当前创建Bean池”中,此时创建StudentC，StudentC又依赖StudentA， 但是，此时Student已经在池中，所以会报错，，因为在池中的Bean都是未初始化完的，所以会依赖错误 ，（初始化完的Bean会从池中移除）</p>
<h1 id="第二种：setter方式单例，默认方式"><a href="#第二种：setter方式单例，默认方式" class="headerlink" title="第二种：setter方式单例，默认方式"></a>第二种：setter方式单例，默认方式</h1><p>如果要说setter方式注入的话，我们最好先看一张Spring中Bean实例化的图</p>
<p><img src="http://img.blog.csdn.net/20170301154450018?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDY0NDQ0OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>如图中前两步骤得知：<strong>Spring是先将Bean对象实例化之后再设置对象属性的</strong></p>
<p>修改配置文件为set方式注入</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">&lt;!--scope="singleton"(默认就是单例方式)  --&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"a"</span> <span class="attr">class</span>=<span class="string">"com.zfx.student.StudentA"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"studentB"</span> <span class="attr">ref</span>=<span class="string">"b"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"b"</span> <span class="attr">class</span>=<span class="string">"com.zfx.student.StudentB"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"studentC"</span> <span class="attr">ref</span>=<span class="string">"c"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"c"</span> <span class="attr">class</span>=<span class="string">"com.zfx.student.StudentC"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"studentA"</span> <span class="attr">ref</span>=<span class="string">"a"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>下面是测试类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/zfx/student/applicationContext.xml"</span>);  </div><div class="line">        System.out.println(context.getBean(<span class="string">"a"</span>, StudentA.class));  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打印结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">com.zfx.student.StudentA@1fbfd6</div></pre></td></tr></table></figure>
<p>为什么用set方式就不报错了呢 ？<br>    我们结合上面那张图看，Spring先是用构造实例化Bean对象 ，此时Spring会将这个实例化结束的对象放到一个Map中，并且Spring提供了获取这个未设置属性的实例化对象引用的方法。   结合我们的实例来看，，当Spring实例化了StudentA、StudentB、StudentC后，紧接着会去设置对象的属性，此时StudentA依赖StudentB，就会去Map中取出存在里面的单例StudentB对象，以此类推，不会出来循环的问题喽、</p>
<p>下面是Spring源码中的实现方法，。以下的源码在Spring的Bean包中的DefaultSingletonBeanRegistry.Java类中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/** Cache of singleton objects: bean name --&gt; bean instance（缓存单例实例化对象的Map集合） */</span>  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> ConcurrentHashMap&lt;String, Object&gt;(<span class="number">64</span>);  </div><div class="line">      </div><div class="line">    <span class="comment">/** Cache of singleton factories: bean name --&gt; ObjectFactory（单例的工厂Bean缓存集合） */</span>  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, ObjectFactory&gt; singletonFactories = <span class="keyword">new</span> HashMap&lt;String, ObjectFactory&gt;(<span class="number">16</span>);  </div><div class="line">      </div><div class="line">    <span class="comment">/** Cache of early singleton objects: bean name --&gt; bean instance（早期的单身对象缓存集合） */</span>  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; earlySingletonObjects = <span class="keyword">new</span> HashMap&lt;String, Object&gt;(<span class="number">16</span>);  </div><div class="line">      </div><div class="line">    <span class="comment">/** Set of registered singletons, containing the bean names in registration order（单例的实例化对象名称集合） */</span>  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; registeredSingletons = <span class="keyword">new</span> LinkedHashSet&lt;String&gt;(<span class="number">64</span>);  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 添加单例实例 </div><div class="line">     * 解决循环引用的问题 </div><div class="line">     * Add the given singleton factory for building the specified singleton </div><div class="line">     * if necessary. </div><div class="line">     * &lt;p&gt;To be called for eager registration of singletons, e.g. to be able to </div><div class="line">     * resolve circular references. </div><div class="line">     * <span class="doctag">@param</span> beanName the name of the bean </div><div class="line">     * <span class="doctag">@param</span> singletonFactory the factory for the singleton object </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addSingletonFactory</span><span class="params">(String beanName, ObjectFactory singletonFactory)</span> </span>&#123;  </div><div class="line">        Assert.notNull(singletonFactory, <span class="string">"Singleton factory must not be null"</span>);  </div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.singletonObjects) &#123;  </div><div class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.singletonObjects.containsKey(beanName)) &#123;  </div><div class="line">                <span class="keyword">this</span>.singletonFactories.put(beanName, singletonFactory);  </div><div class="line">                <span class="keyword">this</span>.earlySingletonObjects.remove(beanName);  </div><div class="line">                <span class="keyword">this</span>.registeredSingletons.add(beanName);  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h1 id="第三种：setter方式原型，prototype"><a href="#第三种：setter方式原型，prototype" class="headerlink" title="第三种：setter方式原型，prototype"></a>第三种：setter方式原型，prototype</h1><p>修改配置文件为：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"a"</span> <span class="attr">class</span>=<span class="string">"com.zfx.student.StudentA"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"studentB"</span> <span class="attr">ref</span>=<span class="string">"b"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"b"</span> <span class="attr">class</span>=<span class="string">"com.zfx.student.StudentB"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"studentC"</span> <span class="attr">ref</span>=<span class="string">"c"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"c"</span> <span class="attr">class</span>=<span class="string">"com.zfx.student.StudentC"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"studentA"</span> <span class="attr">ref</span>=<span class="string">"a"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>scope=”prototype” 意思是 每次请求都会创建一个实例对象。两者的区别是：有状态的bean都使用Prototype作用域，无状态的一般都使用singleton单例作用域。<br>测试用例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/zfx/student/applicationContext.xml"</span>);  </div><div class="line">        &lt;strong&gt;<span class="comment">//此时必须要获取Spring管理的实例，因为现在scope="prototype" 只有请求获取的时候才会实例化对象&lt;/strong&gt;  </span></div><div class="line">        System.out.println(context.getBean(<span class="string">"a"</span>, StudentA.class));  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Caused by: org.springframework.beans.factory.BeanCurrentlyInCreationException:   </div><div class="line">    Error creating bean with name &apos;a&apos;: Requested bean is currently in creation: Is there an unresolvable circular reference?</div></pre></td></tr></table></figure>
<p>为什么原型模式就报错了呢 ？<br>对于“prototype”作用域Bean，Spring容器无法完成依赖注入，因为“prototype”作用域的Bean，Spring容<br>器不进行缓存，因此无法提前暴露一个创建中的Bean。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转自：&lt;a href=&quot;http://blog.csdn.net/u010644448/article/details/59108799&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/u010644448/arti
    
    </summary>
    
      <category term="spring" scheme="http://dingran.top/categories/spring/"/>
    
    
      <category term="spring" scheme="http://dingran.top/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>牛抢票关于HASH散列分析总结</title>
    <link href="http://dingran.top/2017/08/11/%E7%89%9B%E6%8A%A2%E7%A5%A8%E5%85%B3%E4%BA%8EHASH%E6%95%A3%E5%88%97%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/"/>
    <id>http://dingran.top/2017/08/11/牛抢票关于HASH散列分析总结/</id>
    <published>2017-08-11T08:11:01.000Z</published>
    <updated>2017-08-11T08:33:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近抢票的订单明显增加了好多，每个抢票都要在规定时间进行查询DTC再去12306查询判断余票，然后根据余位的数量进行分单。</p>
<p>随着订单的不断增加，比如当前有1W单，需要在一分钟全部重新查一遍，那么怎么保证所有的订单都能查到呢？之前做的是将订单根据时间戳与60作取余的操作，然后根据余数进行散列到某一个时间进行查询，但是从DTC的角度看OCS查询的分布，发现非常不平均，比如在1~10秒之间几乎没有请求，在30~40秒之间每秒的请求几乎成百上千，这么不平衡的查询造成一个非常严重的问题—DTC有限流，超过限流的部分都将被降级，那么对于OCS来说，这些被降级的数据都是不准确，拿这个数据进行出票站位的话就显得非常无奈。所以ocs的散列均衡就显得非常重要，因为DTC的限流就是根据OCS的散列平均值来设置的。</p>
<p>那怎么整改呢？这时候我想到之前看1.8的concurrentHashmap的一个想法就是数组链表，就是在向map里面放数据的时候进行hash然后散列，但是总是不可避免发生碰撞，map在put的时候，如果发现hash的位置已经有值了，就变成链表，如果链表的长度超过8，就变成红黑树…我们这个不用这么复杂，我们使用hash的散列的时候，发现该位置有值的时候，就在这个位置放置List，比如总量10000，散列到30秒，我们就准备30个捅，平均每秒散列333个左右，每个桶的容量也就是333，那么当散列到这个位置的时候发现桶的容量已经到达333的时候，就放到下一个桶，判断下一个桶的数量是否到达333，如果下一个桶也到333就在放到下一个。。。以此类推。总会放到平均的位置。这里没有使用rehash的操作，因为我测试起来效果不是很明显，并且我这边散列的时间都是很短的，没必要进行rehash操作。</p>
<p>经过写个例子进行压测，发现每次散列的请求数差距不会超过10个，对于10个请求差距已经是很好的，已经满足我的需要，如果想让差距更短，就需要在调节一下各个值得比例就可以了。</p>
<p>非常好，再接再厉。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近抢票的订单明显增加了好多，每个抢票都要在规定时间进行查询DTC再去12306查询判断余票，然后根据余位的数量进行分单。&lt;/p&gt;
&lt;p&gt;随着订单的不断增加，比如当前有1W单，需要在一分钟全部重新查一遍，那么怎么保证所有的订单都能查到呢？之前做的是将订单根据时间戳与60作取
    
    </summary>
    
      <category term="日积月累" scheme="http://dingran.top/categories/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
    
      <category term="途牛" scheme="http://dingran.top/tags/%E9%80%94%E7%89%9B/"/>
    
  </entry>
  
</feed>
